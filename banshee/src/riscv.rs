// Automatically generated by parse-opcodes.

/// The different instruction formats.
#[derive(Debug, Copy, Clone)]
pub enum Format {
    Illegal(u32),
    Unit(FormatUnit),
    AqrlRdRs1(FormatAqrlRdRs1),
    AqrlRdRs1Rs2(FormatAqrlRdRs1Rs2),
    Bimm12hiBimm12loRs1Rs2(FormatBimm12hiBimm12loRs1Rs2),
    FmPredRdRs1Succ(FormatFmPredRdRs1Succ),
    Imm12RdRs1(FormatImm12RdRs1),
    Imm12hiImm12loRs1Rs2(FormatImm12hiImm12loRs1Rs2),
    Imm20Rd(FormatImm20Rd),
    Jimm20Rd(FormatJimm20Rd),
    RdRmRs1(FormatRdRmRs1),
    RdRmRs1Rs2(FormatRdRmRs1Rs2),
    RdRmRs1Rs2Rs3(FormatRdRmRs1Rs2Rs3),
    RdRs1(FormatRdRs1),
    RdRs1Rs2(FormatRdRs1Rs2),
    RdRs1Rs2Rs3(FormatRdRs1Rs2Rs3),
    RdRs1Rs3Shamt(FormatRdRs1Rs3Shamt),
    RdRs1Shamt(FormatRdRs1Shamt),
    RdRs1Shamtw(FormatRdRs1Shamtw),
    Rs1Rs2(FormatRs1Rs2),
}

impl Format {
    pub fn raw(&self) -> u32 {
        match self {
            Self::Illegal(x) => *x,
            Self::Unit(x) => x.raw,
            Self::AqrlRdRs1(x) => x.raw,
            Self::AqrlRdRs1Rs2(x) => x.raw,
            Self::Bimm12hiBimm12loRs1Rs2(x) => x.raw,
            Self::FmPredRdRs1Succ(x) => x.raw,
            Self::Imm12RdRs1(x) => x.raw,
            Self::Imm12hiImm12loRs1Rs2(x) => x.raw,
            Self::Imm20Rd(x) => x.raw,
            Self::Jimm20Rd(x) => x.raw,
            Self::RdRmRs1(x) => x.raw,
            Self::RdRmRs1Rs2(x) => x.raw,
            Self::RdRmRs1Rs2Rs3(x) => x.raw,
            Self::RdRs1(x) => x.raw,
            Self::RdRs1Rs2(x) => x.raw,
            Self::RdRs1Rs2Rs3(x) => x.raw,
            Self::RdRs1Rs3Shamt(x) => x.raw,
            Self::RdRs1Shamt(x) => x.raw,
            Self::RdRs1Shamtw(x) => x.raw,
            Self::Rs1Rs2(x) => x.raw,
        }
    }
}

impl std::fmt::Display for Format {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Illegal(x) => write!(f, "<illegal 0x{:x}>", x),
            Self::Unit(x) => write!(f, "{}", x),
            Self::AqrlRdRs1(x) => write!(f, "{}", x),
            Self::AqrlRdRs1Rs2(x) => write!(f, "{}", x),
            Self::Bimm12hiBimm12loRs1Rs2(x) => write!(f, "{}", x),
            Self::FmPredRdRs1Succ(x) => write!(f, "{}", x),
            Self::Imm12RdRs1(x) => write!(f, "{}", x),
            Self::Imm12hiImm12loRs1Rs2(x) => write!(f, "{}", x),
            Self::Imm20Rd(x) => write!(f, "{}", x),
            Self::Jimm20Rd(x) => write!(f, "{}", x),
            Self::RdRmRs1(x) => write!(f, "{}", x),
            Self::RdRmRs1Rs2(x) => write!(f, "{}", x),
            Self::RdRmRs1Rs2Rs3(x) => write!(f, "{}", x),
            Self::RdRs1(x) => write!(f, "{}", x),
            Self::RdRs1Rs2(x) => write!(f, "{}", x),
            Self::RdRs1Rs2Rs3(x) => write!(f, "{}", x),
            Self::RdRs1Rs3Shamt(x) => write!(f, "{}", x),
            Self::RdRs1Shamt(x) => write!(f, "{}", x),
            Self::RdRs1Shamtw(x) => write!(f, "{}", x),
            Self::Rs1Rs2(x) => write!(f, "{}", x),
        }
    }
}

/// The `Unit` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatUnit {
    pub op: OpcodeUnit,
    pub raw: u32,
}

impl FormatUnit {}

/// Opcodes with the `Unit` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeUnit {
    Ecall,
    Ebreak,
    Uret,
    Sret,
    Mret,
    Dret,
    Wfi,
}

impl std::fmt::Display for FormatUnit {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeUnit {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Ecall => write!(f, "ecall"),
            Self::Ebreak => write!(f, "ebreak"),
            Self::Uret => write!(f, "uret"),
            Self::Sret => write!(f, "sret"),
            Self::Mret => write!(f, "mret"),
            Self::Dret => write!(f, "dret"),
            Self::Wfi => write!(f, "wfi"),
        }
    }
}

/// The `AqrlRdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatAqrlRdRs1 {
    pub op: OpcodeAqrlRdRs1,
    pub raw: u32,
    pub aqrl: u32,
    pub rd: u32,
    pub rs1: u32,
}

impl FormatAqrlRdRs1 {}

/// Opcodes with the `AqrlRdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeAqrlRdRs1 {
    LrW,
    LrD,
}

impl std::fmt::Display for FormatAqrlRdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " aqrl={:x}", self.aqrl)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeAqrlRdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::LrW => write!(f, "lr.w"),
            Self::LrD => write!(f, "lr.d"),
        }
    }
}

/// The `AqrlRdRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatAqrlRdRs1Rs2 {
    pub op: OpcodeAqrlRdRs1Rs2,
    pub raw: u32,
    pub aqrl: u32,
    pub rd: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatAqrlRdRs1Rs2 {}

/// Opcodes with the `AqrlRdRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeAqrlRdRs1Rs2 {
    AmoaddW,
    AmoxorW,
    AmoorW,
    AmoandW,
    AmominW,
    AmomaxW,
    AmominuW,
    AmomaxuW,
    AmoswapW,
    ScW,
    AmoaddD,
    AmoxorD,
    AmoorD,
    AmoandD,
    AmominD,
    AmomaxD,
    AmominuD,
    AmomaxuD,
    AmoswapD,
    ScD,
}

impl std::fmt::Display for FormatAqrlRdRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " aqrl={:x}", self.aqrl)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeAqrlRdRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::AmoaddW => write!(f, "amoadd.w"),
            Self::AmoxorW => write!(f, "amoxor.w"),
            Self::AmoorW => write!(f, "amoor.w"),
            Self::AmoandW => write!(f, "amoand.w"),
            Self::AmominW => write!(f, "amomin.w"),
            Self::AmomaxW => write!(f, "amomax.w"),
            Self::AmominuW => write!(f, "amominu.w"),
            Self::AmomaxuW => write!(f, "amomaxu.w"),
            Self::AmoswapW => write!(f, "amoswap.w"),
            Self::ScW => write!(f, "sc.w"),
            Self::AmoaddD => write!(f, "amoadd.d"),
            Self::AmoxorD => write!(f, "amoxor.d"),
            Self::AmoorD => write!(f, "amoor.d"),
            Self::AmoandD => write!(f, "amoand.d"),
            Self::AmominD => write!(f, "amomin.d"),
            Self::AmomaxD => write!(f, "amomax.d"),
            Self::AmominuD => write!(f, "amominu.d"),
            Self::AmomaxuD => write!(f, "amomaxu.d"),
            Self::AmoswapD => write!(f, "amoswap.d"),
            Self::ScD => write!(f, "sc.d"),
        }
    }
}

/// The `Bimm12hiBimm12loRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatBimm12hiBimm12loRs1Rs2 {
    pub op: OpcodeBimm12hiBimm12loRs1Rs2,
    pub raw: u32,
    pub bimm12hi: u32,
    pub bimm12lo: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatBimm12hiBimm12loRs1Rs2 {
    pub fn bimm(&self) -> i32 {
        (((((self.bimm12lo >> 0) & 0x1) << 11
            | ((self.bimm12lo >> 1) & 0xf) << 1
            | ((self.bimm12hi >> 0) & 0x3f) << 5
            | ((self.bimm12hi >> 6) & 0x1) << 12)
            << 20) as i32)
            >> 20
    }
}

/// Opcodes with the `Bimm12hiBimm12loRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeBimm12hiBimm12loRs1Rs2 {
    Beq,
    Bne,
    Blt,
    Bge,
    Bltu,
    Bgeu,
}

impl std::fmt::Display for FormatBimm12hiBimm12loRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " bimm12hi={:x}", self.bimm12hi)?;
        write!(f, " bimm12lo={:x}", self.bimm12lo)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeBimm12hiBimm12loRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Beq => write!(f, "beq"),
            Self::Bne => write!(f, "bne"),
            Self::Blt => write!(f, "blt"),
            Self::Bge => write!(f, "bge"),
            Self::Bltu => write!(f, "bltu"),
            Self::Bgeu => write!(f, "bgeu"),
        }
    }
}

/// The `FmPredRdRs1Succ` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatFmPredRdRs1Succ {
    pub op: OpcodeFmPredRdRs1Succ,
    pub raw: u32,
    pub fm: u32,
    pub pred: u32,
    pub rd: u32,
    pub rs1: u32,
    pub succ: u32,
}

impl FormatFmPredRdRs1Succ {}

/// Opcodes with the `FmPredRdRs1Succ` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeFmPredRdRs1Succ {
    Fence,
}

impl std::fmt::Display for FormatFmPredRdRs1Succ {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " fm={:x}", self.fm)?;
        write!(f, " pred={:x}", self.pred)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " succ={:x}", self.succ)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeFmPredRdRs1Succ {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Fence => write!(f, "fence"),
        }
    }
}

/// The `Imm12RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm12RdRs1 {
    pub op: OpcodeImm12RdRs1,
    pub raw: u32,
    pub imm12: u32,
    pub rd: u32,
    pub rs1: u32,
}

impl FormatImm12RdRs1 {
    pub fn imm(&self) -> i32 {
        ((self.imm12 << 20) as i32) >> 20
    }
}

/// Opcodes with the `Imm12RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm12RdRs1 {
    Jalr,
    Addi,
    Slti,
    Sltiu,
    Xori,
    Ori,
    Andi,
    Addiw,
    Lb,
    Lh,
    Lw,
    Ld,
    Lbu,
    Lhu,
    Lwu,
    FenceI,
    Csrrw,
    Csrrs,
    Csrrc,
    Csrrwi,
    Csrrsi,
    Csrrci,
    Flw,
    Fld,
    Flq,
}

impl std::fmt::Display for FormatImm12RdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm12={:x}", self.imm12)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm12RdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Jalr => write!(f, "jalr"),
            Self::Addi => write!(f, "addi"),
            Self::Slti => write!(f, "slti"),
            Self::Sltiu => write!(f, "sltiu"),
            Self::Xori => write!(f, "xori"),
            Self::Ori => write!(f, "ori"),
            Self::Andi => write!(f, "andi"),
            Self::Addiw => write!(f, "addiw"),
            Self::Lb => write!(f, "lb"),
            Self::Lh => write!(f, "lh"),
            Self::Lw => write!(f, "lw"),
            Self::Ld => write!(f, "ld"),
            Self::Lbu => write!(f, "lbu"),
            Self::Lhu => write!(f, "lhu"),
            Self::Lwu => write!(f, "lwu"),
            Self::FenceI => write!(f, "fence.i"),
            Self::Csrrw => write!(f, "csrrw"),
            Self::Csrrs => write!(f, "csrrs"),
            Self::Csrrc => write!(f, "csrrc"),
            Self::Csrrwi => write!(f, "csrrwi"),
            Self::Csrrsi => write!(f, "csrrsi"),
            Self::Csrrci => write!(f, "csrrci"),
            Self::Flw => write!(f, "flw"),
            Self::Fld => write!(f, "fld"),
            Self::Flq => write!(f, "flq"),
        }
    }
}

/// The `Imm12hiImm12loRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm12hiImm12loRs1Rs2 {
    pub op: OpcodeImm12hiImm12loRs1Rs2,
    pub raw: u32,
    pub imm12hi: u32,
    pub imm12lo: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatImm12hiImm12loRs1Rs2 {
    pub fn imm(&self) -> i32 {
        (((((self.imm12lo >> 0) & 0x1f) << 0 | ((self.imm12hi >> 0) & 0x1f) << 5) << 20) as i32)
            >> 20
    }
}

/// Opcodes with the `Imm12hiImm12loRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm12hiImm12loRs1Rs2 {
    Sb,
    Sh,
    Sw,
    Sd,
    Fsw,
    Fsd,
    Fsq,
}

impl std::fmt::Display for FormatImm12hiImm12loRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm12hi={:x}", self.imm12hi)?;
        write!(f, " imm12lo={:x}", self.imm12lo)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm12hiImm12loRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Sb => write!(f, "sb"),
            Self::Sh => write!(f, "sh"),
            Self::Sw => write!(f, "sw"),
            Self::Sd => write!(f, "sd"),
            Self::Fsw => write!(f, "fsw"),
            Self::Fsd => write!(f, "fsd"),
            Self::Fsq => write!(f, "fsq"),
        }
    }
}

/// The `Imm20Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm20Rd {
    pub op: OpcodeImm20Rd,
    pub raw: u32,
    pub imm20: u32,
    pub rd: u32,
}

impl FormatImm20Rd {}

/// Opcodes with the `Imm20Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm20Rd {
    Lui,
    Auipc,
}

impl std::fmt::Display for FormatImm20Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm20={:x}", self.imm20)?;
        write!(f, " rd={:x}", self.rd)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm20Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Lui => write!(f, "lui"),
            Self::Auipc => write!(f, "auipc"),
        }
    }
}

/// The `Jimm20Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatJimm20Rd {
    pub op: OpcodeJimm20Rd,
    pub raw: u32,
    pub jimm20: u32,
    pub rd: u32,
}

impl FormatJimm20Rd {
    pub fn jimm(&self) -> i32 {
        (((((self.jimm20 >> 0) & 0xff) << 12
            | ((self.jimm20 >> 8) & 0x1) << 11
            | ((self.jimm20 >> 9) & 0x3ff) << 1
            | ((self.jimm20 >> 19) & 0x1) << 20)
            << 11) as i32)
            >> 11
    }
}

/// Opcodes with the `Jimm20Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeJimm20Rd {
    Jal,
}

impl std::fmt::Display for FormatJimm20Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " jimm20={:x}", self.jimm20)?;
        write!(f, " rd={:x}", self.rd)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeJimm20Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Jal => write!(f, "jal"),
        }
    }
}

/// The `RdRmRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRmRs1 {
    pub op: OpcodeRdRmRs1,
    pub raw: u32,
    pub rd: u32,
    pub rm: u32,
    pub rs1: u32,
}

impl FormatRdRmRs1 {}

/// Opcodes with the `RdRmRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRmRs1 {
    FsqrtS,
    FcvtSD,
    FcvtDS,
    FsqrtD,
    FcvtSQ,
    FcvtQS,
    FcvtDQ,
    FcvtQD,
    FsqrtQ,
    FcvtWS,
    FcvtWuS,
    FcvtLS,
    FcvtLuS,
    FcvtWD,
    FcvtWuD,
    FcvtLD,
    FcvtLuD,
    FcvtWQ,
    FcvtWuQ,
    FcvtLQ,
    FcvtLuQ,
    FcvtSW,
    FcvtSWu,
    FcvtSL,
    FcvtSLu,
    FcvtDW,
    FcvtDWu,
    FcvtDL,
    FcvtDLu,
    FcvtQW,
    FcvtQWu,
    FcvtQL,
    FcvtQLu,
}

impl std::fmt::Display for FormatRdRmRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rm={:x}", self.rm)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRmRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::FsqrtS => write!(f, "fsqrt.s"),
            Self::FcvtSD => write!(f, "fcvt.s.d"),
            Self::FcvtDS => write!(f, "fcvt.d.s"),
            Self::FsqrtD => write!(f, "fsqrt.d"),
            Self::FcvtSQ => write!(f, "fcvt.s.q"),
            Self::FcvtQS => write!(f, "fcvt.q.s"),
            Self::FcvtDQ => write!(f, "fcvt.d.q"),
            Self::FcvtQD => write!(f, "fcvt.q.d"),
            Self::FsqrtQ => write!(f, "fsqrt.q"),
            Self::FcvtWS => write!(f, "fcvt.w.s"),
            Self::FcvtWuS => write!(f, "fcvt.wu.s"),
            Self::FcvtLS => write!(f, "fcvt.l.s"),
            Self::FcvtLuS => write!(f, "fcvt.lu.s"),
            Self::FcvtWD => write!(f, "fcvt.w.d"),
            Self::FcvtWuD => write!(f, "fcvt.wu.d"),
            Self::FcvtLD => write!(f, "fcvt.l.d"),
            Self::FcvtLuD => write!(f, "fcvt.lu.d"),
            Self::FcvtWQ => write!(f, "fcvt.w.q"),
            Self::FcvtWuQ => write!(f, "fcvt.wu.q"),
            Self::FcvtLQ => write!(f, "fcvt.l.q"),
            Self::FcvtLuQ => write!(f, "fcvt.lu.q"),
            Self::FcvtSW => write!(f, "fcvt.s.w"),
            Self::FcvtSWu => write!(f, "fcvt.s.wu"),
            Self::FcvtSL => write!(f, "fcvt.s.l"),
            Self::FcvtSLu => write!(f, "fcvt.s.lu"),
            Self::FcvtDW => write!(f, "fcvt.d.w"),
            Self::FcvtDWu => write!(f, "fcvt.d.wu"),
            Self::FcvtDL => write!(f, "fcvt.d.l"),
            Self::FcvtDLu => write!(f, "fcvt.d.lu"),
            Self::FcvtQW => write!(f, "fcvt.q.w"),
            Self::FcvtQWu => write!(f, "fcvt.q.wu"),
            Self::FcvtQL => write!(f, "fcvt.q.l"),
            Self::FcvtQLu => write!(f, "fcvt.q.lu"),
        }
    }
}

/// The `RdRmRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRmRs1Rs2 {
    pub op: OpcodeRdRmRs1Rs2,
    pub raw: u32,
    pub rd: u32,
    pub rm: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatRdRmRs1Rs2 {}

/// Opcodes with the `RdRmRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRmRs1Rs2 {
    FaddS,
    FsubS,
    FmulS,
    FdivS,
    FaddD,
    FsubD,
    FmulD,
    FdivD,
    FaddQ,
    FsubQ,
    FmulQ,
    FdivQ,
}

impl std::fmt::Display for FormatRdRmRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rm={:x}", self.rm)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRmRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::FaddS => write!(f, "fadd.s"),
            Self::FsubS => write!(f, "fsub.s"),
            Self::FmulS => write!(f, "fmul.s"),
            Self::FdivS => write!(f, "fdiv.s"),
            Self::FaddD => write!(f, "fadd.d"),
            Self::FsubD => write!(f, "fsub.d"),
            Self::FmulD => write!(f, "fmul.d"),
            Self::FdivD => write!(f, "fdiv.d"),
            Self::FaddQ => write!(f, "fadd.q"),
            Self::FsubQ => write!(f, "fsub.q"),
            Self::FmulQ => write!(f, "fmul.q"),
            Self::FdivQ => write!(f, "fdiv.q"),
        }
    }
}

/// The `RdRmRs1Rs2Rs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRmRs1Rs2Rs3 {
    pub op: OpcodeRdRmRs1Rs2Rs3,
    pub raw: u32,
    pub rd: u32,
    pub rm: u32,
    pub rs1: u32,
    pub rs2: u32,
    pub rs3: u32,
}

impl FormatRdRmRs1Rs2Rs3 {}

/// Opcodes with the `RdRmRs1Rs2Rs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRmRs1Rs2Rs3 {
    FmaddS,
    FmsubS,
    FnmsubS,
    FnmaddS,
    FmaddD,
    FmsubD,
    FnmsubD,
    FnmaddD,
    FmaddQ,
    FmsubQ,
    FnmsubQ,
    FnmaddQ,
}

impl std::fmt::Display for FormatRdRmRs1Rs2Rs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rm={:x}", self.rm)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        write!(f, " rs3={:x}", self.rs3)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRmRs1Rs2Rs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::FmaddS => write!(f, "fmadd.s"),
            Self::FmsubS => write!(f, "fmsub.s"),
            Self::FnmsubS => write!(f, "fnmsub.s"),
            Self::FnmaddS => write!(f, "fnmadd.s"),
            Self::FmaddD => write!(f, "fmadd.d"),
            Self::FmsubD => write!(f, "fmsub.d"),
            Self::FnmsubD => write!(f, "fnmsub.d"),
            Self::FnmaddD => write!(f, "fnmadd.d"),
            Self::FmaddQ => write!(f, "fmadd.q"),
            Self::FmsubQ => write!(f, "fmsub.q"),
            Self::FnmsubQ => write!(f, "fnmsub.q"),
            Self::FnmaddQ => write!(f, "fnmadd.q"),
        }
    }
}

/// The `RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs1 {
    pub op: OpcodeRdRs1,
    pub raw: u32,
    pub rd: u32,
    pub rs1: u32,
}

impl FormatRdRs1 {}

/// Opcodes with the `RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs1 {
    Clz,
    Ctz,
    Pcnt,
    SextB,
    SextH,
    Crc32B,
    Crc32H,
    Crc32W,
    Crc32cB,
    Crc32cH,
    Crc32cW,
    FmvXW,
    FclassS,
    FmvXD,
    FclassD,
    FmvXQ,
    FclassQ,
    FmvWX,
    FmvDX,
    FmvQX,
}

impl std::fmt::Display for FormatRdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Clz => write!(f, "clz"),
            Self::Ctz => write!(f, "ctz"),
            Self::Pcnt => write!(f, "pcnt"),
            Self::SextB => write!(f, "sext.b"),
            Self::SextH => write!(f, "sext.h"),
            Self::Crc32B => write!(f, "crc32.b"),
            Self::Crc32H => write!(f, "crc32.h"),
            Self::Crc32W => write!(f, "crc32.w"),
            Self::Crc32cB => write!(f, "crc32c.b"),
            Self::Crc32cH => write!(f, "crc32c.h"),
            Self::Crc32cW => write!(f, "crc32c.w"),
            Self::FmvXW => write!(f, "fmv.x.w"),
            Self::FclassS => write!(f, "fclass.s"),
            Self::FmvXD => write!(f, "fmv.x.d"),
            Self::FclassD => write!(f, "fclass.d"),
            Self::FmvXQ => write!(f, "fmv.x.q"),
            Self::FclassQ => write!(f, "fclass.q"),
            Self::FmvWX => write!(f, "fmv.w.x"),
            Self::FmvDX => write!(f, "fmv.d.x"),
            Self::FmvQX => write!(f, "fmv.q.x"),
        }
    }
}

/// The `RdRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs1Rs2 {
    pub op: OpcodeRdRs1Rs2,
    pub raw: u32,
    pub rd: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatRdRs1Rs2 {}

/// Opcodes with the `RdRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs1Rs2 {
    Add,
    Sub,
    Sll,
    Slt,
    Sltu,
    Xor,
    Srl,
    Sra,
    Or,
    And,
    Addw,
    Subw,
    Sllw,
    Srlw,
    Sraw,
    Mul,
    Mulh,
    Mulhsu,
    Mulhu,
    Div,
    Divu,
    Rem,
    Remu,
    Mulw,
    Divw,
    Divuw,
    Remw,
    Remuw,
    Andn,
    Orn,
    Xnor,
    Slo,
    Sro,
    Rol,
    Ror,
    Sbclr,
    Sbset,
    Sbinv,
    Sbext,
    Gorc,
    Grev,
    Sh1add,
    Sh2add,
    Sh3add,
    Clmul,
    Clmulr,
    Clmulh,
    Min,
    Max,
    Minu,
    Maxu,
    Shfl,
    Unshfl,
    Bext,
    Bdep,
    Pack,
    Packu,
    Packh,
    Bfp,
    FsgnjS,
    FsgnjnS,
    FsgnjxS,
    FminS,
    FmaxS,
    FsgnjD,
    FsgnjnD,
    FsgnjxD,
    FminD,
    FmaxD,
    FsgnjQ,
    FsgnjnQ,
    FsgnjxQ,
    FminQ,
    FmaxQ,
    FleS,
    FltS,
    FeqS,
    FleD,
    FltD,
    FeqD,
    FleQ,
    FltQ,
    FeqQ,
}

impl std::fmt::Display for FormatRdRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Add => write!(f, "add"),
            Self::Sub => write!(f, "sub"),
            Self::Sll => write!(f, "sll"),
            Self::Slt => write!(f, "slt"),
            Self::Sltu => write!(f, "sltu"),
            Self::Xor => write!(f, "xor"),
            Self::Srl => write!(f, "srl"),
            Self::Sra => write!(f, "sra"),
            Self::Or => write!(f, "or"),
            Self::And => write!(f, "and"),
            Self::Addw => write!(f, "addw"),
            Self::Subw => write!(f, "subw"),
            Self::Sllw => write!(f, "sllw"),
            Self::Srlw => write!(f, "srlw"),
            Self::Sraw => write!(f, "sraw"),
            Self::Mul => write!(f, "mul"),
            Self::Mulh => write!(f, "mulh"),
            Self::Mulhsu => write!(f, "mulhsu"),
            Self::Mulhu => write!(f, "mulhu"),
            Self::Div => write!(f, "div"),
            Self::Divu => write!(f, "divu"),
            Self::Rem => write!(f, "rem"),
            Self::Remu => write!(f, "remu"),
            Self::Mulw => write!(f, "mulw"),
            Self::Divw => write!(f, "divw"),
            Self::Divuw => write!(f, "divuw"),
            Self::Remw => write!(f, "remw"),
            Self::Remuw => write!(f, "remuw"),
            Self::Andn => write!(f, "andn"),
            Self::Orn => write!(f, "orn"),
            Self::Xnor => write!(f, "xnor"),
            Self::Slo => write!(f, "slo"),
            Self::Sro => write!(f, "sro"),
            Self::Rol => write!(f, "rol"),
            Self::Ror => write!(f, "ror"),
            Self::Sbclr => write!(f, "sbclr"),
            Self::Sbset => write!(f, "sbset"),
            Self::Sbinv => write!(f, "sbinv"),
            Self::Sbext => write!(f, "sbext"),
            Self::Gorc => write!(f, "gorc"),
            Self::Grev => write!(f, "grev"),
            Self::Sh1add => write!(f, "sh1add"),
            Self::Sh2add => write!(f, "sh2add"),
            Self::Sh3add => write!(f, "sh3add"),
            Self::Clmul => write!(f, "clmul"),
            Self::Clmulr => write!(f, "clmulr"),
            Self::Clmulh => write!(f, "clmulh"),
            Self::Min => write!(f, "min"),
            Self::Max => write!(f, "max"),
            Self::Minu => write!(f, "minu"),
            Self::Maxu => write!(f, "maxu"),
            Self::Shfl => write!(f, "shfl"),
            Self::Unshfl => write!(f, "unshfl"),
            Self::Bext => write!(f, "bext"),
            Self::Bdep => write!(f, "bdep"),
            Self::Pack => write!(f, "pack"),
            Self::Packu => write!(f, "packu"),
            Self::Packh => write!(f, "packh"),
            Self::Bfp => write!(f, "bfp"),
            Self::FsgnjS => write!(f, "fsgnj.s"),
            Self::FsgnjnS => write!(f, "fsgnjn.s"),
            Self::FsgnjxS => write!(f, "fsgnjx.s"),
            Self::FminS => write!(f, "fmin.s"),
            Self::FmaxS => write!(f, "fmax.s"),
            Self::FsgnjD => write!(f, "fsgnj.d"),
            Self::FsgnjnD => write!(f, "fsgnjn.d"),
            Self::FsgnjxD => write!(f, "fsgnjx.d"),
            Self::FminD => write!(f, "fmin.d"),
            Self::FmaxD => write!(f, "fmax.d"),
            Self::FsgnjQ => write!(f, "fsgnj.q"),
            Self::FsgnjnQ => write!(f, "fsgnjn.q"),
            Self::FsgnjxQ => write!(f, "fsgnjx.q"),
            Self::FminQ => write!(f, "fmin.q"),
            Self::FmaxQ => write!(f, "fmax.q"),
            Self::FleS => write!(f, "fle.s"),
            Self::FltS => write!(f, "flt.s"),
            Self::FeqS => write!(f, "feq.s"),
            Self::FleD => write!(f, "fle.d"),
            Self::FltD => write!(f, "flt.d"),
            Self::FeqD => write!(f, "feq.d"),
            Self::FleQ => write!(f, "fle.q"),
            Self::FltQ => write!(f, "flt.q"),
            Self::FeqQ => write!(f, "feq.q"),
        }
    }
}

/// The `RdRs1Rs2Rs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs1Rs2Rs3 {
    pub op: OpcodeRdRs1Rs2Rs3,
    pub raw: u32,
    pub rd: u32,
    pub rs1: u32,
    pub rs2: u32,
    pub rs3: u32,
}

impl FormatRdRs1Rs2Rs3 {}

/// Opcodes with the `RdRs1Rs2Rs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs1Rs2Rs3 {
    Cmix,
    Cmov,
    Fsl,
    Fsr,
}

impl std::fmt::Display for FormatRdRs1Rs2Rs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        write!(f, " rs3={:x}", self.rs3)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs1Rs2Rs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Cmix => write!(f, "cmix"),
            Self::Cmov => write!(f, "cmov"),
            Self::Fsl => write!(f, "fsl"),
            Self::Fsr => write!(f, "fsr"),
        }
    }
}

/// The `RdRs1Rs3Shamt` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs1Rs3Shamt {
    pub op: OpcodeRdRs1Rs3Shamt,
    pub raw: u32,
    pub rd: u32,
    pub rs1: u32,
    pub rs3: u32,
    pub shamt: u32,
}

impl FormatRdRs1Rs3Shamt {}

/// Opcodes with the `RdRs1Rs3Shamt` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs1Rs3Shamt {
    Fsri,
}

impl std::fmt::Display for FormatRdRs1Rs3Shamt {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs3={:x}", self.rs3)?;
        write!(f, " shamt={:x}", self.shamt)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs1Rs3Shamt {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Fsri => write!(f, "fsri"),
        }
    }
}

/// The `RdRs1Shamt` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs1Shamt {
    pub op: OpcodeRdRs1Shamt,
    pub raw: u32,
    pub rd: u32,
    pub rs1: u32,
    pub shamt: u32,
}

impl FormatRdRs1Shamt {}

/// Opcodes with the `RdRs1Shamt` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs1Shamt {
    Slli,
    Srli,
    Srai,
    Sloi,
    Sroi,
    Rori,
    Sbclri,
    Sbseti,
    Sbinvi,
    Sbexti,
    Gorci,
    Grevi,
}

impl std::fmt::Display for FormatRdRs1Shamt {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " shamt={:x}", self.shamt)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs1Shamt {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Slli => write!(f, "slli"),
            Self::Srli => write!(f, "srli"),
            Self::Srai => write!(f, "srai"),
            Self::Sloi => write!(f, "sloi"),
            Self::Sroi => write!(f, "sroi"),
            Self::Rori => write!(f, "rori"),
            Self::Sbclri => write!(f, "sbclri"),
            Self::Sbseti => write!(f, "sbseti"),
            Self::Sbinvi => write!(f, "sbinvi"),
            Self::Sbexti => write!(f, "sbexti"),
            Self::Gorci => write!(f, "gorci"),
            Self::Grevi => write!(f, "grevi"),
        }
    }
}

/// The `RdRs1Shamtw` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs1Shamtw {
    pub op: OpcodeRdRs1Shamtw,
    pub raw: u32,
    pub rd: u32,
    pub rs1: u32,
    pub shamtw: u32,
}

impl FormatRdRs1Shamtw {}

/// Opcodes with the `RdRs1Shamtw` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs1Shamtw {
    Slliw,
    Srliw,
    Sraiw,
    Shfli,
    Unshfli,
}

impl std::fmt::Display for FormatRdRs1Shamtw {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " shamtw={:x}", self.shamtw)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs1Shamtw {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Slliw => write!(f, "slliw"),
            Self::Srliw => write!(f, "srliw"),
            Self::Sraiw => write!(f, "sraiw"),
            Self::Shfli => write!(f, "shfli"),
            Self::Unshfli => write!(f, "unshfli"),
        }
    }
}

/// The `Rs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRs1Rs2 {
    pub op: OpcodeRs1Rs2,
    pub raw: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatRs1Rs2 {}

/// Opcodes with the `Rs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRs1Rs2 {
    SfenceVma,
    HfenceBvma,
    HfenceGvma,
}

impl std::fmt::Display for FormatRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::SfenceVma => write!(f, "sfence.vma"),
            Self::HfenceBvma => write!(f, "hfence.bvma"),
            Self::HfenceGvma => write!(f, "hfence.gvma"),
        }
    }
}

/// Parse a `u32` into an instruction.
pub fn parse_u32(raw: u32) -> Format {
    match raw & 0x7f {
        0x6f => return parse_jimm20_rd(OpcodeJimm20Rd::Jal, raw),
        0x37 => return parse_imm20_rd(OpcodeImm20Rd::Lui, raw),
        0x17 => return parse_imm20_rd(OpcodeImm20Rd::Auipc, raw),
        _ => (),
    }
    match raw & 0x707f {
        0x63 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Beq, raw),
        0x1063 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Bne, raw),
        0x4063 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Blt, raw),
        0x5063 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Bge, raw),
        0x6063 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Bltu, raw),
        0x7063 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Bgeu, raw),
        0x67 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Jalr, raw),
        0x13 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Addi, raw),
        0x2013 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Slti, raw),
        0x3013 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Sltiu, raw),
        0x4013 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Xori, raw),
        0x6013 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Ori, raw),
        0x7013 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Andi, raw),
        0x1b => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Addiw, raw),
        0x3 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lb, raw),
        0x1003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lh, raw),
        0x2003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lw, raw),
        0x3003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Ld, raw),
        0x4003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lbu, raw),
        0x5003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lhu, raw),
        0x6003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lwu, raw),
        0x23 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Sb, raw),
        0x1023 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Sh, raw),
        0x2023 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Sw, raw),
        0x3023 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Sd, raw),
        0xf => return parse_fm_pred_rd_rs1_succ(OpcodeFmPredRdRs1Succ::Fence, raw),
        0x100f => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::FenceI, raw),
        0x1073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrw, raw),
        0x2073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrs, raw),
        0x3073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrc, raw),
        0x5073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrwi, raw),
        0x6073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrsi, raw),
        0x7073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrci, raw),
        0x2007 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Flw, raw),
        0x3007 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Fld, raw),
        0x4007 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Flq, raw),
        0x2027 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Fsw, raw),
        0x3027 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Fsd, raw),
        0x4027 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Fsq, raw),
        _ => (),
    }
    match raw & 0x400707f {
        0x4005013 => return parse_rd_rs1_rs3_shamt(OpcodeRdRs1Rs3Shamt::Fsri, raw),
        _ => (),
    }
    match raw & 0x600007f {
        0x43 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmaddS, raw),
        0x47 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmsubS, raw),
        0x4b => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmsubS, raw),
        0x4f => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmaddS, raw),
        0x2000043 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmaddD, raw),
        0x2000047 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmsubD, raw),
        0x200004b => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmsubD, raw),
        0x200004f => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmaddD, raw),
        0x6000043 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmaddQ, raw),
        0x6000047 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmsubQ, raw),
        0x600004b => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmsubQ, raw),
        0x600004f => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmaddQ, raw),
        _ => (),
    }
    match raw & 0x600707f {
        0x6001033 => return parse_rd_rs1_rs2_rs3(OpcodeRdRs1Rs2Rs3::Cmix, raw),
        0x6005033 => return parse_rd_rs1_rs2_rs3(OpcodeRdRs1Rs2Rs3::Cmov, raw),
        0x4001033 => return parse_rd_rs1_rs2_rs3(OpcodeRdRs1Rs2Rs3::Fsl, raw),
        0x4005033 => return parse_rd_rs1_rs2_rs3(OpcodeRdRs1Rs2Rs3::Fsr, raw),
        _ => (),
    }
    match raw & 0xf800707f {
        0x202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoaddW, raw),
        0x2000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoxorW, raw),
        0x4000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoorW, raw),
        0x6000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoandW, raw),
        0x8000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmominW, raw),
        0xa000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmomaxW, raw),
        0xc000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmominuW, raw),
        0xe000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmomaxuW, raw),
        0x800202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoswapW, raw),
        0x1800202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::ScW, raw),
        0x302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoaddD, raw),
        0x2000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoxorD, raw),
        0x4000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoorD, raw),
        0x6000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoandD, raw),
        0x8000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmominD, raw),
        0xa000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmomaxD, raw),
        0xc000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmominuD, raw),
        0xe000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmomaxuD, raw),
        0x800302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoswapD, raw),
        0x1800302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::ScD, raw),
        _ => (),
    }
    match raw & 0xf9f0707f {
        0x1000202f => return parse_aqrl_rd_rs1(OpcodeAqrlRdRs1::LrW, raw),
        0x1000302f => return parse_aqrl_rd_rs1(OpcodeAqrlRdRs1::LrD, raw),
        _ => (),
    }
    match raw & 0xfc00707f {
        0x1013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Slli, raw),
        0x5013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Srli, raw),
        0x40005013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Srai, raw),
        0x20001013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Sloi, raw),
        0x20005013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Sroi, raw),
        0x60005013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Rori, raw),
        0x48001013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Sbclri, raw),
        0x28001013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Sbseti, raw),
        0x68001013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Sbinvi, raw),
        0x48005013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Sbexti, raw),
        0x28005013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Gorci, raw),
        0x68005013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Grevi, raw),
        _ => (),
    }
    match raw & 0xfe00007f {
        0x53 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FaddS, raw),
        0x8000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FsubS, raw),
        0x10000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FmulS, raw),
        0x18000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FdivS, raw),
        0x2000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FaddD, raw),
        0xa000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FsubD, raw),
        0x12000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FmulD, raw),
        0x1a000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FdivD, raw),
        0x6000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FaddQ, raw),
        0xe000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FsubQ, raw),
        0x16000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FmulQ, raw),
        0x1e000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FdivQ, raw),
        _ => (),
    }
    match raw & 0xfe00707f {
        0x33 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Add, raw),
        0x40000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sub, raw),
        0x1033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sll, raw),
        0x2033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Slt, raw),
        0x3033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sltu, raw),
        0x4033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Xor, raw),
        0x5033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Srl, raw),
        0x40005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sra, raw),
        0x6033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Or, raw),
        0x7033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::And, raw),
        0x101b => return parse_rd_rs1_shamtw(OpcodeRdRs1Shamtw::Slliw, raw),
        0x501b => return parse_rd_rs1_shamtw(OpcodeRdRs1Shamtw::Srliw, raw),
        0x4000501b => return parse_rd_rs1_shamtw(OpcodeRdRs1Shamtw::Sraiw, raw),
        0x3b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Addw, raw),
        0x4000003b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Subw, raw),
        0x103b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sllw, raw),
        0x503b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Srlw, raw),
        0x4000503b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sraw, raw),
        0x2000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Mul, raw),
        0x2001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Mulh, raw),
        0x2002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Mulhsu, raw),
        0x2003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Mulhu, raw),
        0x2004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Div, raw),
        0x2005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Divu, raw),
        0x2006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Rem, raw),
        0x2007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Remu, raw),
        0x200003b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Mulw, raw),
        0x200403b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Divw, raw),
        0x200503b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Divuw, raw),
        0x200603b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Remw, raw),
        0x200703b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Remuw, raw),
        0x40007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Andn, raw),
        0x40006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Orn, raw),
        0x40004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Xnor, raw),
        0x20001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Slo, raw),
        0x20005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sro, raw),
        0x60001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Rol, raw),
        0x60005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Ror, raw),
        0x48001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sbclr, raw),
        0x28001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sbset, raw),
        0x68001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sbinv, raw),
        0x48005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sbext, raw),
        0x28005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Gorc, raw),
        0x68005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Grev, raw),
        0x20002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sh1add, raw),
        0x20004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sh2add, raw),
        0x20006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sh3add, raw),
        0xa001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Clmul, raw),
        0xa002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Clmulr, raw),
        0xa003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Clmulh, raw),
        0xa004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Min, raw),
        0xa005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Max, raw),
        0xa006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Minu, raw),
        0xa007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Maxu, raw),
        0x8001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Shfl, raw),
        0x8005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Unshfl, raw),
        0x8006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Bext, raw),
        0x48006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Bdep, raw),
        0x8004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Pack, raw),
        0x48004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Packu, raw),
        0x8007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Packh, raw),
        0x48007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Bfp, raw),
        0x8001013 => return parse_rd_rs1_shamtw(OpcodeRdRs1Shamtw::Shfli, raw),
        0x8005013 => return parse_rd_rs1_shamtw(OpcodeRdRs1Shamtw::Unshfli, raw),
        0x20000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjS, raw),
        0x20001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjnS, raw),
        0x20002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjxS, raw),
        0x28000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FminS, raw),
        0x28001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FmaxS, raw),
        0x22000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjD, raw),
        0x22001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjnD, raw),
        0x22002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjxD, raw),
        0x2a000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FminD, raw),
        0x2a001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FmaxD, raw),
        0x26000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjQ, raw),
        0x26001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjnQ, raw),
        0x26002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjxQ, raw),
        0x2e000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FminQ, raw),
        0x2e001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FmaxQ, raw),
        0xa0000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FleS, raw),
        0xa0001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FltS, raw),
        0xa0002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FeqS, raw),
        0xa2000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FleD, raw),
        0xa2001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FltD, raw),
        0xa2002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FeqD, raw),
        0xa6000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FleQ, raw),
        0xa6001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FltQ, raw),
        0xa6002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FeqQ, raw),
        _ => (),
    }
    match raw & 0xfe007fff {
        0x12000073 => return parse_rs1_rs2(OpcodeRs1Rs2::SfenceVma, raw),
        0x22000073 => return parse_rs1_rs2(OpcodeRs1Rs2::HfenceBvma, raw),
        0xa2000073 => return parse_rs1_rs2(OpcodeRs1Rs2::HfenceGvma, raw),
        _ => (),
    }
    match raw & 0xfff0007f {
        0x58000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FsqrtS, raw),
        0x40100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSD, raw),
        0x42000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDS, raw),
        0x5a000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FsqrtD, raw),
        0x40300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSQ, raw),
        0x46000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQS, raw),
        0x42300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDQ, raw),
        0x46100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQD, raw),
        0x5e000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FsqrtQ, raw),
        0xc0000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWS, raw),
        0xc0100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWuS, raw),
        0xc0200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLS, raw),
        0xc0300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLuS, raw),
        0xc2000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWD, raw),
        0xc2100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWuD, raw),
        0xc2200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLD, raw),
        0xc2300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLuD, raw),
        0xc6000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWQ, raw),
        0xc6100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWuQ, raw),
        0xc6200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLQ, raw),
        0xc6300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLuQ, raw),
        0xd0000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSW, raw),
        0xd0100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSWu, raw),
        0xd0200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSL, raw),
        0xd0300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSLu, raw),
        0xd2000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDW, raw),
        0xd2100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDWu, raw),
        0xd2200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDL, raw),
        0xd2300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDLu, raw),
        0xd6000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQW, raw),
        0xd6100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQWu, raw),
        0xd6200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQL, raw),
        0xd6300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQLu, raw),
        _ => (),
    }
    match raw & 0xfff0707f {
        0x60001013 => return parse_rd_rs1(OpcodeRdRs1::Clz, raw),
        0x60101013 => return parse_rd_rs1(OpcodeRdRs1::Ctz, raw),
        0x60201013 => return parse_rd_rs1(OpcodeRdRs1::Pcnt, raw),
        0x60401013 => return parse_rd_rs1(OpcodeRdRs1::SextB, raw),
        0x60501013 => return parse_rd_rs1(OpcodeRdRs1::SextH, raw),
        0x61001013 => return parse_rd_rs1(OpcodeRdRs1::Crc32B, raw),
        0x61101013 => return parse_rd_rs1(OpcodeRdRs1::Crc32H, raw),
        0x61201013 => return parse_rd_rs1(OpcodeRdRs1::Crc32W, raw),
        0x61801013 => return parse_rd_rs1(OpcodeRdRs1::Crc32cB, raw),
        0x61901013 => return parse_rd_rs1(OpcodeRdRs1::Crc32cH, raw),
        0x61a01013 => return parse_rd_rs1(OpcodeRdRs1::Crc32cW, raw),
        0xe0000053 => return parse_rd_rs1(OpcodeRdRs1::FmvXW, raw),
        0xe0001053 => return parse_rd_rs1(OpcodeRdRs1::FclassS, raw),
        0xe2000053 => return parse_rd_rs1(OpcodeRdRs1::FmvXD, raw),
        0xe2001053 => return parse_rd_rs1(OpcodeRdRs1::FclassD, raw),
        0xe6000053 => return parse_rd_rs1(OpcodeRdRs1::FmvXQ, raw),
        0xe6001053 => return parse_rd_rs1(OpcodeRdRs1::FclassQ, raw),
        0xf0000053 => return parse_rd_rs1(OpcodeRdRs1::FmvWX, raw),
        0xf2000053 => return parse_rd_rs1(OpcodeRdRs1::FmvDX, raw),
        0xf6000053 => return parse_rd_rs1(OpcodeRdRs1::FmvQX, raw),
        _ => (),
    }
    match raw & 0xffffffff {
        0x73 => return parse_unit(OpcodeUnit::Ecall, raw),
        0x100073 => return parse_unit(OpcodeUnit::Ebreak, raw),
        0x200073 => return parse_unit(OpcodeUnit::Uret, raw),
        0x10200073 => return parse_unit(OpcodeUnit::Sret, raw),
        0x30200073 => return parse_unit(OpcodeUnit::Mret, raw),
        0x7b200073 => return parse_unit(OpcodeUnit::Dret, raw),
        0x10500073 => return parse_unit(OpcodeUnit::Wfi, raw),
        _ => (),
    }
    Format::Illegal(raw)
}

/// Parse the first bytes of a `&[u8]` slice into an instruction.
pub fn parse(mut raw: &[u8]) -> Format {
    use byteorder::{LittleEndian, ReadBytesExt};
    raw.read_u32::<LittleEndian>()
        .map(parse_u32)
        .unwrap_or(Format::Illegal(0))
}

/// Parse an instruction with the `Unit` format.
pub fn parse_unit(op: OpcodeUnit, raw: u32) -> Format {
    Format::Unit(FormatUnit { op, raw })
}

/// Parse an instruction with the `AqrlRdRs1` format.
pub fn parse_aqrl_rd_rs1(op: OpcodeAqrlRdRs1, raw: u32) -> Format {
    Format::AqrlRdRs1(FormatAqrlRdRs1 {
        op,
        raw,
        aqrl: (raw >> 25) & 0x3,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `AqrlRdRs1Rs2` format.
pub fn parse_aqrl_rd_rs1_rs2(op: OpcodeAqrlRdRs1Rs2, raw: u32) -> Format {
    Format::AqrlRdRs1Rs2(FormatAqrlRdRs1Rs2 {
        op,
        raw,
        aqrl: (raw >> 25) & 0x3,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `Bimm12hiBimm12loRs1Rs2` format.
pub fn parse_bimm12hi_bimm12lo_rs1_rs2(op: OpcodeBimm12hiBimm12loRs1Rs2, raw: u32) -> Format {
    Format::Bimm12hiBimm12loRs1Rs2(FormatBimm12hiBimm12loRs1Rs2 {
        op,
        raw,
        bimm12hi: (raw >> 25) & 0x7f,
        bimm12lo: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `FmPredRdRs1Succ` format.
pub fn parse_fm_pred_rd_rs1_succ(op: OpcodeFmPredRdRs1Succ, raw: u32) -> Format {
    Format::FmPredRdRs1Succ(FormatFmPredRdRs1Succ {
        op,
        raw,
        fm: (raw >> 28) & 0xf,
        pred: (raw >> 24) & 0xf,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        succ: (raw >> 20) & 0xf,
    })
}

/// Parse an instruction with the `Imm12RdRs1` format.
pub fn parse_imm12_rd_rs1(op: OpcodeImm12RdRs1, raw: u32) -> Format {
    Format::Imm12RdRs1(FormatImm12RdRs1 {
        op,
        raw,
        imm12: (raw >> 20) & 0xfff,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `Imm12hiImm12loRs1Rs2` format.
pub fn parse_imm12hi_imm12lo_rs1_rs2(op: OpcodeImm12hiImm12loRs1Rs2, raw: u32) -> Format {
    Format::Imm12hiImm12loRs1Rs2(FormatImm12hiImm12loRs1Rs2 {
        op,
        raw,
        imm12hi: (raw >> 25) & 0x7f,
        imm12lo: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `Imm20Rd` format.
pub fn parse_imm20_rd(op: OpcodeImm20Rd, raw: u32) -> Format {
    Format::Imm20Rd(FormatImm20Rd {
        op,
        raw,
        imm20: (raw >> 12) & 0xfffff,
        rd: (raw >> 7) & 0x1f,
    })
}

/// Parse an instruction with the `Jimm20Rd` format.
pub fn parse_jimm20_rd(op: OpcodeJimm20Rd, raw: u32) -> Format {
    Format::Jimm20Rd(FormatJimm20Rd {
        op,
        raw,
        jimm20: (raw >> 12) & 0xfffff,
        rd: (raw >> 7) & 0x1f,
    })
}

/// Parse an instruction with the `RdRmRs1` format.
pub fn parse_rd_rm_rs1(op: OpcodeRdRmRs1, raw: u32) -> Format {
    Format::RdRmRs1(FormatRdRmRs1 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rm: (raw >> 12) & 0x7,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `RdRmRs1Rs2` format.
pub fn parse_rd_rm_rs1_rs2(op: OpcodeRdRmRs1Rs2, raw: u32) -> Format {
    Format::RdRmRs1Rs2(FormatRdRmRs1Rs2 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rm: (raw >> 12) & 0x7,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `RdRmRs1Rs2Rs3` format.
pub fn parse_rd_rm_rs1_rs2_rs3(op: OpcodeRdRmRs1Rs2Rs3, raw: u32) -> Format {
    Format::RdRmRs1Rs2Rs3(FormatRdRmRs1Rs2Rs3 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rm: (raw >> 12) & 0x7,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
        rs3: (raw >> 27) & 0x1f,
    })
}

/// Parse an instruction with the `RdRs1` format.
pub fn parse_rd_rs1(op: OpcodeRdRs1, raw: u32) -> Format {
    Format::RdRs1(FormatRdRs1 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `RdRs1Rs2` format.
pub fn parse_rd_rs1_rs2(op: OpcodeRdRs1Rs2, raw: u32) -> Format {
    Format::RdRs1Rs2(FormatRdRs1Rs2 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `RdRs1Rs2Rs3` format.
pub fn parse_rd_rs1_rs2_rs3(op: OpcodeRdRs1Rs2Rs3, raw: u32) -> Format {
    Format::RdRs1Rs2Rs3(FormatRdRs1Rs2Rs3 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
        rs3: (raw >> 27) & 0x1f,
    })
}

/// Parse an instruction with the `RdRs1Rs3Shamt` format.
pub fn parse_rd_rs1_rs3_shamt(op: OpcodeRdRs1Rs3Shamt, raw: u32) -> Format {
    Format::RdRs1Rs3Shamt(FormatRdRs1Rs3Shamt {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        rs3: (raw >> 27) & 0x1f,
        shamt: (raw >> 20) & 0x3f,
    })
}

/// Parse an instruction with the `RdRs1Shamt` format.
pub fn parse_rd_rs1_shamt(op: OpcodeRdRs1Shamt, raw: u32) -> Format {
    Format::RdRs1Shamt(FormatRdRs1Shamt {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        shamt: (raw >> 20) & 0x3f,
    })
}

/// Parse an instruction with the `RdRs1Shamtw` format.
pub fn parse_rd_rs1_shamtw(op: OpcodeRdRs1Shamtw, raw: u32) -> Format {
    Format::RdRs1Shamtw(FormatRdRs1Shamtw {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        shamtw: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `Rs1Rs2` format.
pub fn parse_rs1_rs2(op: OpcodeRs1Rs2, raw: u32) -> Format {
    Format::Rs1Rs2(FormatRs1Rs2 {
        op,
        raw,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

use std::fmt;
#[derive(Debug)]
pub enum Opcode {
    Beq,
    Bne,
    Blt,
    Bge,
    Bltu,
    Bgeu,
    Jalr,
    Jal,
    Lui,
    Auipc,
    Addi,
    Slli,
    Slti,
    Sltiu,
    Xori,
    Srli,
    Srai,
    Ori,
    Andi,
    Add,
    Sub,
    Sll,
    Slt,
    Sltu,
    Xor,
    Srl,
    Sra,
    Or,
    And,
    Addiw,
    Slliw,
    Srliw,
    Sraiw,
    Addw,
    Subw,
    Sllw,
    Srlw,
    Sraw,
    Lb,
    Lh,
    Lw,
    Ld,
    Lbu,
    Lhu,
    Lwu,
    Sb,
    Sh,
    Sw,
    Sd,
    Fence,
    FenceI,
    Mul,
    Mulh,
    Mulhsu,
    Mulhu,
    Div,
    Divu,
    Rem,
    Remu,
    Mulw,
    Divw,
    Divuw,
    Remw,
    Remuw,
    Andn,
    Orn,
    Xnor,
    Slo,
    Sro,
    Rol,
    Ror,
    Sbclr,
    Sbset,
    Sbinv,
    Sbext,
    Gorc,
    Grev,
    Sloi,
    Sroi,
    Rori,
    Sbclri,
    Sbseti,
    Sbinvi,
    Sbexti,
    Gorci,
    Grevi,
    Cmix,
    Cmov,
    Fsl,
    Fsr,
    Fsri,
    Clz,
    Ctz,
    Pcnt,
    SextB,
    SextH,
    Crc32B,
    Crc32H,
    Crc32W,
    Crc32cB,
    Crc32cH,
    Crc32cW,
    Sh1add,
    Sh2add,
    Sh3add,
    Clmul,
    Clmulr,
    Clmulh,
    Min,
    Max,
    Minu,
    Maxu,
    Shfl,
    Unshfl,
    Bext,
    Bdep,
    Pack,
    Packu,
    Packh,
    Bfp,
    Shfli,
    Unshfli,
    AmoaddW,
    AmoxorW,
    AmoorW,
    AmoandW,
    AmominW,
    AmomaxW,
    AmominuW,
    AmomaxuW,
    AmoswapW,
    LrW,
    ScW,
    AmoaddD,
    AmoxorD,
    AmoorD,
    AmoandD,
    AmominD,
    AmomaxD,
    AmominuD,
    AmomaxuD,
    AmoswapD,
    LrD,
    ScD,
    Ecall,
    Ebreak,
    Uret,
    Sret,
    Mret,
    Dret,
    SfenceVma,
    Wfi,
    Csrrw,
    Csrrs,
    Csrrc,
    Csrrwi,
    Csrrsi,
    Csrrci,
    HfenceBvma,
    HfenceGvma,
    FaddS,
    FsubS,
    FmulS,
    FdivS,
    FsgnjS,
    FsgnjnS,
    FsgnjxS,
    FminS,
    FmaxS,
    FsqrtS,
    FaddD,
    FsubD,
    FmulD,
    FdivD,
    FsgnjD,
    FsgnjnD,
    FsgnjxD,
    FminD,
    FmaxD,
    FcvtSD,
    FcvtDS,
    FsqrtD,
    FaddQ,
    FsubQ,
    FmulQ,
    FdivQ,
    FsgnjQ,
    FsgnjnQ,
    FsgnjxQ,
    FminQ,
    FmaxQ,
    FcvtSQ,
    FcvtQS,
    FcvtDQ,
    FcvtQD,
    FsqrtQ,
    FleS,
    FltS,
    FeqS,
    FleD,
    FltD,
    FeqD,
    FleQ,
    FltQ,
    FeqQ,
    FcvtWS,
    FcvtWuS,
    FcvtLS,
    FcvtLuS,
    FmvXW,
    FclassS,
    FcvtWD,
    FcvtWuD,
    FcvtLD,
    FcvtLuD,
    FmvXD,
    FclassD,
    FcvtWQ,
    FcvtWuQ,
    FcvtLQ,
    FcvtLuQ,
    FmvXQ,
    FclassQ,
    FcvtSW,
    FcvtSWu,
    FcvtSL,
    FcvtSLu,
    FmvWX,
    FcvtDW,
    FcvtDWu,
    FcvtDL,
    FcvtDLu,
    FmvDX,
    FcvtQW,
    FcvtQWu,
    FcvtQL,
    FcvtQLu,
    FmvQX,
    Flw,
    Fld,
    Flq,
    Fsw,
    Fsd,
    Fsq,
    FmaddS,
    FmsubS,
    FnmsubS,
    FnmaddS,
    FmaddD,
    FmsubD,
    FnmsubD,
    FnmaddD,
    FmaddQ,
    FmsubQ,
    FnmsubQ,
    FnmaddQ,
    SlliRv32,
    SrliRv32,
    SraiRv32,
    Frflags,
    Fsflags,
    Fsflagsi,
    Frrm,
    Fsrm,
    Fsrmi,
    Fscsr,
    Frcsr,
    Rdcycle,
    Rdtime,
    Rdinstret,
    Rdcycleh,
    Rdtimeh,
    Rdinstreth,
    Scall,
    Sbreak,
    FmvXS,
    FmvSX,
    FenceTso,
}

pub struct OpcodeDesc {
    pub instr_match: u32,
    pub instr_mask: u32,
}

impl Opcode {
    pub fn value(&self) -> OpcodeDesc {
        match *self {
            Opcode::Beq => OpcodeDesc {
                instr_match: 0x63,
                instr_mask: 0x707f,
            },

            Opcode::Bne => OpcodeDesc {
                instr_match: 0x1063,
                instr_mask: 0x707f,
            },

            Opcode::Blt => OpcodeDesc {
                instr_match: 0x4063,
                instr_mask: 0x707f,
            },

            Opcode::Bge => OpcodeDesc {
                instr_match: 0x5063,
                instr_mask: 0x707f,
            },

            Opcode::Bltu => OpcodeDesc {
                instr_match: 0x6063,
                instr_mask: 0x707f,
            },

            Opcode::Bgeu => OpcodeDesc {
                instr_match: 0x7063,
                instr_mask: 0x707f,
            },

            Opcode::Jalr => OpcodeDesc {
                instr_match: 0x67,
                instr_mask: 0x707f,
            },

            Opcode::Jal => OpcodeDesc {
                instr_match: 0x6f,
                instr_mask: 0x7f,
            },

            Opcode::Lui => OpcodeDesc {
                instr_match: 0x37,
                instr_mask: 0x7f,
            },

            Opcode::Auipc => OpcodeDesc {
                instr_match: 0x17,
                instr_mask: 0x7f,
            },

            Opcode::Addi => OpcodeDesc {
                instr_match: 0x13,
                instr_mask: 0x707f,
            },

            Opcode::Slli => OpcodeDesc {
                instr_match: 0x1013,
                instr_mask: 0xfc00707f,
            },

            Opcode::Slti => OpcodeDesc {
                instr_match: 0x2013,
                instr_mask: 0x707f,
            },

            Opcode::Sltiu => OpcodeDesc {
                instr_match: 0x3013,
                instr_mask: 0x707f,
            },

            Opcode::Xori => OpcodeDesc {
                instr_match: 0x4013,
                instr_mask: 0x707f,
            },

            Opcode::Srli => OpcodeDesc {
                instr_match: 0x5013,
                instr_mask: 0xfc00707f,
            },

            Opcode::Srai => OpcodeDesc {
                instr_match: 0x40005013,
                instr_mask: 0xfc00707f,
            },

            Opcode::Ori => OpcodeDesc {
                instr_match: 0x6013,
                instr_mask: 0x707f,
            },

            Opcode::Andi => OpcodeDesc {
                instr_match: 0x7013,
                instr_mask: 0x707f,
            },

            Opcode::Add => OpcodeDesc {
                instr_match: 0x33,
                instr_mask: 0xfe00707f,
            },

            Opcode::Sub => OpcodeDesc {
                instr_match: 0x40000033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Sll => OpcodeDesc {
                instr_match: 0x1033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Slt => OpcodeDesc {
                instr_match: 0x2033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Sltu => OpcodeDesc {
                instr_match: 0x3033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Xor => OpcodeDesc {
                instr_match: 0x4033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Srl => OpcodeDesc {
                instr_match: 0x5033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Sra => OpcodeDesc {
                instr_match: 0x40005033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Or => OpcodeDesc {
                instr_match: 0x6033,
                instr_mask: 0xfe00707f,
            },

            Opcode::And => OpcodeDesc {
                instr_match: 0x7033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Addiw => OpcodeDesc {
                instr_match: 0x1b,
                instr_mask: 0x707f,
            },

            Opcode::Slliw => OpcodeDesc {
                instr_match: 0x101b,
                instr_mask: 0xfe00707f,
            },

            Opcode::Srliw => OpcodeDesc {
                instr_match: 0x501b,
                instr_mask: 0xfe00707f,
            },

            Opcode::Sraiw => OpcodeDesc {
                instr_match: 0x4000501b,
                instr_mask: 0xfe00707f,
            },

            Opcode::Addw => OpcodeDesc {
                instr_match: 0x3b,
                instr_mask: 0xfe00707f,
            },

            Opcode::Subw => OpcodeDesc {
                instr_match: 0x4000003b,
                instr_mask: 0xfe00707f,
            },

            Opcode::Sllw => OpcodeDesc {
                instr_match: 0x103b,
                instr_mask: 0xfe00707f,
            },

            Opcode::Srlw => OpcodeDesc {
                instr_match: 0x503b,
                instr_mask: 0xfe00707f,
            },

            Opcode::Sraw => OpcodeDesc {
                instr_match: 0x4000503b,
                instr_mask: 0xfe00707f,
            },

            Opcode::Lb => OpcodeDesc {
                instr_match: 0x3,
                instr_mask: 0x707f,
            },

            Opcode::Lh => OpcodeDesc {
                instr_match: 0x1003,
                instr_mask: 0x707f,
            },

            Opcode::Lw => OpcodeDesc {
                instr_match: 0x2003,
                instr_mask: 0x707f,
            },

            Opcode::Ld => OpcodeDesc {
                instr_match: 0x3003,
                instr_mask: 0x707f,
            },

            Opcode::Lbu => OpcodeDesc {
                instr_match: 0x4003,
                instr_mask: 0x707f,
            },

            Opcode::Lhu => OpcodeDesc {
                instr_match: 0x5003,
                instr_mask: 0x707f,
            },

            Opcode::Lwu => OpcodeDesc {
                instr_match: 0x6003,
                instr_mask: 0x707f,
            },

            Opcode::Sb => OpcodeDesc {
                instr_match: 0x23,
                instr_mask: 0x707f,
            },

            Opcode::Sh => OpcodeDesc {
                instr_match: 0x1023,
                instr_mask: 0x707f,
            },

            Opcode::Sw => OpcodeDesc {
                instr_match: 0x2023,
                instr_mask: 0x707f,
            },

            Opcode::Sd => OpcodeDesc {
                instr_match: 0x3023,
                instr_mask: 0x707f,
            },

            Opcode::Fence => OpcodeDesc {
                instr_match: 0xf,
                instr_mask: 0x707f,
            },

            Opcode::FenceI => OpcodeDesc {
                instr_match: 0x100f,
                instr_mask: 0x707f,
            },

            Opcode::Mul => OpcodeDesc {
                instr_match: 0x2000033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Mulh => OpcodeDesc {
                instr_match: 0x2001033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Mulhsu => OpcodeDesc {
                instr_match: 0x2002033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Mulhu => OpcodeDesc {
                instr_match: 0x2003033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Div => OpcodeDesc {
                instr_match: 0x2004033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Divu => OpcodeDesc {
                instr_match: 0x2005033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Rem => OpcodeDesc {
                instr_match: 0x2006033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Remu => OpcodeDesc {
                instr_match: 0x2007033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Mulw => OpcodeDesc {
                instr_match: 0x200003b,
                instr_mask: 0xfe00707f,
            },

            Opcode::Divw => OpcodeDesc {
                instr_match: 0x200403b,
                instr_mask: 0xfe00707f,
            },

            Opcode::Divuw => OpcodeDesc {
                instr_match: 0x200503b,
                instr_mask: 0xfe00707f,
            },

            Opcode::Remw => OpcodeDesc {
                instr_match: 0x200603b,
                instr_mask: 0xfe00707f,
            },

            Opcode::Remuw => OpcodeDesc {
                instr_match: 0x200703b,
                instr_mask: 0xfe00707f,
            },

            Opcode::Andn => OpcodeDesc {
                instr_match: 0x40007033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Orn => OpcodeDesc {
                instr_match: 0x40006033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Xnor => OpcodeDesc {
                instr_match: 0x40004033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Slo => OpcodeDesc {
                instr_match: 0x20001033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Sro => OpcodeDesc {
                instr_match: 0x20005033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Rol => OpcodeDesc {
                instr_match: 0x60001033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Ror => OpcodeDesc {
                instr_match: 0x60005033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Sbclr => OpcodeDesc {
                instr_match: 0x48001033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Sbset => OpcodeDesc {
                instr_match: 0x28001033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Sbinv => OpcodeDesc {
                instr_match: 0x68001033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Sbext => OpcodeDesc {
                instr_match: 0x48005033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Gorc => OpcodeDesc {
                instr_match: 0x28005033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Grev => OpcodeDesc {
                instr_match: 0x68005033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Sloi => OpcodeDesc {
                instr_match: 0x20001013,
                instr_mask: 0xfc00707f,
            },

            Opcode::Sroi => OpcodeDesc {
                instr_match: 0x20005013,
                instr_mask: 0xfc00707f,
            },

            Opcode::Rori => OpcodeDesc {
                instr_match: 0x60005013,
                instr_mask: 0xfc00707f,
            },

            Opcode::Sbclri => OpcodeDesc {
                instr_match: 0x48001013,
                instr_mask: 0xfc00707f,
            },

            Opcode::Sbseti => OpcodeDesc {
                instr_match: 0x28001013,
                instr_mask: 0xfc00707f,
            },

            Opcode::Sbinvi => OpcodeDesc {
                instr_match: 0x68001013,
                instr_mask: 0xfc00707f,
            },

            Opcode::Sbexti => OpcodeDesc {
                instr_match: 0x48005013,
                instr_mask: 0xfc00707f,
            },

            Opcode::Gorci => OpcodeDesc {
                instr_match: 0x28005013,
                instr_mask: 0xfc00707f,
            },

            Opcode::Grevi => OpcodeDesc {
                instr_match: 0x68005013,
                instr_mask: 0xfc00707f,
            },

            Opcode::Cmix => OpcodeDesc {
                instr_match: 0x6001033,
                instr_mask: 0x600707f,
            },

            Opcode::Cmov => OpcodeDesc {
                instr_match: 0x6005033,
                instr_mask: 0x600707f,
            },

            Opcode::Fsl => OpcodeDesc {
                instr_match: 0x4001033,
                instr_mask: 0x600707f,
            },

            Opcode::Fsr => OpcodeDesc {
                instr_match: 0x4005033,
                instr_mask: 0x600707f,
            },

            Opcode::Fsri => OpcodeDesc {
                instr_match: 0x4005013,
                instr_mask: 0x400707f,
            },

            Opcode::Clz => OpcodeDesc {
                instr_match: 0x60001013,
                instr_mask: 0xfff0707f,
            },

            Opcode::Ctz => OpcodeDesc {
                instr_match: 0x60101013,
                instr_mask: 0xfff0707f,
            },

            Opcode::Pcnt => OpcodeDesc {
                instr_match: 0x60201013,
                instr_mask: 0xfff0707f,
            },

            Opcode::SextB => OpcodeDesc {
                instr_match: 0x60401013,
                instr_mask: 0xfff0707f,
            },

            Opcode::SextH => OpcodeDesc {
                instr_match: 0x60501013,
                instr_mask: 0xfff0707f,
            },

            Opcode::Crc32B => OpcodeDesc {
                instr_match: 0x61001013,
                instr_mask: 0xfff0707f,
            },

            Opcode::Crc32H => OpcodeDesc {
                instr_match: 0x61101013,
                instr_mask: 0xfff0707f,
            },

            Opcode::Crc32W => OpcodeDesc {
                instr_match: 0x61201013,
                instr_mask: 0xfff0707f,
            },

            Opcode::Crc32cB => OpcodeDesc {
                instr_match: 0x61801013,
                instr_mask: 0xfff0707f,
            },

            Opcode::Crc32cH => OpcodeDesc {
                instr_match: 0x61901013,
                instr_mask: 0xfff0707f,
            },

            Opcode::Crc32cW => OpcodeDesc {
                instr_match: 0x61a01013,
                instr_mask: 0xfff0707f,
            },

            Opcode::Sh1add => OpcodeDesc {
                instr_match: 0x20002033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Sh2add => OpcodeDesc {
                instr_match: 0x20004033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Sh3add => OpcodeDesc {
                instr_match: 0x20006033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Clmul => OpcodeDesc {
                instr_match: 0xa001033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Clmulr => OpcodeDesc {
                instr_match: 0xa002033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Clmulh => OpcodeDesc {
                instr_match: 0xa003033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Min => OpcodeDesc {
                instr_match: 0xa004033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Max => OpcodeDesc {
                instr_match: 0xa005033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Minu => OpcodeDesc {
                instr_match: 0xa006033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Maxu => OpcodeDesc {
                instr_match: 0xa007033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Shfl => OpcodeDesc {
                instr_match: 0x8001033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Unshfl => OpcodeDesc {
                instr_match: 0x8005033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Bext => OpcodeDesc {
                instr_match: 0x8006033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Bdep => OpcodeDesc {
                instr_match: 0x48006033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Pack => OpcodeDesc {
                instr_match: 0x8004033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Packu => OpcodeDesc {
                instr_match: 0x48004033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Packh => OpcodeDesc {
                instr_match: 0x8007033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Bfp => OpcodeDesc {
                instr_match: 0x48007033,
                instr_mask: 0xfe00707f,
            },

            Opcode::Shfli => OpcodeDesc {
                instr_match: 0x8001013,
                instr_mask: 0xfe00707f,
            },

            Opcode::Unshfli => OpcodeDesc {
                instr_match: 0x8005013,
                instr_mask: 0xfe00707f,
            },

            Opcode::AmoaddW => OpcodeDesc {
                instr_match: 0x202f,
                instr_mask: 0xf800707f,
            },

            Opcode::AmoxorW => OpcodeDesc {
                instr_match: 0x2000202f,
                instr_mask: 0xf800707f,
            },

            Opcode::AmoorW => OpcodeDesc {
                instr_match: 0x4000202f,
                instr_mask: 0xf800707f,
            },

            Opcode::AmoandW => OpcodeDesc {
                instr_match: 0x6000202f,
                instr_mask: 0xf800707f,
            },

            Opcode::AmominW => OpcodeDesc {
                instr_match: 0x8000202f,
                instr_mask: 0xf800707f,
            },

            Opcode::AmomaxW => OpcodeDesc {
                instr_match: 0xa000202f,
                instr_mask: 0xf800707f,
            },

            Opcode::AmominuW => OpcodeDesc {
                instr_match: 0xc000202f,
                instr_mask: 0xf800707f,
            },

            Opcode::AmomaxuW => OpcodeDesc {
                instr_match: 0xe000202f,
                instr_mask: 0xf800707f,
            },

            Opcode::AmoswapW => OpcodeDesc {
                instr_match: 0x800202f,
                instr_mask: 0xf800707f,
            },

            Opcode::LrW => OpcodeDesc {
                instr_match: 0x1000202f,
                instr_mask: 0xf9f0707f,
            },

            Opcode::ScW => OpcodeDesc {
                instr_match: 0x1800202f,
                instr_mask: 0xf800707f,
            },

            Opcode::AmoaddD => OpcodeDesc {
                instr_match: 0x302f,
                instr_mask: 0xf800707f,
            },

            Opcode::AmoxorD => OpcodeDesc {
                instr_match: 0x2000302f,
                instr_mask: 0xf800707f,
            },

            Opcode::AmoorD => OpcodeDesc {
                instr_match: 0x4000302f,
                instr_mask: 0xf800707f,
            },

            Opcode::AmoandD => OpcodeDesc {
                instr_match: 0x6000302f,
                instr_mask: 0xf800707f,
            },

            Opcode::AmominD => OpcodeDesc {
                instr_match: 0x8000302f,
                instr_mask: 0xf800707f,
            },

            Opcode::AmomaxD => OpcodeDesc {
                instr_match: 0xa000302f,
                instr_mask: 0xf800707f,
            },

            Opcode::AmominuD => OpcodeDesc {
                instr_match: 0xc000302f,
                instr_mask: 0xf800707f,
            },

            Opcode::AmomaxuD => OpcodeDesc {
                instr_match: 0xe000302f,
                instr_mask: 0xf800707f,
            },

            Opcode::AmoswapD => OpcodeDesc {
                instr_match: 0x800302f,
                instr_mask: 0xf800707f,
            },

            Opcode::LrD => OpcodeDesc {
                instr_match: 0x1000302f,
                instr_mask: 0xf9f0707f,
            },

            Opcode::ScD => OpcodeDesc {
                instr_match: 0x1800302f,
                instr_mask: 0xf800707f,
            },

            Opcode::Ecall => OpcodeDesc {
                instr_match: 0x73,
                instr_mask: 0xffffffff,
            },

            Opcode::Ebreak => OpcodeDesc {
                instr_match: 0x100073,
                instr_mask: 0xffffffff,
            },

            Opcode::Uret => OpcodeDesc {
                instr_match: 0x200073,
                instr_mask: 0xffffffff,
            },

            Opcode::Sret => OpcodeDesc {
                instr_match: 0x10200073,
                instr_mask: 0xffffffff,
            },

            Opcode::Mret => OpcodeDesc {
                instr_match: 0x30200073,
                instr_mask: 0xffffffff,
            },

            Opcode::Dret => OpcodeDesc {
                instr_match: 0x7b200073,
                instr_mask: 0xffffffff,
            },

            Opcode::SfenceVma => OpcodeDesc {
                instr_match: 0x12000073,
                instr_mask: 0xfe007fff,
            },

            Opcode::Wfi => OpcodeDesc {
                instr_match: 0x10500073,
                instr_mask: 0xffffffff,
            },

            Opcode::Csrrw => OpcodeDesc {
                instr_match: 0x1073,
                instr_mask: 0x707f,
            },

            Opcode::Csrrs => OpcodeDesc {
                instr_match: 0x2073,
                instr_mask: 0x707f,
            },

            Opcode::Csrrc => OpcodeDesc {
                instr_match: 0x3073,
                instr_mask: 0x707f,
            },

            Opcode::Csrrwi => OpcodeDesc {
                instr_match: 0x5073,
                instr_mask: 0x707f,
            },

            Opcode::Csrrsi => OpcodeDesc {
                instr_match: 0x6073,
                instr_mask: 0x707f,
            },

            Opcode::Csrrci => OpcodeDesc {
                instr_match: 0x7073,
                instr_mask: 0x707f,
            },

            Opcode::HfenceBvma => OpcodeDesc {
                instr_match: 0x22000073,
                instr_mask: 0xfe007fff,
            },

            Opcode::HfenceGvma => OpcodeDesc {
                instr_match: 0xa2000073,
                instr_mask: 0xfe007fff,
            },

            Opcode::FaddS => OpcodeDesc {
                instr_match: 0x53,
                instr_mask: 0xfe00007f,
            },

            Opcode::FsubS => OpcodeDesc {
                instr_match: 0x8000053,
                instr_mask: 0xfe00007f,
            },

            Opcode::FmulS => OpcodeDesc {
                instr_match: 0x10000053,
                instr_mask: 0xfe00007f,
            },

            Opcode::FdivS => OpcodeDesc {
                instr_match: 0x18000053,
                instr_mask: 0xfe00007f,
            },

            Opcode::FsgnjS => OpcodeDesc {
                instr_match: 0x20000053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FsgnjnS => OpcodeDesc {
                instr_match: 0x20001053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FsgnjxS => OpcodeDesc {
                instr_match: 0x20002053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FminS => OpcodeDesc {
                instr_match: 0x28000053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FmaxS => OpcodeDesc {
                instr_match: 0x28001053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FsqrtS => OpcodeDesc {
                instr_match: 0x58000053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FaddD => OpcodeDesc {
                instr_match: 0x2000053,
                instr_mask: 0xfe00007f,
            },

            Opcode::FsubD => OpcodeDesc {
                instr_match: 0xa000053,
                instr_mask: 0xfe00007f,
            },

            Opcode::FmulD => OpcodeDesc {
                instr_match: 0x12000053,
                instr_mask: 0xfe00007f,
            },

            Opcode::FdivD => OpcodeDesc {
                instr_match: 0x1a000053,
                instr_mask: 0xfe00007f,
            },

            Opcode::FsgnjD => OpcodeDesc {
                instr_match: 0x22000053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FsgnjnD => OpcodeDesc {
                instr_match: 0x22001053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FsgnjxD => OpcodeDesc {
                instr_match: 0x22002053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FminD => OpcodeDesc {
                instr_match: 0x2a000053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FmaxD => OpcodeDesc {
                instr_match: 0x2a001053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FcvtSD => OpcodeDesc {
                instr_match: 0x40100053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtDS => OpcodeDesc {
                instr_match: 0x42000053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FsqrtD => OpcodeDesc {
                instr_match: 0x5a000053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FaddQ => OpcodeDesc {
                instr_match: 0x6000053,
                instr_mask: 0xfe00007f,
            },

            Opcode::FsubQ => OpcodeDesc {
                instr_match: 0xe000053,
                instr_mask: 0xfe00007f,
            },

            Opcode::FmulQ => OpcodeDesc {
                instr_match: 0x16000053,
                instr_mask: 0xfe00007f,
            },

            Opcode::FdivQ => OpcodeDesc {
                instr_match: 0x1e000053,
                instr_mask: 0xfe00007f,
            },

            Opcode::FsgnjQ => OpcodeDesc {
                instr_match: 0x26000053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FsgnjnQ => OpcodeDesc {
                instr_match: 0x26001053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FsgnjxQ => OpcodeDesc {
                instr_match: 0x26002053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FminQ => OpcodeDesc {
                instr_match: 0x2e000053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FmaxQ => OpcodeDesc {
                instr_match: 0x2e001053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FcvtSQ => OpcodeDesc {
                instr_match: 0x40300053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtQS => OpcodeDesc {
                instr_match: 0x46000053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtDQ => OpcodeDesc {
                instr_match: 0x42300053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtQD => OpcodeDesc {
                instr_match: 0x46100053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FsqrtQ => OpcodeDesc {
                instr_match: 0x5e000053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FleS => OpcodeDesc {
                instr_match: 0xa0000053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FltS => OpcodeDesc {
                instr_match: 0xa0001053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FeqS => OpcodeDesc {
                instr_match: 0xa0002053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FleD => OpcodeDesc {
                instr_match: 0xa2000053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FltD => OpcodeDesc {
                instr_match: 0xa2001053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FeqD => OpcodeDesc {
                instr_match: 0xa2002053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FleQ => OpcodeDesc {
                instr_match: 0xa6000053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FltQ => OpcodeDesc {
                instr_match: 0xa6001053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FeqQ => OpcodeDesc {
                instr_match: 0xa6002053,
                instr_mask: 0xfe00707f,
            },

            Opcode::FcvtWS => OpcodeDesc {
                instr_match: 0xc0000053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtWuS => OpcodeDesc {
                instr_match: 0xc0100053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtLS => OpcodeDesc {
                instr_match: 0xc0200053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtLuS => OpcodeDesc {
                instr_match: 0xc0300053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FmvXW => OpcodeDesc {
                instr_match: 0xe0000053,
                instr_mask: 0xfff0707f,
            },

            Opcode::FclassS => OpcodeDesc {
                instr_match: 0xe0001053,
                instr_mask: 0xfff0707f,
            },

            Opcode::FcvtWD => OpcodeDesc {
                instr_match: 0xc2000053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtWuD => OpcodeDesc {
                instr_match: 0xc2100053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtLD => OpcodeDesc {
                instr_match: 0xc2200053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtLuD => OpcodeDesc {
                instr_match: 0xc2300053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FmvXD => OpcodeDesc {
                instr_match: 0xe2000053,
                instr_mask: 0xfff0707f,
            },

            Opcode::FclassD => OpcodeDesc {
                instr_match: 0xe2001053,
                instr_mask: 0xfff0707f,
            },

            Opcode::FcvtWQ => OpcodeDesc {
                instr_match: 0xc6000053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtWuQ => OpcodeDesc {
                instr_match: 0xc6100053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtLQ => OpcodeDesc {
                instr_match: 0xc6200053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtLuQ => OpcodeDesc {
                instr_match: 0xc6300053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FmvXQ => OpcodeDesc {
                instr_match: 0xe6000053,
                instr_mask: 0xfff0707f,
            },

            Opcode::FclassQ => OpcodeDesc {
                instr_match: 0xe6001053,
                instr_mask: 0xfff0707f,
            },

            Opcode::FcvtSW => OpcodeDesc {
                instr_match: 0xd0000053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtSWu => OpcodeDesc {
                instr_match: 0xd0100053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtSL => OpcodeDesc {
                instr_match: 0xd0200053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtSLu => OpcodeDesc {
                instr_match: 0xd0300053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FmvWX => OpcodeDesc {
                instr_match: 0xf0000053,
                instr_mask: 0xfff0707f,
            },

            Opcode::FcvtDW => OpcodeDesc {
                instr_match: 0xd2000053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtDWu => OpcodeDesc {
                instr_match: 0xd2100053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtDL => OpcodeDesc {
                instr_match: 0xd2200053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtDLu => OpcodeDesc {
                instr_match: 0xd2300053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FmvDX => OpcodeDesc {
                instr_match: 0xf2000053,
                instr_mask: 0xfff0707f,
            },

            Opcode::FcvtQW => OpcodeDesc {
                instr_match: 0xd6000053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtQWu => OpcodeDesc {
                instr_match: 0xd6100053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtQL => OpcodeDesc {
                instr_match: 0xd6200053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FcvtQLu => OpcodeDesc {
                instr_match: 0xd6300053,
                instr_mask: 0xfff0007f,
            },

            Opcode::FmvQX => OpcodeDesc {
                instr_match: 0xf6000053,
                instr_mask: 0xfff0707f,
            },

            Opcode::Flw => OpcodeDesc {
                instr_match: 0x2007,
                instr_mask: 0x707f,
            },

            Opcode::Fld => OpcodeDesc {
                instr_match: 0x3007,
                instr_mask: 0x707f,
            },

            Opcode::Flq => OpcodeDesc {
                instr_match: 0x4007,
                instr_mask: 0x707f,
            },

            Opcode::Fsw => OpcodeDesc {
                instr_match: 0x2027,
                instr_mask: 0x707f,
            },

            Opcode::Fsd => OpcodeDesc {
                instr_match: 0x3027,
                instr_mask: 0x707f,
            },

            Opcode::Fsq => OpcodeDesc {
                instr_match: 0x4027,
                instr_mask: 0x707f,
            },

            Opcode::FmaddS => OpcodeDesc {
                instr_match: 0x43,
                instr_mask: 0x600007f,
            },

            Opcode::FmsubS => OpcodeDesc {
                instr_match: 0x47,
                instr_mask: 0x600007f,
            },

            Opcode::FnmsubS => OpcodeDesc {
                instr_match: 0x4b,
                instr_mask: 0x600007f,
            },

            Opcode::FnmaddS => OpcodeDesc {
                instr_match: 0x4f,
                instr_mask: 0x600007f,
            },

            Opcode::FmaddD => OpcodeDesc {
                instr_match: 0x2000043,
                instr_mask: 0x600007f,
            },

            Opcode::FmsubD => OpcodeDesc {
                instr_match: 0x2000047,
                instr_mask: 0x600007f,
            },

            Opcode::FnmsubD => OpcodeDesc {
                instr_match: 0x200004b,
                instr_mask: 0x600007f,
            },

            Opcode::FnmaddD => OpcodeDesc {
                instr_match: 0x200004f,
                instr_mask: 0x600007f,
            },

            Opcode::FmaddQ => OpcodeDesc {
                instr_match: 0x6000043,
                instr_mask: 0x600007f,
            },

            Opcode::FmsubQ => OpcodeDesc {
                instr_match: 0x6000047,
                instr_mask: 0x600007f,
            },

            Opcode::FnmsubQ => OpcodeDesc {
                instr_match: 0x600004b,
                instr_mask: 0x600007f,
            },

            Opcode::FnmaddQ => OpcodeDesc {
                instr_match: 0x600004f,
                instr_mask: 0x600007f,
            },

            Opcode::SlliRv32 => OpcodeDesc {
                instr_match: 0x1013,
                instr_mask: 0xfe00707f,
            },

            Opcode::SrliRv32 => OpcodeDesc {
                instr_match: 0x5013,
                instr_mask: 0xfe00707f,
            },

            Opcode::SraiRv32 => OpcodeDesc {
                instr_match: 0x40005013,
                instr_mask: 0xfe00707f,
            },

            Opcode::Frflags => OpcodeDesc {
                instr_match: 0x102073,
                instr_mask: 0xfffff07f,
            },

            Opcode::Fsflags => OpcodeDesc {
                instr_match: 0x101073,
                instr_mask: 0xfff0707f,
            },

            Opcode::Fsflagsi => OpcodeDesc {
                instr_match: 0x105073,
                instr_mask: 0xfff0707f,
            },

            Opcode::Frrm => OpcodeDesc {
                instr_match: 0x202073,
                instr_mask: 0xfffff07f,
            },

            Opcode::Fsrm => OpcodeDesc {
                instr_match: 0x201073,
                instr_mask: 0xfff0707f,
            },

            Opcode::Fsrmi => OpcodeDesc {
                instr_match: 0x205073,
                instr_mask: 0xfff0707f,
            },

            Opcode::Fscsr => OpcodeDesc {
                instr_match: 0x301073,
                instr_mask: 0xfff0707f,
            },

            Opcode::Frcsr => OpcodeDesc {
                instr_match: 0x302073,
                instr_mask: 0xfffff07f,
            },

            Opcode::Rdcycle => OpcodeDesc {
                instr_match: 0xc0002073,
                instr_mask: 0xfffff07f,
            },

            Opcode::Rdtime => OpcodeDesc {
                instr_match: 0xc0102073,
                instr_mask: 0xfffff07f,
            },

            Opcode::Rdinstret => OpcodeDesc {
                instr_match: 0xc0202073,
                instr_mask: 0xfffff07f,
            },

            Opcode::Rdcycleh => OpcodeDesc {
                instr_match: 0xc8002073,
                instr_mask: 0xfffff07f,
            },

            Opcode::Rdtimeh => OpcodeDesc {
                instr_match: 0xc8102073,
                instr_mask: 0xfffff07f,
            },

            Opcode::Rdinstreth => OpcodeDesc {
                instr_match: 0xc8202073,
                instr_mask: 0xfffff07f,
            },

            Opcode::Scall => OpcodeDesc {
                instr_match: 0x73,
                instr_mask: 0xffffffff,
            },

            Opcode::Sbreak => OpcodeDesc {
                instr_match: 0x100073,
                instr_mask: 0xffffffff,
            },

            Opcode::FmvXS => OpcodeDesc {
                instr_match: 0xe0000053,
                instr_mask: 0xfff0707f,
            },

            Opcode::FmvSX => OpcodeDesc {
                instr_match: 0xf0000053,
                instr_mask: 0xfff0707f,
            },

            Opcode::FenceTso => OpcodeDesc {
                instr_match: 0x8330000f,
                instr_mask: 0xfff0707f,
            },
        }
    }
}

impl fmt::Display for Opcode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            Opcode::Beq => write!(f, "beq"),
            Opcode::Bne => write!(f, "bne"),
            Opcode::Blt => write!(f, "blt"),
            Opcode::Bge => write!(f, "bge"),
            Opcode::Bltu => write!(f, "bltu"),
            Opcode::Bgeu => write!(f, "bgeu"),
            Opcode::Jalr => write!(f, "jalr"),
            Opcode::Jal => write!(f, "jal"),
            Opcode::Lui => write!(f, "lui"),
            Opcode::Auipc => write!(f, "auipc"),
            Opcode::Addi => write!(f, "addi"),
            Opcode::Slli => write!(f, "slli"),
            Opcode::Slti => write!(f, "slti"),
            Opcode::Sltiu => write!(f, "sltiu"),
            Opcode::Xori => write!(f, "xori"),
            Opcode::Srli => write!(f, "srli"),
            Opcode::Srai => write!(f, "srai"),
            Opcode::Ori => write!(f, "ori"),
            Opcode::Andi => write!(f, "andi"),
            Opcode::Add => write!(f, "add"),
            Opcode::Sub => write!(f, "sub"),
            Opcode::Sll => write!(f, "sll"),
            Opcode::Slt => write!(f, "slt"),
            Opcode::Sltu => write!(f, "sltu"),
            Opcode::Xor => write!(f, "xor"),
            Opcode::Srl => write!(f, "srl"),
            Opcode::Sra => write!(f, "sra"),
            Opcode::Or => write!(f, "or"),
            Opcode::And => write!(f, "and"),
            Opcode::Addiw => write!(f, "addiw"),
            Opcode::Slliw => write!(f, "slliw"),
            Opcode::Srliw => write!(f, "srliw"),
            Opcode::Sraiw => write!(f, "sraiw"),
            Opcode::Addw => write!(f, "addw"),
            Opcode::Subw => write!(f, "subw"),
            Opcode::Sllw => write!(f, "sllw"),
            Opcode::Srlw => write!(f, "srlw"),
            Opcode::Sraw => write!(f, "sraw"),
            Opcode::Lb => write!(f, "lb"),
            Opcode::Lh => write!(f, "lh"),
            Opcode::Lw => write!(f, "lw"),
            Opcode::Ld => write!(f, "ld"),
            Opcode::Lbu => write!(f, "lbu"),
            Opcode::Lhu => write!(f, "lhu"),
            Opcode::Lwu => write!(f, "lwu"),
            Opcode::Sb => write!(f, "sb"),
            Opcode::Sh => write!(f, "sh"),
            Opcode::Sw => write!(f, "sw"),
            Opcode::Sd => write!(f, "sd"),
            Opcode::Fence => write!(f, "fence"),
            Opcode::FenceI => write!(f, "fence.i"),
            Opcode::Mul => write!(f, "mul"),
            Opcode::Mulh => write!(f, "mulh"),
            Opcode::Mulhsu => write!(f, "mulhsu"),
            Opcode::Mulhu => write!(f, "mulhu"),
            Opcode::Div => write!(f, "div"),
            Opcode::Divu => write!(f, "divu"),
            Opcode::Rem => write!(f, "rem"),
            Opcode::Remu => write!(f, "remu"),
            Opcode::Mulw => write!(f, "mulw"),
            Opcode::Divw => write!(f, "divw"),
            Opcode::Divuw => write!(f, "divuw"),
            Opcode::Remw => write!(f, "remw"),
            Opcode::Remuw => write!(f, "remuw"),
            Opcode::Andn => write!(f, "andn"),
            Opcode::Orn => write!(f, "orn"),
            Opcode::Xnor => write!(f, "xnor"),
            Opcode::Slo => write!(f, "slo"),
            Opcode::Sro => write!(f, "sro"),
            Opcode::Rol => write!(f, "rol"),
            Opcode::Ror => write!(f, "ror"),
            Opcode::Sbclr => write!(f, "sbclr"),
            Opcode::Sbset => write!(f, "sbset"),
            Opcode::Sbinv => write!(f, "sbinv"),
            Opcode::Sbext => write!(f, "sbext"),
            Opcode::Gorc => write!(f, "gorc"),
            Opcode::Grev => write!(f, "grev"),
            Opcode::Sloi => write!(f, "sloi"),
            Opcode::Sroi => write!(f, "sroi"),
            Opcode::Rori => write!(f, "rori"),
            Opcode::Sbclri => write!(f, "sbclri"),
            Opcode::Sbseti => write!(f, "sbseti"),
            Opcode::Sbinvi => write!(f, "sbinvi"),
            Opcode::Sbexti => write!(f, "sbexti"),
            Opcode::Gorci => write!(f, "gorci"),
            Opcode::Grevi => write!(f, "grevi"),
            Opcode::Cmix => write!(f, "cmix"),
            Opcode::Cmov => write!(f, "cmov"),
            Opcode::Fsl => write!(f, "fsl"),
            Opcode::Fsr => write!(f, "fsr"),
            Opcode::Fsri => write!(f, "fsri"),
            Opcode::Clz => write!(f, "clz"),
            Opcode::Ctz => write!(f, "ctz"),
            Opcode::Pcnt => write!(f, "pcnt"),
            Opcode::SextB => write!(f, "sext.b"),
            Opcode::SextH => write!(f, "sext.h"),
            Opcode::Crc32B => write!(f, "crc32.b"),
            Opcode::Crc32H => write!(f, "crc32.h"),
            Opcode::Crc32W => write!(f, "crc32.w"),
            Opcode::Crc32cB => write!(f, "crc32c.b"),
            Opcode::Crc32cH => write!(f, "crc32c.h"),
            Opcode::Crc32cW => write!(f, "crc32c.w"),
            Opcode::Sh1add => write!(f, "sh1add"),
            Opcode::Sh2add => write!(f, "sh2add"),
            Opcode::Sh3add => write!(f, "sh3add"),
            Opcode::Clmul => write!(f, "clmul"),
            Opcode::Clmulr => write!(f, "clmulr"),
            Opcode::Clmulh => write!(f, "clmulh"),
            Opcode::Min => write!(f, "min"),
            Opcode::Max => write!(f, "max"),
            Opcode::Minu => write!(f, "minu"),
            Opcode::Maxu => write!(f, "maxu"),
            Opcode::Shfl => write!(f, "shfl"),
            Opcode::Unshfl => write!(f, "unshfl"),
            Opcode::Bext => write!(f, "bext"),
            Opcode::Bdep => write!(f, "bdep"),
            Opcode::Pack => write!(f, "pack"),
            Opcode::Packu => write!(f, "packu"),
            Opcode::Packh => write!(f, "packh"),
            Opcode::Bfp => write!(f, "bfp"),
            Opcode::Shfli => write!(f, "shfli"),
            Opcode::Unshfli => write!(f, "unshfli"),
            Opcode::AmoaddW => write!(f, "amoadd.w"),
            Opcode::AmoxorW => write!(f, "amoxor.w"),
            Opcode::AmoorW => write!(f, "amoor.w"),
            Opcode::AmoandW => write!(f, "amoand.w"),
            Opcode::AmominW => write!(f, "amomin.w"),
            Opcode::AmomaxW => write!(f, "amomax.w"),
            Opcode::AmominuW => write!(f, "amominu.w"),
            Opcode::AmomaxuW => write!(f, "amomaxu.w"),
            Opcode::AmoswapW => write!(f, "amoswap.w"),
            Opcode::LrW => write!(f, "lr.w"),
            Opcode::ScW => write!(f, "sc.w"),
            Opcode::AmoaddD => write!(f, "amoadd.d"),
            Opcode::AmoxorD => write!(f, "amoxor.d"),
            Opcode::AmoorD => write!(f, "amoor.d"),
            Opcode::AmoandD => write!(f, "amoand.d"),
            Opcode::AmominD => write!(f, "amomin.d"),
            Opcode::AmomaxD => write!(f, "amomax.d"),
            Opcode::AmominuD => write!(f, "amominu.d"),
            Opcode::AmomaxuD => write!(f, "amomaxu.d"),
            Opcode::AmoswapD => write!(f, "amoswap.d"),
            Opcode::LrD => write!(f, "lr.d"),
            Opcode::ScD => write!(f, "sc.d"),
            Opcode::Ecall => write!(f, "ecall"),
            Opcode::Ebreak => write!(f, "ebreak"),
            Opcode::Uret => write!(f, "uret"),
            Opcode::Sret => write!(f, "sret"),
            Opcode::Mret => write!(f, "mret"),
            Opcode::Dret => write!(f, "dret"),
            Opcode::SfenceVma => write!(f, "sfence.vma"),
            Opcode::Wfi => write!(f, "wfi"),
            Opcode::Csrrw => write!(f, "csrrw"),
            Opcode::Csrrs => write!(f, "csrrs"),
            Opcode::Csrrc => write!(f, "csrrc"),
            Opcode::Csrrwi => write!(f, "csrrwi"),
            Opcode::Csrrsi => write!(f, "csrrsi"),
            Opcode::Csrrci => write!(f, "csrrci"),
            Opcode::HfenceBvma => write!(f, "hfence.bvma"),
            Opcode::HfenceGvma => write!(f, "hfence.gvma"),
            Opcode::FaddS => write!(f, "fadd.s"),
            Opcode::FsubS => write!(f, "fsub.s"),
            Opcode::FmulS => write!(f, "fmul.s"),
            Opcode::FdivS => write!(f, "fdiv.s"),
            Opcode::FsgnjS => write!(f, "fsgnj.s"),
            Opcode::FsgnjnS => write!(f, "fsgnjn.s"),
            Opcode::FsgnjxS => write!(f, "fsgnjx.s"),
            Opcode::FminS => write!(f, "fmin.s"),
            Opcode::FmaxS => write!(f, "fmax.s"),
            Opcode::FsqrtS => write!(f, "fsqrt.s"),
            Opcode::FaddD => write!(f, "fadd.d"),
            Opcode::FsubD => write!(f, "fsub.d"),
            Opcode::FmulD => write!(f, "fmul.d"),
            Opcode::FdivD => write!(f, "fdiv.d"),
            Opcode::FsgnjD => write!(f, "fsgnj.d"),
            Opcode::FsgnjnD => write!(f, "fsgnjn.d"),
            Opcode::FsgnjxD => write!(f, "fsgnjx.d"),
            Opcode::FminD => write!(f, "fmin.d"),
            Opcode::FmaxD => write!(f, "fmax.d"),
            Opcode::FcvtSD => write!(f, "fcvt.s.d"),
            Opcode::FcvtDS => write!(f, "fcvt.d.s"),
            Opcode::FsqrtD => write!(f, "fsqrt.d"),
            Opcode::FaddQ => write!(f, "fadd.q"),
            Opcode::FsubQ => write!(f, "fsub.q"),
            Opcode::FmulQ => write!(f, "fmul.q"),
            Opcode::FdivQ => write!(f, "fdiv.q"),
            Opcode::FsgnjQ => write!(f, "fsgnj.q"),
            Opcode::FsgnjnQ => write!(f, "fsgnjn.q"),
            Opcode::FsgnjxQ => write!(f, "fsgnjx.q"),
            Opcode::FminQ => write!(f, "fmin.q"),
            Opcode::FmaxQ => write!(f, "fmax.q"),
            Opcode::FcvtSQ => write!(f, "fcvt.s.q"),
            Opcode::FcvtQS => write!(f, "fcvt.q.s"),
            Opcode::FcvtDQ => write!(f, "fcvt.d.q"),
            Opcode::FcvtQD => write!(f, "fcvt.q.d"),
            Opcode::FsqrtQ => write!(f, "fsqrt.q"),
            Opcode::FleS => write!(f, "fle.s"),
            Opcode::FltS => write!(f, "flt.s"),
            Opcode::FeqS => write!(f, "feq.s"),
            Opcode::FleD => write!(f, "fle.d"),
            Opcode::FltD => write!(f, "flt.d"),
            Opcode::FeqD => write!(f, "feq.d"),
            Opcode::FleQ => write!(f, "fle.q"),
            Opcode::FltQ => write!(f, "flt.q"),
            Opcode::FeqQ => write!(f, "feq.q"),
            Opcode::FcvtWS => write!(f, "fcvt.w.s"),
            Opcode::FcvtWuS => write!(f, "fcvt.wu.s"),
            Opcode::FcvtLS => write!(f, "fcvt.l.s"),
            Opcode::FcvtLuS => write!(f, "fcvt.lu.s"),
            Opcode::FmvXW => write!(f, "fmv.x.w"),
            Opcode::FclassS => write!(f, "fclass.s"),
            Opcode::FcvtWD => write!(f, "fcvt.w.d"),
            Opcode::FcvtWuD => write!(f, "fcvt.wu.d"),
            Opcode::FcvtLD => write!(f, "fcvt.l.d"),
            Opcode::FcvtLuD => write!(f, "fcvt.lu.d"),
            Opcode::FmvXD => write!(f, "fmv.x.d"),
            Opcode::FclassD => write!(f, "fclass.d"),
            Opcode::FcvtWQ => write!(f, "fcvt.w.q"),
            Opcode::FcvtWuQ => write!(f, "fcvt.wu.q"),
            Opcode::FcvtLQ => write!(f, "fcvt.l.q"),
            Opcode::FcvtLuQ => write!(f, "fcvt.lu.q"),
            Opcode::FmvXQ => write!(f, "fmv.x.q"),
            Opcode::FclassQ => write!(f, "fclass.q"),
            Opcode::FcvtSW => write!(f, "fcvt.s.w"),
            Opcode::FcvtSWu => write!(f, "fcvt.s.wu"),
            Opcode::FcvtSL => write!(f, "fcvt.s.l"),
            Opcode::FcvtSLu => write!(f, "fcvt.s.lu"),
            Opcode::FmvWX => write!(f, "fmv.w.x"),
            Opcode::FcvtDW => write!(f, "fcvt.d.w"),
            Opcode::FcvtDWu => write!(f, "fcvt.d.wu"),
            Opcode::FcvtDL => write!(f, "fcvt.d.l"),
            Opcode::FcvtDLu => write!(f, "fcvt.d.lu"),
            Opcode::FmvDX => write!(f, "fmv.d.x"),
            Opcode::FcvtQW => write!(f, "fcvt.q.w"),
            Opcode::FcvtQWu => write!(f, "fcvt.q.wu"),
            Opcode::FcvtQL => write!(f, "fcvt.q.l"),
            Opcode::FcvtQLu => write!(f, "fcvt.q.lu"),
            Opcode::FmvQX => write!(f, "fmv.q.x"),
            Opcode::Flw => write!(f, "flw"),
            Opcode::Fld => write!(f, "fld"),
            Opcode::Flq => write!(f, "flq"),
            Opcode::Fsw => write!(f, "fsw"),
            Opcode::Fsd => write!(f, "fsd"),
            Opcode::Fsq => write!(f, "fsq"),
            Opcode::FmaddS => write!(f, "fmadd.s"),
            Opcode::FmsubS => write!(f, "fmsub.s"),
            Opcode::FnmsubS => write!(f, "fnmsub.s"),
            Opcode::FnmaddS => write!(f, "fnmadd.s"),
            Opcode::FmaddD => write!(f, "fmadd.d"),
            Opcode::FmsubD => write!(f, "fmsub.d"),
            Opcode::FnmsubD => write!(f, "fnmsub.d"),
            Opcode::FnmaddD => write!(f, "fnmadd.d"),
            Opcode::FmaddQ => write!(f, "fmadd.q"),
            Opcode::FmsubQ => write!(f, "fmsub.q"),
            Opcode::FnmsubQ => write!(f, "fnmsub.q"),
            Opcode::FnmaddQ => write!(f, "fnmadd.q"),
            Opcode::SlliRv32 => write!(f, "slli.rv32"),
            Opcode::SrliRv32 => write!(f, "srli.rv32"),
            Opcode::SraiRv32 => write!(f, "srai.rv32"),
            Opcode::Frflags => write!(f, "frflags"),
            Opcode::Fsflags => write!(f, "fsflags"),
            Opcode::Fsflagsi => write!(f, "fsflagsi"),
            Opcode::Frrm => write!(f, "frrm"),
            Opcode::Fsrm => write!(f, "fsrm"),
            Opcode::Fsrmi => write!(f, "fsrmi"),
            Opcode::Fscsr => write!(f, "fscsr"),
            Opcode::Frcsr => write!(f, "frcsr"),
            Opcode::Rdcycle => write!(f, "rdcycle"),
            Opcode::Rdtime => write!(f, "rdtime"),
            Opcode::Rdinstret => write!(f, "rdinstret"),
            Opcode::Rdcycleh => write!(f, "rdcycleh"),
            Opcode::Rdtimeh => write!(f, "rdtimeh"),
            Opcode::Rdinstreth => write!(f, "rdinstreth"),
            Opcode::Scall => write!(f, "scall"),
            Opcode::Sbreak => write!(f, "sbreak"),
            Opcode::FmvXS => write!(f, "fmv.x.s"),
            Opcode::FmvSX => write!(f, "fmv.s.x"),
            Opcode::FenceTso => write!(f, "fence.tso"),
        }
    }
}
