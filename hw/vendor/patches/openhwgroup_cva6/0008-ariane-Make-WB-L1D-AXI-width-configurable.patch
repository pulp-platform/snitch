From bbe0a1b408c420117bfde5b50c2b6a23c1223d10 Mon Sep 17 00:00:00 2001
From: Nils Wistoff <nwistoff@iis.ee.ethz.ch>
Date: Fri, 3 Sep 2021 15:25:11 +0200
Subject: [PATCH 8/9] ariane: Make WB L1D AXI width configurable

Signed-off-by: Nils Wistoff <nwistoff@iis.ee.ethz.ch>
---
 src/ariane.sv                                  | 14 +++++++-
 src/axi_adapter.sv                             | 32 +++++++++--------
 src/cache_subsystem/cva6_icache_axi_wrapper.sv | 21 ++++++++---
 src/cache_subsystem/miss_handler.sv            | 31 ++++++++++++-----
 src/cache_subsystem/std_cache_subsystem.sv     | 48 ++++++++++++++++++--------
 src/cache_subsystem/std_nbdcache.sv            | 26 +++++++++-----
 6 files changed, 121 insertions(+), 51 deletions(-)

diff --git a/src/ariane.sv b/src/ariane.sv
index 111d494..414fa4e 100644
--- a/src/ariane.sv
+++ b/src/ariane.sv
@@ -29,6 +29,9 @@ module ariane import ariane_pkg::*; #(
   parameter int unsigned AxiDataWidth = ariane_axi::DataWidth,
   parameter int unsigned AxiIdWidth   = ariane_axi::IdWidth,
   parameter int unsigned AxiUserWidth = ariane_axi::UserWidth,
+  parameter type axi_ar_chan_t = ariane_axi::ar_chan_t,
+  parameter type axi_aw_chan_t = ariane_axi::aw_chan_t,
+  parameter type axi_w_chan_t  = ariane_axi::w_chan_t,
   parameter type axi_req_t = ariane_axi::req_t,
   parameter type axi_rsp_t = ariane_axi::resp_t
 ) (
@@ -665,7 +668,16 @@ module ariane import ariane_pkg::*; #(
     // note: this only works with one cacheable region
     // not as important since this cache subsystem is about to be
     // deprecated
-    .ArianeCfg             ( ArianeCfg                   )
+    .ArianeCfg             ( ArianeCfg                   ),
+    .AxiAddrWidth          ( AxiAddrWidth                ),
+    .AxiDataWidth          ( AxiDataWidth                ),
+    .AxiIdWidth            ( AxiIdWidth                  ),
+    .AxiUserWidth          ( AxiUserWidth                ),
+    .axi_ar_chan_t         ( axi_ar_chan_t               ),
+    .axi_aw_chan_t         ( axi_aw_chan_t               ),
+    .axi_w_chan_t          ( axi_w_chan_t                ),
+    .axi_req_t             ( axi_req_t                   ),
+    .axi_rsp_t             ( axi_rsp_t                   )
   ) i_cache_subsystem (
     // to D$
     .clk_i                 ( clk_i                       ),
diff --git a/src/axi_adapter.sv b/src/axi_adapter.sv
index 479a59e..6d04839 100644
--- a/src/axi_adapter.sv
+++ b/src/axi_adapter.sv
@@ -19,8 +19,12 @@
 module axi_adapter #(
   parameter int unsigned DATA_WIDTH            = 256,
   parameter logic        CRITICAL_WORD_FIRST   = 0, // the AXI subsystem needs to support wrapping reads for this feature
-  parameter int unsigned AXI_ID_WIDTH          = 10,
-  parameter int unsigned CACHELINE_BYTE_OFFSET = 8
+  parameter int unsigned CACHELINE_BYTE_OFFSET = 8,
+  parameter int unsigned AXI_ADDR_WIDTH        = 0,
+  parameter int unsigned AXI_DATA_WIDTH        = 0,
+  parameter int unsigned AXI_ID_WIDTH          = 0,
+  parameter type axi_req_t = ariane_axi::req_t,
+  parameter type axi_rsp_t = ariane_axi::resp_t
 )(
   input  logic                             clk_i,  // Clock
   input  logic                             rst_ni, // Asynchronous reset active low
@@ -31,23 +35,23 @@ module axi_adapter #(
   output logic [AXI_ID_WIDTH-1:0]          gnt_id_o,
   input  logic [63:0]                      addr_i,
   input  logic                             we_i,
-  input  logic [(DATA_WIDTH/64)-1:0][63:0] wdata_i,
-  input  logic [(DATA_WIDTH/64)-1:0][7:0]  be_i,
+  input  logic [(DATA_WIDTH/AXI_DATA_WIDTH)-1:0][AXI_DATA_WIDTH-1:0]      wdata_i,
+  input  logic [(DATA_WIDTH/AXI_DATA_WIDTH)-1:0][(AXI_DATA_WIDTH/8)-1:0]  be_i,
   input  logic [1:0]                       size_i,
   input  logic [AXI_ID_WIDTH-1:0]          id_i,
   // read port
   output logic                             valid_o,
-  output logic [(DATA_WIDTH/64)-1:0][63:0] rdata_o,
+  output logic [(DATA_WIDTH/AXI_DATA_WIDTH)-1:0][AXI_DATA_WIDTH-1:0] rdata_o,
   output logic [AXI_ID_WIDTH-1:0]          id_o,
   // critical word - read port
-  output logic [63:0]                      critical_word_o,
+  output logic [AXI_DATA_WIDTH-1:0]        critical_word_o,
   output logic                             critical_word_valid_o,
   // AXI port
-  output ariane_axi::req_t                 axi_req_o,
-  input  ariane_axi::resp_t                axi_resp_i
+  output axi_req_t                 axi_req_o,
+  input  axi_rsp_t                 axi_resp_i
 );
-  localparam BURST_SIZE = DATA_WIDTH/64-1;
-  localparam ADDR_INDEX = ($clog2(DATA_WIDTH/64) > 0) ? $clog2(DATA_WIDTH/64) : 1;
+  localparam BURST_SIZE = (DATA_WIDTH/AXI_DATA_WIDTH)-1;
+  localparam ADDR_INDEX = ($clog2(DATA_WIDTH/AXI_DATA_WIDTH) > 0) ? $clog2(DATA_WIDTH/AXI_DATA_WIDTH) : 1;
 
   enum logic [3:0] {
     IDLE, WAIT_B_VALID, WAIT_AW_READY, WAIT_LAST_W_READY, WAIT_LAST_W_READY_AW_READY, WAIT_AW_READY_BURST,
@@ -56,16 +60,16 @@ module axi_adapter #(
 
   // counter for AXI transfers
   logic [ADDR_INDEX-1:0] cnt_d, cnt_q;
-  logic [(DATA_WIDTH/64)-1:0][63:0] cache_line_d, cache_line_q;
+  logic [(DATA_WIDTH/AXI_DATA_WIDTH)-1:0][AXI_DATA_WIDTH-1:0] cache_line_d, cache_line_q;
   // save the address for a read, as we allow for non-cacheline aligned accesses
-  logic [(DATA_WIDTH/64)-1:0] addr_offset_d, addr_offset_q;
+  logic [(DATA_WIDTH/AXI_DATA_WIDTH)-1:0] addr_offset_d, addr_offset_q;
   logic [AXI_ID_WIDTH-1:0]    id_d, id_q;
   logic [ADDR_INDEX-1:0]      index;
 
   always_comb begin : axi_fsm
     // Default assignments
     axi_req_o.aw_valid  = 1'b0;
-    axi_req_o.aw.addr   = addr_i;
+    axi_req_o.aw.addr   = addr_i[AXI_DATA_WIDTH-1:0];
     axi_req_o.aw.prot   = 3'b0;
     axi_req_o.aw.region = 4'b0;
     axi_req_o.aw.len    = 8'b0;
@@ -81,7 +85,7 @@ module axi_adapter #(
     axi_req_o.ar_valid  = 1'b0;
     // in case of a single request or wrapping transfer we can simply begin at the address, if we want to request a cache-line
     // with an incremental transfer we need to output the corresponding base address of the cache line
-    axi_req_o.ar.addr   = (CRITICAL_WORD_FIRST || type_i == ariane_axi::SINGLE_REQ) ? addr_i : { addr_i[63:CACHELINE_BYTE_OFFSET], {{CACHELINE_BYTE_OFFSET}{1'b0}}};
+    axi_req_o.ar.addr   = (CRITICAL_WORD_FIRST || type_i == ariane_axi::SINGLE_REQ) ? addr_i[AXI_DATA_WIDTH-1:0] : { addr_i[AXI_DATA_WIDTH-1:CACHELINE_BYTE_OFFSET], {{CACHELINE_BYTE_OFFSET}{1'b0}}};
     axi_req_o.ar.prot   = 3'b0;
     axi_req_o.ar.region = 4'b0;
     axi_req_o.ar.len    = 8'b0;
diff --git a/src/cache_subsystem/cva6_icache_axi_wrapper.sv b/src/cache_subsystem/cva6_icache_axi_wrapper.sv
index 1aeab62..2cad769 100644
--- a/src/cache_subsystem/cva6_icache_axi_wrapper.sv
+++ b/src/cache_subsystem/cva6_icache_axi_wrapper.sv
@@ -14,7 +14,13 @@
 //
 
 module cva6_icache_axi_wrapper import ariane_pkg::*; import wt_cache_pkg::*; #(
-  parameter ariane_cfg_t ArianeCfg = ArianeDefaultConfig  // contains cacheable regions
+  parameter ariane_cfg_t ArianeCfg = ArianeDefaultConfig,  // contains cacheable regions
+  parameter int unsigned AxiAddrWidth = 0,
+  parameter int unsigned AxiDataWidth = 0,
+  parameter int unsigned AxiIdWidth   = 0,
+  parameter int unsigned AxiUserWidth = 0,
+  parameter type axi_req_t = ariane_axi::req_t,
+  parameter type axi_rsp_t = ariane_axi::resp_t
 ) (
   input  logic              clk_i,
   input  logic              rst_ni,
@@ -30,8 +36,8 @@ module cva6_icache_axi_wrapper import ariane_pkg::*; import wt_cache_pkg::*; #(
   input  icache_dreq_i_t    dreq_i,
   output icache_dreq_o_t    dreq_o,
   // AXI refill port
-  output ariane_axi::req_t  axi_req_o,
-  input  ariane_axi::resp_t axi_resp_i
+  output axi_req_t          axi_req_o,
+  input  axi_rsp_t          axi_resp_i
 );
 
   localparam AxiNumWords = (ICACHE_LINE_WIDTH/64) * (ICACHE_LINE_WIDTH  > DCACHE_LINE_WIDTH)  +
@@ -118,8 +124,13 @@ module cva6_icache_axi_wrapper import ariane_pkg::*; import wt_cache_pkg::*; #(
   // AXI shim
   // --------
     axi_shim #(
-    .AxiNumWords     ( AxiNumWords            ),
-    .AxiIdWidth      ( $size(axi_resp_i.r.id) )
+    .AxiNumWords     ( AxiNumWords  ),
+    .AxiAddrWidth    ( AxiAddrWidth ),
+    .AxiDataWidth    ( AxiDataWidth ),
+    .AxiIdWidth      ( AxiIdWidth   ),
+    .AxiUserWidth    ( AxiUserWidth ),
+    .axi_req_t       ( axi_req_t    ),
+    .axi_rsp_t       ( axi_rsp_t    )
   ) i_axi_shim (
     .clk_i           ( clk_i             ),
     .rst_ni          ( rst_ni            ),
diff --git a/src/cache_subsystem/miss_handler.sv b/src/cache_subsystem/miss_handler.sv
index 49704bb..82b9f0c 100644
--- a/src/cache_subsystem/miss_handler.sv
+++ b/src/cache_subsystem/miss_handler.sv
@@ -17,7 +17,12 @@
 // --------------
 
 module miss_handler import ariane_pkg::*; import std_cache_pkg::*; #(
-    parameter int unsigned NR_PORTS         = 3
+    parameter int unsigned NR_PORTS       = 3,
+    parameter int unsigned AXI_ADDR_WIDTH = 0,
+    parameter int unsigned AXI_DATA_WIDTH = 0,
+    parameter int unsigned AXI_ID_WIDTH   = 0,
+    parameter type axi_req_t = ariane_axi::req_t,
+    parameter type axi_rsp_t = ariane_axi::resp_t
 )(
     input  logic                                        clk_i,
     input  logic                                        rst_ni,
@@ -33,8 +38,8 @@ module miss_handler import ariane_pkg::*; import std_cache_pkg::*; #(
     output logic [NR_PORTS-1:0][63:0]                   bypass_data_o,
 
     // AXI port
-    output ariane_axi::req_t                            axi_bypass_o,
-    input  ariane_axi::resp_t                           axi_bypass_i,
+    output axi_req_t                                    axi_bypass_o,
+    input  axi_rsp_t                                    axi_bypass_i,
 
     // Miss handling (~> cacheline refill)
     output logic [NR_PORTS-1:0]                         miss_gnt_o,
@@ -42,8 +47,8 @@ module miss_handler import ariane_pkg::*; import std_cache_pkg::*; #(
 
     output logic [63:0]                                 critical_word_o,
     output logic                                        critical_word_valid_o,
-    output ariane_axi::req_t                            axi_data_o,
-    input  ariane_axi::resp_t                           axi_data_i,
+    output axi_req_t                                    axi_data_o,
+    input  axi_rsp_t                                    axi_data_i,
 
     input  logic [NR_PORTS-1:0][55:0]                   mshr_addr_i,
     output logic [NR_PORTS-1:0]                         mshr_addr_matches_o,
@@ -563,8 +568,12 @@ module miss_handler import ariane_pkg::*; import std_cache_pkg::*; #(
 
     axi_adapter #(
         .DATA_WIDTH            ( 64                 ),
-        .AXI_ID_WIDTH          ( 4                  ),
-        .CACHELINE_BYTE_OFFSET ( DCACHE_BYTE_OFFSET )
+        .CACHELINE_BYTE_OFFSET ( DCACHE_BYTE_OFFSET ),
+        .AXI_ADDR_WIDTH        ( AXI_ADDR_WIDTH     ),
+        .AXI_DATA_WIDTH        ( AXI_DATA_WIDTH     ),
+        .AXI_ID_WIDTH          ( AXI_ID_WIDTH       ),
+        .axi_req_t             ( axi_req_t          ),
+        .axi_rsp_t             ( axi_rsp_t          )
     ) i_bypass_axi_adapter (
         .clk_i,
         .rst_ni,
@@ -592,8 +601,12 @@ module miss_handler import ariane_pkg::*; import std_cache_pkg::*; #(
     // ----------------------
     axi_adapter  #(
         .DATA_WIDTH            ( DCACHE_LINE_WIDTH  ),
-        .AXI_ID_WIDTH          ( 4                  ),
-        .CACHELINE_BYTE_OFFSET ( DCACHE_BYTE_OFFSET )
+        .CACHELINE_BYTE_OFFSET ( DCACHE_BYTE_OFFSET ),
+        .AXI_ADDR_WIDTH        ( AXI_ADDR_WIDTH     ),
+        .AXI_DATA_WIDTH        ( AXI_DATA_WIDTH     ),
+        .AXI_ID_WIDTH          ( AXI_ID_WIDTH       ),
+        .axi_req_t             ( axi_req_t          ),
+        .axi_rsp_t             ( axi_rsp_t          )
     ) i_miss_axi_adapter (
         .clk_i,
         .rst_ni,
diff --git a/src/cache_subsystem/std_cache_subsystem.sv b/src/cache_subsystem/std_cache_subsystem.sv
index 0523fb6..8a79417 100644
--- a/src/cache_subsystem/std_cache_subsystem.sv
+++ b/src/cache_subsystem/std_cache_subsystem.sv
@@ -16,7 +16,16 @@
 
 
 module std_cache_subsystem import ariane_pkg::*; import std_cache_pkg::*; #(
-    parameter ariane_cfg_t ArianeCfg = ArianeDefaultConfig  // contains cacheable regions
+    parameter ariane_cfg_t ArianeCfg = ArianeDefaultConfig,  // contains cacheable regions
+    parameter int unsigned AxiAddrWidth = 0,
+    parameter int unsigned AxiDataWidth = 0,
+    parameter int unsigned AxiIdWidth   = 0,
+    parameter int unsigned AxiUserWidth = 0,
+    parameter type axi_ar_chan_t = ariane_axi::ar_chan_t,
+    parameter type axi_aw_chan_t = ariane_axi::aw_chan_t,
+    parameter type axi_w_chan_t  = ariane_axi::w_chan_t,
+    parameter type axi_req_t = ariane_axi::req_t,
+    parameter type axi_rsp_t = ariane_axi::resp_t
 ) (
     input logic                            clk_i,
     input logic                            rst_ni,
@@ -45,21 +54,27 @@ module std_cache_subsystem import ariane_pkg::*; import std_cache_pkg::*; #(
     input  dcache_req_i_t   [2:0]          dcache_req_ports_i,     // to/from LSU
     output dcache_req_o_t   [2:0]          dcache_req_ports_o,     // to/from LSU
     // memory side
-    output ariane_axi::req_t               axi_req_o,
-    input  ariane_axi::resp_t              axi_resp_i
+    output axi_req_t                       axi_req_o,
+    input  axi_rsp_t                       axi_resp_i
 );
 
   assign wbuffer_empty_o = 1'b1;
 
-    ariane_axi::req_t  axi_req_icache;
-    ariane_axi::resp_t axi_resp_icache;
-    ariane_axi::req_t  axi_req_bypass;
-    ariane_axi::resp_t axi_resp_bypass;
-    ariane_axi::req_t  axi_req_data;
-    ariane_axi::resp_t axi_resp_data;
+    axi_req_t axi_req_icache;
+    axi_rsp_t axi_resp_icache;
+    axi_req_t axi_req_bypass;
+    axi_rsp_t axi_resp_bypass;
+    axi_req_t axi_req_data;
+    axi_rsp_t axi_resp_data;
 
     cva6_icache_axi_wrapper #(
-        .ArianeCfg  ( ArianeCfg             )
+        .ArianeCfg    ( ArianeCfg    ),
+        .AxiAddrWidth ( AxiAddrWidth ),
+        .AxiDataWidth ( AxiDataWidth ),
+        .AxiIdWidth   ( AxiIdWidth   ),
+        .AxiUserWidth ( AxiUserWidth ),
+        .axi_req_t    ( axi_req_t    ),
+        .axi_rsp_t    ( axi_rsp_t    )
     ) i_cva6_icache_axi_wrapper (
         .clk_i      ( clk_i                 ),
         .rst_ni     ( rst_ni                ),
@@ -80,7 +95,12 @@ module std_cache_subsystem import ariane_pkg::*; import std_cache_pkg::*; #(
    // Port 1: Load Unit
    // Port 2: Store Unit
    std_nbdcache #(
-      .CACHE_START_ADDR ( ArianeCfg.CachedRegionAddrBase )
+      .CACHE_START_ADDR ( ArianeCfg.CachedRegionAddrBase ),
+      .AXI_ADDR_WIDTH   ( AxiAddrWidth                   ),
+      .AXI_DATA_WIDTH   ( AxiDataWidth                   ),
+      .AXI_ID_WIDTH     ( AxiIdWidth                     ),
+      .axi_req_t        ( axi_req_t                      ),
+      .axi_rsp_t        ( axi_rsp_t                      )
    ) i_nbdcache (
       .clk_i,
       .rst_ni,
@@ -107,7 +127,7 @@ module std_cache_subsystem import ariane_pkg::*; import std_cache_pkg::*; #(
 
     // AR Channel
     stream_arbiter #(
-        .DATA_T ( ariane_axi::ar_chan_t ),
+        .DATA_T ( axi_ar_chan_t ),
         .N_INP  ( 3                     )
     ) i_stream_arbiter_ar (
         .clk_i,
@@ -122,7 +142,7 @@ module std_cache_subsystem import ariane_pkg::*; import std_cache_pkg::*; #(
 
     // AW Channel
     stream_arbiter #(
-        .DATA_T ( ariane_axi::aw_chan_t ),
+        .DATA_T ( axi_aw_chan_t ),
         .N_INP  ( 3                     )
     ) i_stream_arbiter_aw (
         .clk_i,
@@ -174,7 +194,7 @@ module std_cache_subsystem import ariane_pkg::*; import std_cache_pkg::*; #(
     assign w_select_arbiter = (w_fifo_empty) ? 0 : w_select_fifo;
 
     stream_mux #(
-        .DATA_T ( ariane_axi::w_chan_t ),
+        .DATA_T ( axi_w_chan_t ),
         .N_INP  ( 3                    )
     ) i_stream_mux_w (
         .inp_data_i  ( {axi_req_data.w, axi_req_bypass.w, axi_req_icache.w} ),
diff --git a/src/cache_subsystem/std_nbdcache.sv b/src/cache_subsystem/std_nbdcache.sv
index 6c7c4e8..bb12116 100644
--- a/src/cache_subsystem/std_nbdcache.sv
+++ b/src/cache_subsystem/std_nbdcache.sv
@@ -14,7 +14,12 @@
 
 
 module std_nbdcache import std_cache_pkg::*; import ariane_pkg::*; #(
-    parameter logic [63:0] CACHE_START_ADDR = 64'h8000_0000
+    parameter logic [63:0] CACHE_START_ADDR = 64'h8000_0000,
+    parameter int unsigned AXI_ADDR_WIDTH   = 0,
+    parameter int unsigned AXI_DATA_WIDTH   = 0,
+    parameter int unsigned AXI_ID_WIDTH     = 0,
+    parameter type axi_req_t = ariane_axi::req_t,
+    parameter type axi_rsp_t = ariane_axi::resp_t
 )(
     input  logic                           clk_i,       // Clock
     input  logic                           rst_ni,      // Asynchronous reset active low
@@ -30,10 +35,10 @@ module std_nbdcache import std_cache_pkg::*; import ariane_pkg::*; #(
     input  dcache_req_i_t [2:0]            req_ports_i,  // request ports
     output dcache_req_o_t [2:0]            req_ports_o,  // request ports
     // Cache AXI refill port
-    output ariane_axi::req_t               axi_data_o,
-    input  ariane_axi::resp_t              axi_data_i,
-    output ariane_axi::req_t               axi_bypass_o,
-    input  ariane_axi::resp_t              axi_bypass_i
+    output axi_req_t                       axi_data_o,
+    input  axi_rsp_t                       axi_data_i,
+    output axi_req_t                       axi_bypass_o,
+    input  axi_rsp_t                       axi_bypass_i
 );
 
 import std_cache_pkg::*;
@@ -127,7 +132,12 @@ import std_cache_pkg::*;
     // Miss Handling Unit
     // ------------------
     miss_handler #(
-        .NR_PORTS               ( 3                    )
+        .NR_PORTS               ( 3                    ),
+        .AXI_ADDR_WIDTH         ( AXI_ADDR_WIDTH       ),
+        .AXI_DATA_WIDTH         ( AXI_DATA_WIDTH       ),
+        .AXI_ID_WIDTH           ( AXI_ID_WIDTH         ),
+        .axi_req_t              ( axi_req_t            ),
+        .axi_rsp_t              ( axi_rsp_t            )
     ) i_miss_handler (
         .flush_i                ( flush_i              ),
         .busy_i                 ( |busy                ),
@@ -257,8 +267,8 @@ import std_cache_pkg::*;
 
 //pragma translate_off
     initial begin
-        assert ($bits(axi_data_o.aw.addr) == 64) else $fatal(1, "Ariane needs a 64-bit bus");
-        assert (DCACHE_LINE_WIDTH/64 inside {2, 4, 8, 16}) else $fatal(1, "Cache line size needs to be a power of two multiple of 64");
+        // assert ($bits(axi_data_o.aw.addr) == 64) else $fatal(1, "Ariane needs a 64-bit bus");
+        assert (DCACHE_LINE_WIDTH/AXI_DATA_WIDTH inside {2, 4, 8, 16}) else $fatal(1, "Cache line size needs to be a power of two multiple of AXI_DATA_WIDTH");
     end
 //pragma translate_on
 endmodule
-- 
2.16.5

