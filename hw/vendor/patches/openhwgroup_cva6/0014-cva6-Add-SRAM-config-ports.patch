From 66d6c3471e6d4fef28afeec4f779e5561ade1f3b Mon Sep 17 00:00:00 2001
From: Paul Scheffler <paulsc@iis.ee.ethz.ch>
Date: Thu, 21 Oct 2021 23:17:48 +0200
Subject: [PATCH] cva6: Add SRAM config ports

---
 src/ariane.sv                                  | 27 ++++++++++++++++++++++----
 src/cache_subsystem/cva6_icache.sv             | 13 ++++++++++++-
 src/cache_subsystem/cva6_icache_axi_wrapper.sv | 12 ++++++++++--
 src/cache_subsystem/std_cache_subsystem.sv     | 20 ++++++++++++++++---
 src/cache_subsystem/std_nbdcache.sv            | 16 ++++++++++++++-
 src/cache_subsystem/wt_cache_subsystem.sv      | 18 ++++++++++++++---
 src/cache_subsystem/wt_dcache.sv               | 13 +++++++++++--
 src/cache_subsystem/wt_dcache_mem.sv           | 13 ++++++++++++-
 8 files changed, 115 insertions(+), 17 deletions(-)

diff --git a/src/ariane.sv b/src/ariane.sv
index b428766..3dfa453 100644
--- a/src/ariane.sv
+++ b/src/ariane.sv
@@ -33,14 +33,20 @@ module ariane import ariane_pkg::*; #(
   parameter type axi_aw_chan_t = ariane_axi::aw_chan_t,
   parameter type axi_w_chan_t  = ariane_axi::w_chan_t,
   parameter type axi_req_t = ariane_axi::req_t,
-  parameter type axi_rsp_t = ariane_axi::resp_t
+  parameter type axi_rsp_t = ariane_axi::resp_t,
+  parameter type sram_cfg_t = logic
 ) (
   input  logic                         clk_i,
   input  logic                         rst_ni,
   // Core ID, Cluster ID and boot address are considered more or less static
   input  logic [63:0]                  boot_addr_i,  // reset boot address
   input  logic [63:0]                  hart_id_i,    // hart id in a multicore environment (reflected in a CSR)
-
+  // SRAM config
+  input sram_cfg_t                     sram_cfg_idata_i,
+  input sram_cfg_t                     sram_cfg_itag_i,
+  input sram_cfg_t                     sram_cfg_ddata_i,
+  input sram_cfg_t                     sram_cfg_dtag_i,
+  input sram_cfg_t                     sram_cfg_dvalid_dirty_i,
   // Interrupt inputs
   input  logic [1:0]                   irq_i,        // level sensitive IR lines, mip & sip (async)
   input  logic                         ipi_i,        // inter-processor interrupts (async)
@@ -656,7 +662,8 @@ module ariane import ariane_pkg::*; #(
     .AxiIdWidth           ( AxiIdWidth ),
     .AxiUserWidth         ( AxiUserWidth ),
     .axi_req_t            ( axi_req_t ),
-    .axi_rsp_t            ( axi_rsp_t )
+    .axi_rsp_t            ( axi_rsp_t ),
+    .sram_cfg_t           ( sram_cfg_t )
   ) i_cache_subsystem (
     // to D$
     .clk_i                 ( clk_i                       ),
@@ -664,6 +671,11 @@ module ariane import ariane_pkg::*; #(
     .busy_o                ( busy_cache_ctrl             ),
     .stall_i               ( stall_ctrl_cache            ),
     .init_ni               ( init_ctrl_cache_n           ),
+    // SRAM config
+    .sram_cfg_idata_i        ( sram_cfg_idata_i          ),
+    .sram_cfg_itag_i         ( sram_cfg_itag_i           ),
+    .sram_cfg_ddata_i        ( sram_cfg_ddata_i          ),
+    .sram_cfg_dtag_i         ( sram_cfg_dtag_i           ),
     // I$
     .icache_en_i           ( icache_en_csr               ),
     .icache_flush_i        ( icache_flush_ctrl_cache     ),
@@ -710,7 +722,8 @@ module ariane import ariane_pkg::*; #(
     .axi_aw_chan_t         ( axi_aw_chan_t               ),
     .axi_w_chan_t          ( axi_w_chan_t                ),
     .axi_req_t             ( axi_req_t                   ),
-    .axi_rsp_t             ( axi_rsp_t                   )
+    .axi_rsp_t             ( axi_rsp_t                   ),
+    .sram_cfg_t            ( sram_cfg_t                  )
   ) i_cache_subsystem (
     // to D$
     .clk_i                 ( clk_i                       ),
@@ -719,6 +732,12 @@ module ariane import ariane_pkg::*; #(
     .busy_o                ( busy_cache_ctrl             ),
     .stall_i               ( stall_ctrl_cache            ),
     .init_ni               ( init_ctrl_cache_n           ),
+    // SRAM config
+    .sram_cfg_idata_i        ( sram_cfg_idata_i          ),
+    .sram_cfg_itag_i         ( sram_cfg_itag_i           ),
+    .sram_cfg_ddata_i        ( sram_cfg_ddata_i          ),
+    .sram_cfg_dtag_i         ( sram_cfg_dtag_i           ),
+    .sram_cfg_dvalid_dirty_i ( sram_cfg_dvalid_dirty_i   ),
     // I$
     .icache_en_i           ( icache_en_csr               ),
     .icache_flush_i        ( icache_flush_ctrl_cache     ),
diff --git a/src/cache_subsystem/cva6_icache.sv b/src/cache_subsystem/cva6_icache.sv
index e2d703e..d4e9563 100644
--- a/src/cache_subsystem/cva6_icache.sv
+++ b/src/cache_subsystem/cva6_icache.sv
@@ -27,11 +27,16 @@
 
 module cva6_icache import ariane_pkg::*; import wt_cache_pkg::*; #(
   parameter logic [CACHE_ID_WIDTH-1:0]  RdTxId             = 0,                                  // ID to be used for read transactions
-  parameter ariane_pkg::ariane_cfg_t    ArianeCfg          = ariane_pkg::ArianeDefaultConfig     // contains cacheable regions
+  parameter ariane_pkg::ariane_cfg_t    ArianeCfg          = ariane_pkg::ArianeDefaultConfig,    // contains cacheable regions
+  parameter type                        sram_cfg_t         = logic
 ) (
   input  logic                      clk_i,
   input  logic                      rst_ni,
 
+  // SRAM config
+  input sram_cfg_t                  sram_cfg_data_i,
+  input sram_cfg_t                  sram_cfg_tag_i,
+
   input  logic                      flush_i,              // flush the icache, flush and kill have to be asserted together
   input  logic                      en_i,                 // enable icache
   output logic                      miss_o,               // to performance counter
@@ -417,6 +422,7 @@ end else begin : gen_piton_offset
   for (genvar i = 0; i < ICACHE_SET_ASSOC; i++) begin : gen_sram
     // Tag RAM
     tc_sram #(
+      .impl_in_t ( sram_cfg_t         ),
       // tag + valid bit
       .DataWidth ( ICACHE_TAG_WIDTH+1 ),
       .NumWords  ( ICACHE_NUM_WORDS   ),
@@ -424,6 +430,8 @@ end else begin : gen_piton_offset
     ) tag_sram (
       .clk_i     ( clk_i                    ),
       .rst_ni    ( rst_ni                   ),
+      .impl_i    ( sram_cfg_tag_i           ),
+      .impl_o    (  ),
       .req_i     ( vld_req[i]               ),
       .we_i      ( vld_we                   ),
       .addr_i    ( vld_addr                 ),
@@ -439,12 +447,15 @@ end else begin : gen_piton_offset
 
     // Data RAM
     tc_sram #(
+      .impl_in_t ( sram_cfg_t        ),
       .DataWidth ( ICACHE_LINE_WIDTH ),
       .NumWords  ( ICACHE_NUM_WORDS  ),
       .NumPorts  ( 1                 )
     ) data_sram (
       .clk_i     ( clk_i               ),
       .rst_ni    ( rst_ni              ),
+      .impl_i    ( sram_cfg_data_i     ),
+      .impl_o    (  ),
       .req_i     ( cl_req[i]           ),
       .we_i      ( cl_we               ),
       .addr_i    ( cl_index            ),
diff --git a/src/cache_subsystem/cva6_icache_axi_wrapper.sv b/src/cache_subsystem/cva6_icache_axi_wrapper.sv
index 114ec6e..f741d33 100644
--- a/src/cache_subsystem/cva6_icache_axi_wrapper.sv
+++ b/src/cache_subsystem/cva6_icache_axi_wrapper.sv
@@ -20,12 +20,17 @@ module cva6_icache_axi_wrapper import ariane_pkg::*; import wt_cache_pkg::*; #(
   parameter int unsigned AxiIdWidth   = 0,
   parameter int unsigned AxiUserWidth = 0,
   parameter type axi_req_t = ariane_axi::req_t,
-  parameter type axi_rsp_t = ariane_axi::resp_t
+  parameter type axi_rsp_t = ariane_axi::resp_t,
+  parameter type sram_cfg_t = logic
 ) (
   input  logic              clk_i,
   input  logic              rst_ni,
   input riscv::priv_lvl_t   priv_lvl_i,
 
+  // SRAM config
+  input sram_cfg_t          sram_cfg_data_i,
+  input sram_cfg_t          sram_cfg_tag_i,
+
   input  logic              flush_i,     // flush the icache, flush and kill have to be asserted together
   input  logic              en_i,        // enable icache
   output logic              miss_o,      // to performance counter
@@ -104,10 +109,13 @@ module cva6_icache_axi_wrapper import ariane_pkg::*; import wt_cache_pkg::*; #(
   cva6_icache #(
     // use ID 0 for icache reads
     .RdTxId             ( 0             ),
-    .ArianeCfg          ( ArianeCfg     )
+    .ArianeCfg          ( ArianeCfg     ),
+    .sram_cfg_t         ( sram_cfg_t    )
   ) i_cva6_icache (
     .clk_i              ( clk_i               ),
     .rst_ni             ( rst_ni              ),
+    .sram_cfg_data_i    ( sram_cfg_data_i     ),
+    .sram_cfg_tag_i     ( sram_cfg_tag_i      ),
     .flush_i            ( flush_i             ),
     .en_i               ( en_i                ),
     .miss_o             ( miss_o              ),
diff --git a/src/cache_subsystem/std_cache_subsystem.sv b/src/cache_subsystem/std_cache_subsystem.sv
index 30b5aab..3fe4566 100644
--- a/src/cache_subsystem/std_cache_subsystem.sv
+++ b/src/cache_subsystem/std_cache_subsystem.sv
@@ -25,7 +25,8 @@ module std_cache_subsystem import ariane_pkg::*; import std_cache_pkg::*; #(
     parameter type axi_aw_chan_t = ariane_axi::aw_chan_t,
     parameter type axi_w_chan_t  = ariane_axi::w_chan_t,
     parameter type axi_req_t = ariane_axi::req_t,
-    parameter type axi_rsp_t = ariane_axi::resp_t
+    parameter type axi_rsp_t = ariane_axi::resp_t,
+    parameter type sram_cfg_t = logic
 ) (
     input  logic                           clk_i,
     input  logic                           rst_ni,
@@ -33,6 +34,12 @@ module std_cache_subsystem import ariane_pkg::*; import std_cache_pkg::*; #(
     output logic                           busy_o,
     input  logic                           stall_i,                // stall new memory requests
     input  logic                           init_ni,                // do not init after reset
+    // SRAM config
+    input sram_cfg_t                       sram_cfg_idata_i,
+    input sram_cfg_t                       sram_cfg_itag_i,
+    input sram_cfg_t                       sram_cfg_ddata_i,
+    input sram_cfg_t                       sram_cfg_dtag_i,
+    input sram_cfg_t                       sram_cfg_dvalid_dirty_i,
     // I$
     input  logic                           icache_en_i,            // enable icache (or bypass e.g: in debug mode)
     input  logic                           icache_flush_i,         // flush the icache, flush and kill have to be asserted together
@@ -82,11 +89,14 @@ module std_cache_subsystem import ariane_pkg::*; import std_cache_pkg::*; #(
         .AxiIdWidth   ( AxiIdWidth   ),
         .AxiUserWidth ( AxiUserWidth ),
         .axi_req_t    ( axi_req_t    ),
-        .axi_rsp_t    ( axi_rsp_t    )
+        .axi_rsp_t    ( axi_rsp_t    ),
+        .sram_cfg_t   ( sram_cfg_t   )
     ) i_cva6_icache_axi_wrapper (
         .clk_i      ( clk_i                 ),
         .rst_ni     ( rst_ni                ),
         .priv_lvl_i ( priv_lvl_i            ),
+        .sram_cfg_data_i ( sram_cfg_idata_i ),
+        .sram_cfg_tag_i  ( sram_cfg_itag_i  ),
         .flush_i    ( icache_flush_i        ),
         .en_i       ( icache_en_i           ),
         .miss_o     ( icache_miss_o         ),
@@ -110,10 +120,14 @@ module std_cache_subsystem import ariane_pkg::*; import std_cache_pkg::*; #(
       .AXI_DATA_WIDTH   ( AxiDataWidth                   ),
       .AXI_ID_WIDTH     ( AxiIdWidth                     ),
       .axi_req_t        ( axi_req_t                      ),
-      .axi_rsp_t        ( axi_rsp_t                      )
+      .axi_rsp_t        ( axi_rsp_t                      ),
+      .sram_cfg_t       ( sram_cfg_t                     )
    ) i_nbdcache (
       .clk_i,
       .rst_ni,
+      .sram_cfg_data_i ( sram_cfg_ddata_i    ),
+      .sram_cfg_tag_i  ( sram_cfg_dtag_i     ),
+      .sram_cfg_valid_dirty_i ( sram_cfg_dvalid_dirty_i ),
       .enable_i     ( dcache_enable_i        ),
       .flush_i      ( dcache_flush_i         ),
       .flush_ack_o  ( dcache_flush_ack_o     ),
diff --git a/src/cache_subsystem/std_nbdcache.sv b/src/cache_subsystem/std_nbdcache.sv
index 3658597..5703bd1 100644
--- a/src/cache_subsystem/std_nbdcache.sv
+++ b/src/cache_subsystem/std_nbdcache.sv
@@ -19,10 +19,15 @@ module std_nbdcache import std_cache_pkg::*; import ariane_pkg::*; #(
     parameter int unsigned AXI_DATA_WIDTH   = 0,
     parameter int unsigned AXI_ID_WIDTH     = 0,
     parameter type axi_req_t = ariane_axi::req_t,
-    parameter type axi_rsp_t = ariane_axi::resp_t
+    parameter type axi_rsp_t = ariane_axi::resp_t,
+    parameter type sram_cfg_t = logic
 )(
     input  logic                           clk_i,       // Clock
     input  logic                           rst_ni,      // Asynchronous reset active low
+    // SRAM config
+    input sram_cfg_t                       sram_cfg_data_i,
+    input sram_cfg_t                       sram_cfg_tag_i,
+    input sram_cfg_t                       sram_cfg_valid_dirty_i,
     // Cache management
     input  logic                           enable_i,    // from CSR
     input  logic                           flush_i,     // high until acknowledged
@@ -184,12 +189,15 @@ import std_cache_pkg::*;
     // --------------
     for (genvar i = 0; i < DCACHE_SET_ASSOC; i++) begin : sram_block
         tc_sram #(
+            .impl_in_t ( sram_cfg_t                         ),
             .DataWidth ( DCACHE_LINE_WIDTH                  ),
             .NumWords  ( DCACHE_NUM_WORDS                   ),
             .NumPorts  ( 1                                  )
         ) data_sram (
             .req_i   ( req_ram [i]                          ),
             .rst_ni  ( rst_ni                               ),
+            .impl_i  ( sram_cfg_data_i                      ),
+            .impl_o  (  ),
             .we_i    ( we_ram                               ),
             .addr_i  ( addr_ram[DCACHE_INDEX_WIDTH-1:DCACHE_BYTE_OFFSET]  ),
             .wdata_i ( wdata_ram.data                       ),
@@ -199,12 +207,15 @@ import std_cache_pkg::*;
         );
 
         tc_sram #(
+            .impl_in_t ( sram_cfg_t                         ),
             .DataWidth ( DCACHE_TAG_WIDTH                   ),
             .NumWords  ( DCACHE_NUM_WORDS                   ),
             .NumPorts  ( 1                                  )
         ) tag_sram (
             .req_i   ( req_ram [i]                          ),
             .rst_ni  ( rst_ni                               ),
+            .impl_i  ( sram_cfg_tag_i                       ),
+            .impl_o  (  ),
             .we_i    ( we_ram                               ),
             .addr_i  ( addr_ram[DCACHE_INDEX_WIDTH-1:DCACHE_BYTE_OFFSET]  ),
             .wdata_i ( wdata_ram.tag                        ),
@@ -232,12 +243,15 @@ import std_cache_pkg::*;
     end
 
     tc_sram #(
+        .impl_in_t ( sram_cfg_t                       ),
         .DataWidth ( 4*DCACHE_DIRTY_WIDTH             ),
         .NumWords  ( DCACHE_NUM_WORDS                 ),
         .NumPorts  ( 1                                )
     ) valid_dirty_sram (
         .clk_i   ( clk_i                               ),
         .rst_ni  ( rst_ni                              ),
+        .impl_i  ( sram_cfg_valid_dirty_i              ),
+        .impl_o  (  ),
         .req_i   ( |req_ram                            ),
         .we_i    ( we_ram                              ),
         .addr_i  ( addr_ram[DCACHE_INDEX_WIDTH-1:DCACHE_BYTE_OFFSET] ),
diff --git a/src/cache_subsystem/wt_cache_subsystem.sv b/src/cache_subsystem/wt_cache_subsystem.sv
index c47088a..b6b2a28 100644
--- a/src/cache_subsystem/wt_cache_subsystem.sv
+++ b/src/cache_subsystem/wt_cache_subsystem.sv
@@ -26,13 +26,19 @@ module wt_cache_subsystem import ariane_pkg::*; import wt_cache_pkg::*; #(
   parameter int unsigned AxiIdWidth   = 0,
   parameter int unsigned AxiUserWidth = 0,
   parameter type axi_req_t = ariane_axi::req_t,
-  parameter type axi_rsp_t = ariane_axi::resp_t
+  parameter type axi_rsp_t = ariane_axi::resp_t,
+  parameter type sram_cfg_t = logic
 ) (
   input  logic                           clk_i,
   input  logic                           rst_ni,
   output logic                           busy_o,
   input  logic                           stall_i,                // stall new memory requests
   input  logic                           init_ni,
+  // SRAM config
+  input sram_cfg_t                       sram_cfg_idata_i,
+  input sram_cfg_t                       sram_cfg_itag_i,
+  input sram_cfg_t                       sram_cfg_ddata_i,
+  input sram_cfg_t                       sram_cfg_dtag_i,
   // I$
   input  logic                           icache_en_i,            // enable icache (or bypass e.g: in debug mode)
   input  logic                           icache_flush_i,         // flush the icache, flush and kill have to be asserted together
@@ -87,11 +93,14 @@ module wt_cache_subsystem import ariane_pkg::*; import wt_cache_pkg::*; #(
   cva6_icache #(
     // use ID 0 for icache reads
     .RdTxId             ( 0             ),
-    .ArianeCfg          ( ArianeCfg     )
+    .ArianeCfg          ( ArianeCfg     ),
+    .sram_cfg_t         ( sram_cfg_t    )
   ) i_cva6_icache (
     .clk_i              ( clk_i                   ),
     .rst_ni             ( rst_ni                  ),
     .flush_i            ( icache_flush_i          ),
+    .sram_cfg_data_i    ( sram_cfg_idata_i        ),
+    .sram_cfg_tag_i     ( sram_cfg_itag_i         ),
     .en_i               ( icache_en_i             ),
     .miss_o             ( icache_miss_o           ),
     .busy_o             ( icache_busy             ),
@@ -116,10 +125,13 @@ module wt_cache_subsystem import ariane_pkg::*; import wt_cache_pkg::*; #(
     // use ID 1 for dcache reads and amos. note that the writebuffer
     // uses all IDs up to DCACHE_MAX_TX-1 for write transactions.
     .RdAmoTxId       ( 1             ),
-    .ArianeCfg       ( ArianeCfg     )
+    .ArianeCfg       ( ArianeCfg     ),
+    .sram_cfg_t      ( sram_cfg_t    )
   ) i_wt_dcache (
     .clk_i           ( clk_i                   ),
     .rst_ni          ( rst_ni                  ),
+    .sram_cfg_data_i ( sram_cfg_ddata_i        ),
+    .sram_cfg_tag_i  ( sram_cfg_dtag_i         ),
     .enable_i        ( dcache_enable_i         ),
     .busy_o          ( dcache_busy             ),
     .stall_i         ( stall_i                 ),
diff --git a/src/cache_subsystem/wt_dcache.sv b/src/cache_subsystem/wt_dcache.sv
index 7f4bc6a..fc347ea 100644
--- a/src/cache_subsystem/wt_dcache.sv
+++ b/src/cache_subsystem/wt_dcache.sv
@@ -18,11 +18,16 @@ module wt_dcache import ariane_pkg::*; import wt_cache_pkg::*; #(
   // note that the write buffer uses all IDs up to DCACHE_MAX_TX-1 for write transactions
   parameter logic [CACHE_ID_WIDTH-1:0]   RdAmoTxId          = 1,
   // contains cacheable regions
-  parameter ariane_pkg::ariane_cfg_t     ArianeCfg          = ariane_pkg::ArianeDefaultConfig
+  parameter ariane_pkg::ariane_cfg_t     ArianeCfg          = ariane_pkg::ArianeDefaultConfig,
+  parameter type                         sram_cfg_t         = logic
 ) (
   input  logic                           clk_i,       // Clock
   input  logic                           rst_ni,      // Asynchronous reset active low
 
+  // SRAM config
+  input sram_cfg_t                       sram_cfg_data_i,
+  input sram_cfg_t                       sram_cfg_tag_i,
+
   // Cache management
   input  logic                           enable_i,    // from CSR
   input  logic                           flush_i,     // high until acknowledged
@@ -280,10 +285,14 @@ module wt_dcache import ariane_pkg::*; import wt_cache_pkg::*; #(
 
   wt_dcache_mem #(
     .Axi64BitCompliant ( ArianeCfg.Axi64BitCompliant ),
-    .NumPorts          ( NumPorts                    )
+    .NumPorts          ( NumPorts                    ),
+    .sram_cfg_t        ( sram_cfg_t                  )
   ) i_wt_dcache_mem (
     .clk_i             ( clk_i              ),
     .rst_ni            ( rst_ni             ),
+    // SRAM config
+    .sram_cfg_data_i   ( sram_cfg_data_i    ),
+    .sram_cfg_tag_i    ( sram_cfg_tag_i     ),
     // read ports
     .rd_prio_i         ( rd_prio            ),
     .rd_tag_i          ( rd_tag             ),
diff --git a/src/cache_subsystem/wt_dcache_mem.sv b/src/cache_subsystem/wt_dcache_mem.sv
index 979c8f3..2b1cef1 100644
--- a/src/cache_subsystem/wt_dcache_mem.sv
+++ b/src/cache_subsystem/wt_dcache_mem.sv
@@ -28,11 +28,16 @@
 
 module wt_dcache_mem import ariane_pkg::*; import wt_cache_pkg::*; #(
   parameter bit          Axi64BitCompliant  = 1'b0, // set this to 1 when using in conjunction with 64bit AXI bus adapter
-  parameter int unsigned NumPorts           = 3
+  parameter int unsigned NumPorts           = 3,
+  parameter type         sram_cfg_t         = logic
 ) (
   input  logic                                              clk_i,
   input  logic                                              rst_ni,
 
+  // SRAM config
+  input sram_cfg_t                                          sram_cfg_data_i,
+  input sram_cfg_t                                          sram_cfg_tag_i,
+
   // ports
   input  logic  [NumPorts-1:0][DCACHE_TAG_WIDTH-1:0]        rd_tag_i,           // tag in - comes one cycle later
   input  logic  [NumPorts-1:0][DCACHE_CL_IDX_WIDTH-1:0]     rd_idx_i,
@@ -253,12 +258,15 @@ module wt_dcache_mem import ariane_pkg::*; import wt_cache_pkg::*; #(
   for (genvar k = 0; k < DCACHE_NUM_BANKS; k++) begin : gen_data_banks
     // Data RAM
     tc_sram #(
+      .impl_in_t ( sram_cfg_t                        ),
       .DataWidth ( ariane_pkg::DCACHE_SET_ASSOC * 64 ),
       .NumWords  ( wt_cache_pkg::DCACHE_NUM_WORDS    ),
       .NumPorts  ( 1                                 )
     ) i_data_sram (
       .clk_i      ( clk_i               ),
       .rst_ni     ( rst_ni              ),
+      .impl_i     ( sram_cfg_data_i     ),
+      .impl_o    (  ),
       .req_i      ( bank_req   [k]      ),
       .we_i       ( bank_we    [k]      ),
       .addr_i     ( bank_idx   [k]      ),
@@ -275,6 +283,7 @@ module wt_dcache_mem import ariane_pkg::*; import wt_cache_pkg::*; #(
 
     // Tag RAM
     tc_sram #(
+      .impl_in_t ( sram_cfg_t                       ),
       // tag + valid bit
       .DataWidth ( ariane_pkg::DCACHE_TAG_WIDTH + 1 ),
       .NumWords  ( wt_cache_pkg::DCACHE_NUM_WORDS   ),
@@ -282,6 +291,8 @@ module wt_dcache_mem import ariane_pkg::*; import wt_cache_pkg::*; #(
     ) i_tag_sram (
       .clk_i     ( clk_i               ),
       .rst_ni    ( rst_ni              ),
+      .impl_i    ( sram_cfg_tag_i      ),
+      .impl_o    (  ),
       .req_i     ( vld_req[i]          ),
       .we_i      ( vld_we              ),
       .addr_i    ( vld_addr            ),
-- 
2.16.5

