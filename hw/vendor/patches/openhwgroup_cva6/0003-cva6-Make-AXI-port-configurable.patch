From f0248aedd6c6a0e7d6e1d9fbdba673e1f0e0e95a Mon Sep 17 00:00:00 2001
From: Florian Zaruba <zarubaf@iis.ee.ethz.ch>
Date: Wed, 7 Apr 2021 18:06:53 +0200
Subject: [PATCH] cva6: Make AXI port configurable

---
 src/ariane.sv                             | 20 ++++++++++++++----
 src/axi_shim.sv                           | 25 +++++++++++++++++------
 src/cache_subsystem/wt_axi_adapter.sv     | 25 ++++++++++++++++-------
 src/cache_subsystem/wt_cache_subsystem.sv | 21 +++++++++++++++----
 src/csr_regfile.sv                        |  2 +-
 5 files changed, 71 insertions(+), 22 deletions(-)

diff --git a/src/ariane.sv b/src/ariane.sv
index 409433b..111d494 100644
--- a/src/ariane.sv
+++ b/src/ariane.sv
@@ -24,7 +24,13 @@ import "DPI-C" function void init_dromajo(string cfg_f_name);
 
 
 module ariane import ariane_pkg::*; #(
-  parameter ariane_pkg::ariane_cfg_t ArianeCfg     = ariane_pkg::ArianeDefaultConfig
+  parameter ariane_pkg::ariane_cfg_t ArianeCfg     = ariane_pkg::ArianeDefaultConfig,
+  parameter int unsigned AxiAddrWidth = ariane_axi::AddrWidth,
+  parameter int unsigned AxiDataWidth = ariane_axi::DataWidth,
+  parameter int unsigned AxiIdWidth   = ariane_axi::IdWidth,
+  parameter int unsigned AxiUserWidth = ariane_axi::UserWidth,
+  parameter type axi_req_t = ariane_axi::req_t,
+  parameter type axi_rsp_t = ariane_axi::resp_t
 ) (
   input  logic                         clk_i,
   input  logic                         rst_ni,
@@ -48,8 +54,8 @@ module ariane import ariane_pkg::*; #(
   input  wt_cache_pkg::l15_rtrn_t      l15_rtrn_i
 `else
   // memory side, AXI Master
-  output ariane_axi::req_t             axi_req_o,
-  input  ariane_axi::resp_t            axi_resp_i
+  output axi_req_t                     axi_req_o,
+  input  axi_rsp_t                     axi_resp_i
 `endif
 );
 
@@ -611,7 +617,13 @@ module ariane import ariane_pkg::*; #(
 `ifdef WT_DCACHE
   // this is a cache subsystem that is compatible with OpenPiton
   wt_cache_subsystem #(
-    .ArianeCfg            ( ArianeCfg     )
+    .ArianeCfg            ( ArianeCfg ),
+    .AxiAddrWidth         ( AxiAddrWidth ),
+    .AxiDataWidth         ( AxiDataWidth ),
+    .AxiIdWidth           ( AxiIdWidth ),
+    .AxiUserWidth         ( AxiUserWidth ),
+    .axi_req_t            ( axi_req_t ),
+    .axi_rsp_t            ( axi_rsp_t )
   ) i_cache_subsystem (
     // to D$
     .clk_i                 ( clk_i                       ),
diff --git a/src/axi_shim.sv b/src/axi_shim.sv
index 5b38aa7..4c5cd70 100644
--- a/src/axi_shim.sv
+++ b/src/axi_shim.sv
@@ -21,7 +21,12 @@
 
 module axi_shim #(
   parameter int unsigned AxiNumWords = 4, // data width in dwords, this is also the maximum burst length, must be >=2
-  parameter int unsigned AxiIdWidth  = 4  // stick to the spec
+  parameter int unsigned AxiAddrWidth = 0,
+  parameter int unsigned AxiDataWidth = 0,
+  parameter int unsigned AxiIdWidth   = 0,
+  parameter int unsigned AxiUserWidth = 0,
+  parameter type axi_req_t = ariane_axi::req_t,
+  parameter type axi_rsp_t = ariane_axi::resp_t
 ) (
   input  logic                            clk_i,  // Clock
   input  logic                            rst_ni, // Asynchronous reset active low
@@ -58,8 +63,8 @@ module axi_shim #(
   output logic [AxiIdWidth-1:0]           wr_id_o,
   output logic                            wr_exokay_o, // indicates whether exclusive tx succeeded
   // AXI port
-  output ariane_axi::req_t                axi_req_o,
-  input  ariane_axi::resp_t               axi_resp_i
+  output axi_req_t                        axi_req_o,
+  input  axi_rsp_t                        axi_resp_i
 );
   localparam AddrIndex = ($clog2(AxiNumWords) > 0) ? $clog2(AxiNumWords) : 1;
 
@@ -79,7 +84,7 @@ module axi_shim #(
 
   // address
   assign axi_req_o.aw.burst  = axi_pkg::BURST_INCR; // Use BURST_INCR for AXI regular transaction
-  assign axi_req_o.aw.addr   = wr_addr_i;
+  assign axi_req_o.aw.addr   = wr_addr_i[AxiAddrWidth-1:0];
   assign axi_req_o.aw.size   = wr_size_i;
   assign axi_req_o.aw.len    = wr_blen_i;
   assign axi_req_o.aw.id     = wr_id_i;
@@ -89,10 +94,13 @@ module axi_shim #(
   assign axi_req_o.aw.cache  = 4'b0;
   assign axi_req_o.aw.qos    = 4'b0;
   assign axi_req_o.aw.atop   = wr_atop_i;
+  assign axi_req_o.aw.user   = '0;
+
   // data
   assign axi_req_o.w.data    = wr_data_i[wr_cnt_q];
   assign axi_req_o.w.strb    = wr_be_i[wr_cnt_q];
   assign axi_req_o.w.last    = wr_cnt_done;
+  assign axi_req_o.w.user   = '0;
 
   // write response
   assign wr_exokay_o         = (axi_resp_i.b.resp == axi_pkg::RESP_EXOKAY);
@@ -235,7 +243,7 @@ module axi_shim #(
   // in case of a wrapping transfer we can simply begin at the address, if we want to request a cache-line
   // with an incremental transfer we need to output the corresponding base address of the cache line
   assign axi_req_o.ar.burst  = axi_pkg::BURST_INCR; // Use BURST_INCR for AXI regular transaction
-  assign axi_req_o.ar.addr   = rd_addr_i;
+  assign axi_req_o.ar.addr   = rd_addr_i[AxiAddrWidth-1:0];
   assign axi_req_o.ar.size   = rd_size_i;
   assign axi_req_o.ar.len    = rd_blen_i;
   assign axi_req_o.ar.id     = rd_id_i;
@@ -244,6 +252,7 @@ module axi_shim #(
   assign axi_req_o.ar.lock   = rd_lock_i;
   assign axi_req_o.ar.cache  = 4'b0;
   assign axi_req_o.ar.qos    = 4'b0;
+  assign axi_req_o.ar.user   = '0;
 
   // make the read request
   assign axi_req_o.ar_valid  = rd_req_i;
@@ -280,7 +289,11 @@ module axi_shim #(
 `ifndef VERILATOR
    initial begin
     assert (AxiNumWords >= 1) else
-     $fatal(1,"[axi adapter] AxiNumWords must be >= 1");
+     $fatal(1, "[axi adapter] AxiNumWords must be >= 1");
+    assert (AxiDataWidth == 64) else
+     $fatal(1, "[axi adapter] AXI data width must be 64");
+    assert (AxiIdWidth >= 2) else
+     $fatal(1, "[axi adapter] AXI id width must be at least 2 bit wide");
    end
 `endif
 //pragma translate_on
diff --git a/src/cache_subsystem/wt_axi_adapter.sv b/src/cache_subsystem/wt_axi_adapter.sv
index 20c638d..14c50f9 100644
--- a/src/cache_subsystem/wt_axi_adapter.sv
+++ b/src/cache_subsystem/wt_axi_adapter.sv
@@ -16,7 +16,13 @@
 
 module wt_axi_adapter import ariane_pkg::*; import wt_cache_pkg::*; #(
   parameter int unsigned ReqFifoDepth  = 2,
-  parameter int unsigned MetaFifoDepth = wt_cache_pkg::DCACHE_MAX_TX
+  parameter int unsigned MetaFifoDepth = wt_cache_pkg::DCACHE_MAX_TX,
+  parameter int unsigned AxiAddrWidth = 0,
+  parameter int unsigned AxiDataWidth = 0,
+  parameter int unsigned AxiIdWidth   = 0,
+  parameter int unsigned AxiUserWidth = 0,
+  parameter type axi_req_t = ariane_axi::req_t,
+  parameter type axi_rsp_t = ariane_axi::resp_t
 ) (
   input logic                  clk_i,
   input logic                  rst_ni,
@@ -38,8 +44,8 @@ module wt_axi_adapter import ariane_pkg::*; import wt_cache_pkg::*; #(
   output dcache_rtrn_t         dcache_rtrn_o,
 
   // AXI port
-  output ariane_axi::req_t    axi_req_o,
-  input  ariane_axi::resp_t   axi_resp_i
+  output axi_req_t             axi_req_o,
+  input  axi_rsp_t             axi_resp_i
 );
 
   // support up to 512bit cache lines
@@ -66,7 +72,7 @@ module wt_axi_adapter import ariane_pkg::*; import wt_cache_pkg::*; #(
   logic [63:0]                    axi_rd_addr, axi_wr_addr;
   logic [$clog2(AxiNumWords)-1:0] axi_rd_blen, axi_wr_blen;
   logic [1:0] axi_rd_size, axi_wr_size;
-  logic [$size(axi_resp_i.r.id)-1:0] axi_rd_id_in, axi_wr_id_in, axi_rd_id_out, axi_wr_id_out, wr_id_out;
+  logic [AxiIdWidth-1:0] axi_rd_id_in, axi_wr_id_in, axi_rd_id_out, axi_wr_id_out, wr_id_out;
   logic [AxiNumWords-1:0][63:0] axi_wr_data;
   logic [63:0] axi_rd_data;
   logic [AxiNumWords-1:0][7:0]  axi_wr_be;
@@ -334,7 +340,7 @@ module wt_axi_adapter import ariane_pkg::*; import wt_cache_pkg::*; #(
   assign b_push              = axi_wr_valid & axi_wr_rdy;
 
   fifo_v3 #(
-    .DATA_WIDTH   ( $size(axi_resp_i.r.id) + 1 ),
+    .DATA_WIDTH   ( AxiIdWidth + 1 ),
     .DEPTH        ( MetaFifoDepth              ),
     .FALL_THROUGH ( 1'b1                       )
   ) i_b_fifo (
@@ -538,8 +544,13 @@ module wt_axi_adapter import ariane_pkg::*; import wt_cache_pkg::*; #(
 ///////////////////////////////////////////////////////
 
   axi_shim #(
-    .AxiNumWords     ( AxiNumWords            ),
-    .AxiIdWidth      ( $size(axi_resp_i.r.id) )
+    .AxiNumWords     ( AxiNumWords  ),
+    .AxiAddrWidth    ( AxiAddrWidth ),
+    .AxiDataWidth    ( AxiDataWidth ),
+    .AxiIdWidth      ( AxiIdWidth   ),
+    .AxiUserWidth    ( AxiUserWidth ),
+    .axi_req_t       ( axi_req_t    ),
+    .axi_rsp_t       ( axi_rsp_t    )
   ) i_axi_shim (
     .clk_i           ( clk_i             ),
     .rst_ni          ( rst_ni            ),
diff --git a/src/cache_subsystem/wt_cache_subsystem.sv b/src/cache_subsystem/wt_cache_subsystem.sv
index d3e39c8..d747d40 100644
--- a/src/cache_subsystem/wt_cache_subsystem.sv
+++ b/src/cache_subsystem/wt_cache_subsystem.sv
@@ -20,7 +20,13 @@
 
 
 module wt_cache_subsystem import ariane_pkg::*; import wt_cache_pkg::*; #(
-  parameter ariane_pkg::ariane_cfg_t ArianeCfg       = ariane_pkg::ArianeDefaultConfig  // contains cacheable regions
+  parameter ariane_pkg::ariane_cfg_t ArianeCfg       = ariane_pkg::ArianeDefaultConfig,  // contains cacheable regions
+  parameter int unsigned AxiAddrWidth = 0,
+  parameter int unsigned AxiDataWidth = 0,
+  parameter int unsigned AxiIdWidth   = 0,
+  parameter int unsigned AxiUserWidth = 0,
+  parameter type axi_req_t = ariane_axi::req_t,
+  parameter type axi_rsp_t = ariane_axi::resp_t
 ) (
   input logic                            clk_i,
   input logic                            rst_ni,
@@ -55,8 +61,8 @@ module wt_cache_subsystem import ariane_pkg::*; import wt_cache_pkg::*; #(
   input  l15_rtrn_t                      l15_rtrn_i
 `else
   // memory side
-  output ariane_axi::req_t               axi_req_o,
-  input  ariane_axi::resp_t              axi_resp_i
+  output axi_req_t                       axi_req_o,
+  input  axi_rsp_t                       axi_resp_i
 `endif
   // TODO: interrupt interface
 );
@@ -147,7 +153,14 @@ module wt_cache_subsystem import ariane_pkg::*; import wt_cache_pkg::*; #(
     .l15_rtrn_i         ( l15_rtrn_i              )
   );
 `else
-  wt_axi_adapter i_adapter (
+  wt_axi_adapter #(
+    .AxiAddrWidth       ( AxiAddrWidth ),
+    .AxiDataWidth       ( AxiDataWidth ),
+    .AxiIdWidth         ( AxiIdWidth ),
+    .AxiUserWidth       ( AxiUserWidth ),
+    .axi_req_t          ( axi_req_t ),
+    .axi_rsp_t          ( axi_rsp_t )
+  ) i_adapter (
     .clk_i              ( clk_i                   ),
     .rst_ni             ( rst_ni                  ),
     .icache_data_req_i  ( icache_adapter_data_req ),
diff --git a/src/csr_regfile.sv b/src/csr_regfile.sv
index 18a88fb..71f3b2a 100644
--- a/src/csr_regfile.sv
+++ b/src/csr_regfile.sv
@@ -1169,7 +1169,7 @@ module csr_regfile import ariane_pkg::*; #(
     `ifndef VERILATOR
         // check that eret and ex are never valid together
         assert property (
-          @(posedge clk_i) !(eret_o && ex_i.valid))
+          @(posedge clk_i) disable iff (!rst_ni !== '0) !(eret_o && ex_i.valid))
         else begin $error("eret and exception should never be valid at the same time"); $stop(); end
     `endif
     //pragma translate_on
-- 
2.25.1.377.g2d2118b814

