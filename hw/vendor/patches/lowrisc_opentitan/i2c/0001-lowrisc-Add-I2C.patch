From 39aa4006250fd1535fb16114d8e55f5bfd50c330 Mon Sep 17 00:00:00 2001
From: Florian Zaruba <zarubaf@iis.ee.ethz.ch>
Date: Mon, 5 Apr 2021 14:53:18 +0200
Subject: [PATCH] lowrisc: Add I2C

---
 Bender.yml         |  14 ++
 data/i2c.hjson     |   4 +-
 rtl/i2c.sv         |  23 ++--
 rtl/i2c_reg_pkg.sv | 146 +++++++++------------
 rtl/i2c_reg_top.sv | 310 +++++++++++++++++++--------------------------
 5 files changed, 214 insertions(+), 283 deletions(-)
 create mode 100644 hw/vendor/lowrisc_opentitan/i2c/Bender.yml

diff --git a/Bender.yml b/Bender.yml
new file mode 100644
index 0000000..0bbeedb
--- /dev/null
+++ b/Bender.yml
@@ -0,0 +1,14 @@
+package:
+  name: lowrisc_i2c
+  description: "lowRISC I2C"
+  authors: ["lowRISC Contributors"]
+
+dependencies:
+  lowrisc_prim: {path: ../prim}
+
+sources:
+- rtl/i2c_reg_pkg.sv
+- rtl/i2c_reg_top.sv
+- rtl/i2c_fsm.sv
+- rtl/i2c_core.sv
+- rtl/i2c.sv
diff --git a/data/i2c.hjson b/data/i2c.hjson
index b14ce8a..f1e5e19 100644
--- a/data/i2c.hjson
+++ b/data/i2c.hjson
@@ -4,9 +4,7 @@
 
 { name: "i2c"
   clock_primary: "clk_i"
-  bus_interfaces: [
-    { protocol: "tlul", direction: "device" }
-  ],
+  bus_device: "reg",
   // INPUT pins
   available_inout_list: [
     { name: "sda", desc: "Serial input data bit" }
diff --git a/rtl/i2c.sv b/rtl/i2c.sv
index 03038e6..2e15009 100644
--- a/rtl/i2c.sv
+++ b/rtl/i2c.sv
@@ -4,15 +4,18 @@
 //
 // Description: I2C top level wrapper file
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
-module i2c (
+module i2c #(
+  parameter type reg_req_t = logic,
+  parameter type reg_rsp_t = logic
+) (
   input                     clk_i,
   input                     rst_ni,
 
   // Bus Interface
-  input  tlul_pkg::tl_h2d_t tl_i,
-  output tlul_pkg::tl_d2h_t tl_o,
+  input  reg_req_t reg_req_i,
+  output reg_rsp_t reg_rsp_o,
 
   // Generic IO
   input                     cio_scl_i,
@@ -46,14 +49,16 @@ module i2c (
   i2c_reg2hw_t reg2hw;
   i2c_hw2reg_t hw2reg;
 
-  i2c_reg_top u_reg (
+  i2c_reg_top #(
+    .reg_req_t (reg_req_t),
+    .reg_rsp_t (reg_rsp_t)
+  ) u_reg (
     .clk_i,
     .rst_ni,
-    .tl_i,
-    .tl_o,
+    .reg_req_i,
+    .reg_rsp_o,
     .reg2hw,
     .hw2reg,
-    .intg_err_o(),
     .devmode_i(1'b1)
   );
 
@@ -99,8 +104,6 @@ module i2c (
   assign cio_scl_en_o = ~scl_int;
   assign cio_sda_en_o = ~sda_int;
 
-  `ASSERT_KNOWN(TlDValidKnownO_A, tl_o.d_valid)
-  `ASSERT_KNOWN(TlAReadyKnownO_A, tl_o.a_ready)
   `ASSERT_KNOWN(CioSclKnownO_A, cio_scl_o)
   `ASSERT_KNOWN(CioSclEnKnownO_A, cio_scl_en_o)
   `ASSERT_KNOWN(CioSdaKnownO_A, cio_sda_o)
diff --git a/rtl/i2c_reg_pkg.sv b/rtl/i2c_reg_pkg.sv
index 607635a..3bf8b0c 100644
--- a/rtl/i2c_reg_pkg.sv
+++ b/rtl/i2c_reg_pkg.sv
@@ -6,13 +6,9 @@
 
 package i2c_reg_pkg;
 
-  // Address widths within the block
-  parameter int BlockAw = 7;
-
   ////////////////////////////
   // Typedefs for registers //
   ////////////////////////////
-
   typedef struct packed {
     struct packed {
       logic        q;
@@ -366,6 +362,7 @@ package i2c_reg_pkg;
     logic [31:0] q;
   } i2c_reg2hw_host_timeout_ctrl_reg_t;
 
+
   typedef struct packed {
     struct packed {
       logic        d;
@@ -503,94 +500,70 @@ package i2c_reg_pkg;
     } signal;
   } i2c_hw2reg_acqdata_reg_t;
 
-  // Register -> HW type
+
+  ///////////////////////////////////////
+  // Register to internal design logic //
+  ///////////////////////////////////////
   typedef struct packed {
-    i2c_reg2hw_intr_state_reg_t intr_state; // [388:373]
-    i2c_reg2hw_intr_enable_reg_t intr_enable; // [372:357]
-    i2c_reg2hw_intr_test_reg_t intr_test; // [356:325]
-    i2c_reg2hw_ctrl_reg_t ctrl; // [324:323]
-    i2c_reg2hw_rdata_reg_t rdata; // [322:314]
-    i2c_reg2hw_fdata_reg_t fdata; // [313:295]
-    i2c_reg2hw_fifo_ctrl_reg_t fifo_ctrl; // [294:280]
-    i2c_reg2hw_ovrd_reg_t ovrd; // [279:277]
-    i2c_reg2hw_timing0_reg_t timing0; // [276:245]
-    i2c_reg2hw_timing1_reg_t timing1; // [244:213]
-    i2c_reg2hw_timing2_reg_t timing2; // [212:181]
-    i2c_reg2hw_timing3_reg_t timing3; // [180:149]
-    i2c_reg2hw_timing4_reg_t timing4; // [148:117]
-    i2c_reg2hw_timeout_ctrl_reg_t timeout_ctrl; // [116:85]
-    i2c_reg2hw_target_id_reg_t target_id; // [84:57]
-    i2c_reg2hw_acqdata_reg_t acqdata; // [56:45]
-    i2c_reg2hw_txdata_reg_t txdata; // [44:36]
-    i2c_reg2hw_stretch_ctrl_reg_t stretch_ctrl; // [35:32]
-    i2c_reg2hw_host_timeout_ctrl_reg_t host_timeout_ctrl; // [31:0]
+    i2c_reg2hw_intr_state_reg_t intr_state; // [389:374]
+    i2c_reg2hw_intr_enable_reg_t intr_enable; // [373:358]
+    i2c_reg2hw_intr_test_reg_t intr_test; // [357:326]
+    i2c_reg2hw_ctrl_reg_t ctrl; // [325:324]
+    i2c_reg2hw_rdata_reg_t rdata; // [323:315]
+    i2c_reg2hw_fdata_reg_t fdata; // [314:296]
+    i2c_reg2hw_fifo_ctrl_reg_t fifo_ctrl; // [295:281]
+    i2c_reg2hw_ovrd_reg_t ovrd; // [280:278]
+    i2c_reg2hw_timing0_reg_t timing0; // [277:246]
+    i2c_reg2hw_timing1_reg_t timing1; // [245:214]
+    i2c_reg2hw_timing2_reg_t timing2; // [213:182]
+    i2c_reg2hw_timing3_reg_t timing3; // [181:150]
+    i2c_reg2hw_timing4_reg_t timing4; // [149:118]
+    i2c_reg2hw_timeout_ctrl_reg_t timeout_ctrl; // [117:86]
+    i2c_reg2hw_target_id_reg_t target_id; // [85:58]
+    i2c_reg2hw_acqdata_reg_t acqdata; // [57:46]
+    i2c_reg2hw_txdata_reg_t txdata; // [45:37]
+    i2c_reg2hw_stretch_ctrl_reg_t stretch_ctrl; // [36:33]
+    i2c_reg2hw_host_timeout_ctrl_reg_t host_timeout_ctrl; // [32:1]
   } i2c_reg2hw_t;
 
-  // HW -> register type
+  ///////////////////////////////////////
+  // Internal design logic to register //
+  ///////////////////////////////////////
   typedef struct packed {
-    i2c_hw2reg_intr_state_reg_t intr_state; // [115:84]
-    i2c_hw2reg_status_reg_t status; // [83:74]
-    i2c_hw2reg_rdata_reg_t rdata; // [73:66]
-    i2c_hw2reg_fifo_status_reg_t fifo_status; // [65:42]
-    i2c_hw2reg_val_reg_t val; // [41:10]
-    i2c_hw2reg_acqdata_reg_t acqdata; // [9:0]
+    i2c_hw2reg_intr_state_reg_t intr_state; // [116:101]
+    i2c_hw2reg_status_reg_t status; // [100:101]
+    i2c_hw2reg_rdata_reg_t rdata; // [100:92]
+    i2c_hw2reg_fifo_status_reg_t fifo_status; // [91:92]
+    i2c_hw2reg_val_reg_t val; // [91:92]
+    i2c_hw2reg_acqdata_reg_t acqdata; // [91:80]
   } i2c_hw2reg_t;
 
-  // Register offsets
-  parameter logic [BlockAw-1:0] I2C_INTR_STATE_OFFSET = 7'h 0;
-  parameter logic [BlockAw-1:0] I2C_INTR_ENABLE_OFFSET = 7'h 4;
-  parameter logic [BlockAw-1:0] I2C_INTR_TEST_OFFSET = 7'h 8;
-  parameter logic [BlockAw-1:0] I2C_CTRL_OFFSET = 7'h c;
-  parameter logic [BlockAw-1:0] I2C_STATUS_OFFSET = 7'h 10;
-  parameter logic [BlockAw-1:0] I2C_RDATA_OFFSET = 7'h 14;
-  parameter logic [BlockAw-1:0] I2C_FDATA_OFFSET = 7'h 18;
-  parameter logic [BlockAw-1:0] I2C_FIFO_CTRL_OFFSET = 7'h 1c;
-  parameter logic [BlockAw-1:0] I2C_FIFO_STATUS_OFFSET = 7'h 20;
-  parameter logic [BlockAw-1:0] I2C_OVRD_OFFSET = 7'h 24;
-  parameter logic [BlockAw-1:0] I2C_VAL_OFFSET = 7'h 28;
-  parameter logic [BlockAw-1:0] I2C_TIMING0_OFFSET = 7'h 2c;
-  parameter logic [BlockAw-1:0] I2C_TIMING1_OFFSET = 7'h 30;
-  parameter logic [BlockAw-1:0] I2C_TIMING2_OFFSET = 7'h 34;
-  parameter logic [BlockAw-1:0] I2C_TIMING3_OFFSET = 7'h 38;
-  parameter logic [BlockAw-1:0] I2C_TIMING4_OFFSET = 7'h 3c;
-  parameter logic [BlockAw-1:0] I2C_TIMEOUT_CTRL_OFFSET = 7'h 40;
-  parameter logic [BlockAw-1:0] I2C_TARGET_ID_OFFSET = 7'h 44;
-  parameter logic [BlockAw-1:0] I2C_ACQDATA_OFFSET = 7'h 48;
-  parameter logic [BlockAw-1:0] I2C_TXDATA_OFFSET = 7'h 4c;
-  parameter logic [BlockAw-1:0] I2C_STRETCH_CTRL_OFFSET = 7'h 50;
-  parameter logic [BlockAw-1:0] I2C_HOST_TIMEOUT_CTRL_OFFSET = 7'h 54;
-
-  // Reset values for hwext registers and their fields
-  parameter logic [15:0] I2C_INTR_TEST_RESVAL = 16'h 0;
-  parameter logic [0:0] I2C_INTR_TEST_FMT_WATERMARK_RESVAL = 1'h 0;
-  parameter logic [0:0] I2C_INTR_TEST_RX_WATERMARK_RESVAL = 1'h 0;
-  parameter logic [0:0] I2C_INTR_TEST_FMT_OVERFLOW_RESVAL = 1'h 0;
-  parameter logic [0:0] I2C_INTR_TEST_RX_OVERFLOW_RESVAL = 1'h 0;
-  parameter logic [0:0] I2C_INTR_TEST_NAK_RESVAL = 1'h 0;
-  parameter logic [0:0] I2C_INTR_TEST_SCL_INTERFERENCE_RESVAL = 1'h 0;
-  parameter logic [0:0] I2C_INTR_TEST_SDA_INTERFERENCE_RESVAL = 1'h 0;
-  parameter logic [0:0] I2C_INTR_TEST_STRETCH_TIMEOUT_RESVAL = 1'h 0;
-  parameter logic [0:0] I2C_INTR_TEST_SDA_UNSTABLE_RESVAL = 1'h 0;
-  parameter logic [0:0] I2C_INTR_TEST_TRANS_COMPLETE_RESVAL = 1'h 0;
-  parameter logic [0:0] I2C_INTR_TEST_TX_EMPTY_RESVAL = 1'h 0;
-  parameter logic [0:0] I2C_INTR_TEST_TX_NONEMPTY_RESVAL = 1'h 0;
-  parameter logic [0:0] I2C_INTR_TEST_TX_OVERFLOW_RESVAL = 1'h 0;
-  parameter logic [0:0] I2C_INTR_TEST_ACQ_OVERFLOW_RESVAL = 1'h 0;
-  parameter logic [0:0] I2C_INTR_TEST_ACK_STOP_RESVAL = 1'h 0;
-  parameter logic [0:0] I2C_INTR_TEST_HOST_TIMEOUT_RESVAL = 1'h 0;
-  parameter logic [9:0] I2C_STATUS_RESVAL = 10'h 33c;
-  parameter logic [0:0] I2C_STATUS_FMTEMPTY_RESVAL = 1'h 1;
-  parameter logic [0:0] I2C_STATUS_HOSTIDLE_RESVAL = 1'h 1;
-  parameter logic [0:0] I2C_STATUS_TARGETIDLE_RESVAL = 1'h 1;
-  parameter logic [0:0] I2C_STATUS_RXEMPTY_RESVAL = 1'h 1;
-  parameter logic [0:0] I2C_STATUS_TXEMPTY_RESVAL = 1'h 1;
-  parameter logic [0:0] I2C_STATUS_ACQEMPTY_RESVAL = 1'h 1;
-  parameter logic [7:0] I2C_RDATA_RESVAL = 8'h 0;
-  parameter logic [29:0] I2C_FIFO_STATUS_RESVAL = 30'h 0;
-  parameter logic [31:0] I2C_VAL_RESVAL = 32'h 0;
-  parameter logic [9:0] I2C_ACQDATA_RESVAL = 10'h 0;
-
-  // Register index
+  // Register Address
+  parameter logic [6:0] I2C_INTR_STATE_OFFSET = 7'h 0;
+  parameter logic [6:0] I2C_INTR_ENABLE_OFFSET = 7'h 4;
+  parameter logic [6:0] I2C_INTR_TEST_OFFSET = 7'h 8;
+  parameter logic [6:0] I2C_CTRL_OFFSET = 7'h c;
+  parameter logic [6:0] I2C_STATUS_OFFSET = 7'h 10;
+  parameter logic [6:0] I2C_RDATA_OFFSET = 7'h 14;
+  parameter logic [6:0] I2C_FDATA_OFFSET = 7'h 18;
+  parameter logic [6:0] I2C_FIFO_CTRL_OFFSET = 7'h 1c;
+  parameter logic [6:0] I2C_FIFO_STATUS_OFFSET = 7'h 20;
+  parameter logic [6:0] I2C_OVRD_OFFSET = 7'h 24;
+  parameter logic [6:0] I2C_VAL_OFFSET = 7'h 28;
+  parameter logic [6:0] I2C_TIMING0_OFFSET = 7'h 2c;
+  parameter logic [6:0] I2C_TIMING1_OFFSET = 7'h 30;
+  parameter logic [6:0] I2C_TIMING2_OFFSET = 7'h 34;
+  parameter logic [6:0] I2C_TIMING3_OFFSET = 7'h 38;
+  parameter logic [6:0] I2C_TIMING4_OFFSET = 7'h 3c;
+  parameter logic [6:0] I2C_TIMEOUT_CTRL_OFFSET = 7'h 40;
+  parameter logic [6:0] I2C_TARGET_ID_OFFSET = 7'h 44;
+  parameter logic [6:0] I2C_ACQDATA_OFFSET = 7'h 48;
+  parameter logic [6:0] I2C_TXDATA_OFFSET = 7'h 4c;
+  parameter logic [6:0] I2C_STRETCH_CTRL_OFFSET = 7'h 50;
+  parameter logic [6:0] I2C_HOST_TIMEOUT_CTRL_OFFSET = 7'h 54;
+
+
+  // Register Index
   typedef enum int {
     I2C_INTR_STATE,
     I2C_INTR_ENABLE,
@@ -641,6 +614,5 @@ package i2c_reg_pkg;
     4'b 0001, // index[20] I2C_STRETCH_CTRL
     4'b 1111  // index[21] I2C_HOST_TIMEOUT_CTRL
   };
-
 endpackage
 
diff --git a/rtl/i2c_reg_top.sv b/rtl/i2c_reg_top.sv
index f42b7b4..ed771f0 100644
--- a/rtl/i2c_reg_top.sv
+++ b/rtl/i2c_reg_top.sv
@@ -4,21 +4,22 @@
 //
 // Register Top module auto-generated by `reggen`
 
-`include "prim_assert.sv"
+`include "common_cells/assertions.svh"
 
-module i2c_reg_top (
+module i2c_reg_top #(
+  parameter type reg_req_t = logic,
+  parameter type reg_rsp_t = logic
+) (
   input clk_i,
   input rst_ni,
 
-  input  tlul_pkg::tl_h2d_t tl_i,
-  output tlul_pkg::tl_d2h_t tl_o,
+  // Below Register interface can be changed
+  input  reg_req_t reg_req_i,
+  output reg_rsp_t reg_rsp_o,
   // To HW
   output i2c_reg_pkg::i2c_reg2hw_t reg2hw, // Write
   input  i2c_reg_pkg::i2c_hw2reg_t hw2reg, // Read
 
-  // Integrity check errors
-  output logic intg_err_o,
-
   // Config
   input devmode_i // If 1, explicit error return for unmapped register access
 );
@@ -42,64 +43,23 @@ module i2c_reg_top (
 
   logic [DW-1:0] reg_rdata_next;
 
-  tlul_pkg::tl_h2d_t tl_reg_h2d;
-  tlul_pkg::tl_d2h_t tl_reg_d2h;
-
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i,
-    .err_o(intg_err)
-  );
-
-  logic intg_err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      intg_err_q <= '0;
-    end else if (intg_err) begin
-      intg_err_q <= 1'b1;
-    end
-  end
-
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = intg_err_q | intg_err;
-
-  // outgoing integrity generation
-  tlul_pkg::tl_d2h_t tl_o_pre;
-  tlul_rsp_intg_gen #(
-    .EnableRspIntgGen(1),
-    .EnableDataIntgGen(1)
-  ) u_rsp_intg_gen (
-    .tl_i(tl_o_pre),
-    .tl_o
-  );
-
-  assign tl_reg_h2d = tl_i;
-  assign tl_o_pre   = tl_reg_d2h;
+  reg_req_t reg_intf_req;
+  reg_rsp_t reg_intf_rsp;
 
-  tlul_adapter_reg #(
-    .RegAw(AW),
-    .RegDw(DW),
-    .EnableDataIntgGen(0)
-  ) u_reg_if (
-    .clk_i,
-    .rst_ni,
+  assign reg_intf_req = reg_req_i;
+  assign reg_rsp_o = reg_intf_rsp;
 
-    .tl_i (tl_reg_h2d),
-    .tl_o (tl_reg_d2h),
-
-    .we_o    (reg_we),
-    .re_o    (reg_re),
-    .addr_o  (reg_addr),
-    .wdata_o (reg_wdata),
-    .be_o    (reg_be),
-    .rdata_i (reg_rdata),
-    .error_i (reg_error)
-  );
+  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
+  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
+  assign reg_addr = reg_intf_req.addr;
+  assign reg_wdata = reg_intf_req.wdata;
+  assign reg_be = reg_intf_req.wstrb;
+  assign reg_intf_rsp.rdata = reg_rdata;
+  assign reg_intf_rsp.error = reg_error;
+  assign reg_intf_rsp.ready = 1'b1;
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;
+  assign reg_error = (devmode_i & addrmiss) | wr_err ;
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
@@ -2837,303 +2797,303 @@ module i2c_reg_top (
     if (addr_hit[21] && reg_we && (I2C_PERMIT[21] != (I2C_PERMIT[21] & reg_be))) wr_err = 1'b1 ;
   end
 
-  assign intr_state_fmt_watermark_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_fmt_watermark_we = addr_hit[0] & reg_we & ~wr_err;
   assign intr_state_fmt_watermark_wd = reg_wdata[0];
 
-  assign intr_state_rx_watermark_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_rx_watermark_we = addr_hit[0] & reg_we & ~wr_err;
   assign intr_state_rx_watermark_wd = reg_wdata[1];
 
-  assign intr_state_fmt_overflow_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_fmt_overflow_we = addr_hit[0] & reg_we & ~wr_err;
   assign intr_state_fmt_overflow_wd = reg_wdata[2];
 
-  assign intr_state_rx_overflow_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_rx_overflow_we = addr_hit[0] & reg_we & ~wr_err;
   assign intr_state_rx_overflow_wd = reg_wdata[3];
 
-  assign intr_state_nak_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_nak_we = addr_hit[0] & reg_we & ~wr_err;
   assign intr_state_nak_wd = reg_wdata[4];
 
-  assign intr_state_scl_interference_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_scl_interference_we = addr_hit[0] & reg_we & ~wr_err;
   assign intr_state_scl_interference_wd = reg_wdata[5];
 
-  assign intr_state_sda_interference_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_sda_interference_we = addr_hit[0] & reg_we & ~wr_err;
   assign intr_state_sda_interference_wd = reg_wdata[6];
 
-  assign intr_state_stretch_timeout_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_stretch_timeout_we = addr_hit[0] & reg_we & ~wr_err;
   assign intr_state_stretch_timeout_wd = reg_wdata[7];
 
-  assign intr_state_sda_unstable_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_sda_unstable_we = addr_hit[0] & reg_we & ~wr_err;
   assign intr_state_sda_unstable_wd = reg_wdata[8];
 
-  assign intr_state_trans_complete_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_trans_complete_we = addr_hit[0] & reg_we & ~wr_err;
   assign intr_state_trans_complete_wd = reg_wdata[9];
 
-  assign intr_state_tx_empty_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_tx_empty_we = addr_hit[0] & reg_we & ~wr_err;
   assign intr_state_tx_empty_wd = reg_wdata[10];
 
-  assign intr_state_tx_nonempty_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_tx_nonempty_we = addr_hit[0] & reg_we & ~wr_err;
   assign intr_state_tx_nonempty_wd = reg_wdata[11];
 
-  assign intr_state_tx_overflow_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_tx_overflow_we = addr_hit[0] & reg_we & ~wr_err;
   assign intr_state_tx_overflow_wd = reg_wdata[12];
 
-  assign intr_state_acq_overflow_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_acq_overflow_we = addr_hit[0] & reg_we & ~wr_err;
   assign intr_state_acq_overflow_wd = reg_wdata[13];
 
-  assign intr_state_ack_stop_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_ack_stop_we = addr_hit[0] & reg_we & ~wr_err;
   assign intr_state_ack_stop_wd = reg_wdata[14];
 
-  assign intr_state_host_timeout_we = addr_hit[0] & reg_we & !reg_error;
+  assign intr_state_host_timeout_we = addr_hit[0] & reg_we & ~wr_err;
   assign intr_state_host_timeout_wd = reg_wdata[15];
 
-  assign intr_enable_fmt_watermark_we = addr_hit[1] & reg_we & !reg_error;
+  assign intr_enable_fmt_watermark_we = addr_hit[1] & reg_we & ~wr_err;
   assign intr_enable_fmt_watermark_wd = reg_wdata[0];
 
-  assign intr_enable_rx_watermark_we = addr_hit[1] & reg_we & !reg_error;
+  assign intr_enable_rx_watermark_we = addr_hit[1] & reg_we & ~wr_err;
   assign intr_enable_rx_watermark_wd = reg_wdata[1];
 
-  assign intr_enable_fmt_overflow_we = addr_hit[1] & reg_we & !reg_error;
+  assign intr_enable_fmt_overflow_we = addr_hit[1] & reg_we & ~wr_err;
   assign intr_enable_fmt_overflow_wd = reg_wdata[2];
 
-  assign intr_enable_rx_overflow_we = addr_hit[1] & reg_we & !reg_error;
+  assign intr_enable_rx_overflow_we = addr_hit[1] & reg_we & ~wr_err;
   assign intr_enable_rx_overflow_wd = reg_wdata[3];
 
-  assign intr_enable_nak_we = addr_hit[1] & reg_we & !reg_error;
+  assign intr_enable_nak_we = addr_hit[1] & reg_we & ~wr_err;
   assign intr_enable_nak_wd = reg_wdata[4];
 
-  assign intr_enable_scl_interference_we = addr_hit[1] & reg_we & !reg_error;
+  assign intr_enable_scl_interference_we = addr_hit[1] & reg_we & ~wr_err;
   assign intr_enable_scl_interference_wd = reg_wdata[5];
 
-  assign intr_enable_sda_interference_we = addr_hit[1] & reg_we & !reg_error;
+  assign intr_enable_sda_interference_we = addr_hit[1] & reg_we & ~wr_err;
   assign intr_enable_sda_interference_wd = reg_wdata[6];
 
-  assign intr_enable_stretch_timeout_we = addr_hit[1] & reg_we & !reg_error;
+  assign intr_enable_stretch_timeout_we = addr_hit[1] & reg_we & ~wr_err;
   assign intr_enable_stretch_timeout_wd = reg_wdata[7];
 
-  assign intr_enable_sda_unstable_we = addr_hit[1] & reg_we & !reg_error;
+  assign intr_enable_sda_unstable_we = addr_hit[1] & reg_we & ~wr_err;
   assign intr_enable_sda_unstable_wd = reg_wdata[8];
 
-  assign intr_enable_trans_complete_we = addr_hit[1] & reg_we & !reg_error;
+  assign intr_enable_trans_complete_we = addr_hit[1] & reg_we & ~wr_err;
   assign intr_enable_trans_complete_wd = reg_wdata[9];
 
-  assign intr_enable_tx_empty_we = addr_hit[1] & reg_we & !reg_error;
+  assign intr_enable_tx_empty_we = addr_hit[1] & reg_we & ~wr_err;
   assign intr_enable_tx_empty_wd = reg_wdata[10];
 
-  assign intr_enable_tx_nonempty_we = addr_hit[1] & reg_we & !reg_error;
+  assign intr_enable_tx_nonempty_we = addr_hit[1] & reg_we & ~wr_err;
   assign intr_enable_tx_nonempty_wd = reg_wdata[11];
 
-  assign intr_enable_tx_overflow_we = addr_hit[1] & reg_we & !reg_error;
+  assign intr_enable_tx_overflow_we = addr_hit[1] & reg_we & ~wr_err;
   assign intr_enable_tx_overflow_wd = reg_wdata[12];
 
-  assign intr_enable_acq_overflow_we = addr_hit[1] & reg_we & !reg_error;
+  assign intr_enable_acq_overflow_we = addr_hit[1] & reg_we & ~wr_err;
   assign intr_enable_acq_overflow_wd = reg_wdata[13];
 
-  assign intr_enable_ack_stop_we = addr_hit[1] & reg_we & !reg_error;
+  assign intr_enable_ack_stop_we = addr_hit[1] & reg_we & ~wr_err;
   assign intr_enable_ack_stop_wd = reg_wdata[14];
 
-  assign intr_enable_host_timeout_we = addr_hit[1] & reg_we & !reg_error;
+  assign intr_enable_host_timeout_we = addr_hit[1] & reg_we & ~wr_err;
   assign intr_enable_host_timeout_wd = reg_wdata[15];
 
-  assign intr_test_fmt_watermark_we = addr_hit[2] & reg_we & !reg_error;
+  assign intr_test_fmt_watermark_we = addr_hit[2] & reg_we & ~wr_err;
   assign intr_test_fmt_watermark_wd = reg_wdata[0];
 
-  assign intr_test_rx_watermark_we = addr_hit[2] & reg_we & !reg_error;
+  assign intr_test_rx_watermark_we = addr_hit[2] & reg_we & ~wr_err;
   assign intr_test_rx_watermark_wd = reg_wdata[1];
 
-  assign intr_test_fmt_overflow_we = addr_hit[2] & reg_we & !reg_error;
+  assign intr_test_fmt_overflow_we = addr_hit[2] & reg_we & ~wr_err;
   assign intr_test_fmt_overflow_wd = reg_wdata[2];
 
-  assign intr_test_rx_overflow_we = addr_hit[2] & reg_we & !reg_error;
+  assign intr_test_rx_overflow_we = addr_hit[2] & reg_we & ~wr_err;
   assign intr_test_rx_overflow_wd = reg_wdata[3];
 
-  assign intr_test_nak_we = addr_hit[2] & reg_we & !reg_error;
+  assign intr_test_nak_we = addr_hit[2] & reg_we & ~wr_err;
   assign intr_test_nak_wd = reg_wdata[4];
 
-  assign intr_test_scl_interference_we = addr_hit[2] & reg_we & !reg_error;
+  assign intr_test_scl_interference_we = addr_hit[2] & reg_we & ~wr_err;
   assign intr_test_scl_interference_wd = reg_wdata[5];
 
-  assign intr_test_sda_interference_we = addr_hit[2] & reg_we & !reg_error;
+  assign intr_test_sda_interference_we = addr_hit[2] & reg_we & ~wr_err;
   assign intr_test_sda_interference_wd = reg_wdata[6];
 
-  assign intr_test_stretch_timeout_we = addr_hit[2] & reg_we & !reg_error;
+  assign intr_test_stretch_timeout_we = addr_hit[2] & reg_we & ~wr_err;
   assign intr_test_stretch_timeout_wd = reg_wdata[7];
 
-  assign intr_test_sda_unstable_we = addr_hit[2] & reg_we & !reg_error;
+  assign intr_test_sda_unstable_we = addr_hit[2] & reg_we & ~wr_err;
   assign intr_test_sda_unstable_wd = reg_wdata[8];
 
-  assign intr_test_trans_complete_we = addr_hit[2] & reg_we & !reg_error;
+  assign intr_test_trans_complete_we = addr_hit[2] & reg_we & ~wr_err;
   assign intr_test_trans_complete_wd = reg_wdata[9];
 
-  assign intr_test_tx_empty_we = addr_hit[2] & reg_we & !reg_error;
+  assign intr_test_tx_empty_we = addr_hit[2] & reg_we & ~wr_err;
   assign intr_test_tx_empty_wd = reg_wdata[10];
 
-  assign intr_test_tx_nonempty_we = addr_hit[2] & reg_we & !reg_error;
+  assign intr_test_tx_nonempty_we = addr_hit[2] & reg_we & ~wr_err;
   assign intr_test_tx_nonempty_wd = reg_wdata[11];
 
-  assign intr_test_tx_overflow_we = addr_hit[2] & reg_we & !reg_error;
+  assign intr_test_tx_overflow_we = addr_hit[2] & reg_we & ~wr_err;
   assign intr_test_tx_overflow_wd = reg_wdata[12];
 
-  assign intr_test_acq_overflow_we = addr_hit[2] & reg_we & !reg_error;
+  assign intr_test_acq_overflow_we = addr_hit[2] & reg_we & ~wr_err;
   assign intr_test_acq_overflow_wd = reg_wdata[13];
 
-  assign intr_test_ack_stop_we = addr_hit[2] & reg_we & !reg_error;
+  assign intr_test_ack_stop_we = addr_hit[2] & reg_we & ~wr_err;
   assign intr_test_ack_stop_wd = reg_wdata[14];
 
-  assign intr_test_host_timeout_we = addr_hit[2] & reg_we & !reg_error;
+  assign intr_test_host_timeout_we = addr_hit[2] & reg_we & ~wr_err;
   assign intr_test_host_timeout_wd = reg_wdata[15];
 
-  assign ctrl_enablehost_we = addr_hit[3] & reg_we & !reg_error;
+  assign ctrl_enablehost_we = addr_hit[3] & reg_we & ~wr_err;
   assign ctrl_enablehost_wd = reg_wdata[0];
 
-  assign ctrl_enabletarget_we = addr_hit[3] & reg_we & !reg_error;
+  assign ctrl_enabletarget_we = addr_hit[3] & reg_we & ~wr_err;
   assign ctrl_enabletarget_wd = reg_wdata[1];
 
-  assign status_fmtfull_re = addr_hit[4] & reg_re & !reg_error;
+  assign status_fmtfull_re = addr_hit[4] && reg_re;
 
-  assign status_rxfull_re = addr_hit[4] & reg_re & !reg_error;
+  assign status_rxfull_re = addr_hit[4] && reg_re;
 
-  assign status_fmtempty_re = addr_hit[4] & reg_re & !reg_error;
+  assign status_fmtempty_re = addr_hit[4] && reg_re;
 
-  assign status_hostidle_re = addr_hit[4] & reg_re & !reg_error;
+  assign status_hostidle_re = addr_hit[4] && reg_re;
 
-  assign status_targetidle_re = addr_hit[4] & reg_re & !reg_error;
+  assign status_targetidle_re = addr_hit[4] && reg_re;
 
-  assign status_rxempty_re = addr_hit[4] & reg_re & !reg_error;
+  assign status_rxempty_re = addr_hit[4] && reg_re;
 
-  assign status_txfull_re = addr_hit[4] & reg_re & !reg_error;
+  assign status_txfull_re = addr_hit[4] && reg_re;
 
-  assign status_acqfull_re = addr_hit[4] & reg_re & !reg_error;
+  assign status_acqfull_re = addr_hit[4] && reg_re;
 
-  assign status_txempty_re = addr_hit[4] & reg_re & !reg_error;
+  assign status_txempty_re = addr_hit[4] && reg_re;
 
-  assign status_acqempty_re = addr_hit[4] & reg_re & !reg_error;
+  assign status_acqempty_re = addr_hit[4] && reg_re;
 
-  assign rdata_re = addr_hit[5] & reg_re & !reg_error;
+  assign rdata_re = addr_hit[5] && reg_re;
 
-  assign fdata_fbyte_we = addr_hit[6] & reg_we & !reg_error;
+  assign fdata_fbyte_we = addr_hit[6] & reg_we & ~wr_err;
   assign fdata_fbyte_wd = reg_wdata[7:0];
 
-  assign fdata_start_we = addr_hit[6] & reg_we & !reg_error;
+  assign fdata_start_we = addr_hit[6] & reg_we & ~wr_err;
   assign fdata_start_wd = reg_wdata[8];
 
-  assign fdata_stop_we = addr_hit[6] & reg_we & !reg_error;
+  assign fdata_stop_we = addr_hit[6] & reg_we & ~wr_err;
   assign fdata_stop_wd = reg_wdata[9];
 
-  assign fdata_read_we = addr_hit[6] & reg_we & !reg_error;
+  assign fdata_read_we = addr_hit[6] & reg_we & ~wr_err;
   assign fdata_read_wd = reg_wdata[10];
 
-  assign fdata_rcont_we = addr_hit[6] & reg_we & !reg_error;
+  assign fdata_rcont_we = addr_hit[6] & reg_we & ~wr_err;
   assign fdata_rcont_wd = reg_wdata[11];
 
-  assign fdata_nakok_we = addr_hit[6] & reg_we & !reg_error;
+  assign fdata_nakok_we = addr_hit[6] & reg_we & ~wr_err;
   assign fdata_nakok_wd = reg_wdata[12];
 
-  assign fifo_ctrl_rxrst_we = addr_hit[7] & reg_we & !reg_error;
+  assign fifo_ctrl_rxrst_we = addr_hit[7] & reg_we & ~wr_err;
   assign fifo_ctrl_rxrst_wd = reg_wdata[0];
 
-  assign fifo_ctrl_fmtrst_we = addr_hit[7] & reg_we & !reg_error;
+  assign fifo_ctrl_fmtrst_we = addr_hit[7] & reg_we & ~wr_err;
   assign fifo_ctrl_fmtrst_wd = reg_wdata[1];
 
-  assign fifo_ctrl_rxilvl_we = addr_hit[7] & reg_we & !reg_error;
+  assign fifo_ctrl_rxilvl_we = addr_hit[7] & reg_we & ~wr_err;
   assign fifo_ctrl_rxilvl_wd = reg_wdata[4:2];
 
-  assign fifo_ctrl_fmtilvl_we = addr_hit[7] & reg_we & !reg_error;
+  assign fifo_ctrl_fmtilvl_we = addr_hit[7] & reg_we & ~wr_err;
   assign fifo_ctrl_fmtilvl_wd = reg_wdata[6:5];
 
-  assign fifo_ctrl_acqrst_we = addr_hit[7] & reg_we & !reg_error;
+  assign fifo_ctrl_acqrst_we = addr_hit[7] & reg_we & ~wr_err;
   assign fifo_ctrl_acqrst_wd = reg_wdata[7];
 
-  assign fifo_ctrl_txrst_we = addr_hit[7] & reg_we & !reg_error;
+  assign fifo_ctrl_txrst_we = addr_hit[7] & reg_we & ~wr_err;
   assign fifo_ctrl_txrst_wd = reg_wdata[8];
 
-  assign fifo_status_fmtlvl_re = addr_hit[8] & reg_re & !reg_error;
+  assign fifo_status_fmtlvl_re = addr_hit[8] && reg_re;
 
-  assign fifo_status_txlvl_re = addr_hit[8] & reg_re & !reg_error;
+  assign fifo_status_txlvl_re = addr_hit[8] && reg_re;
 
-  assign fifo_status_rxlvl_re = addr_hit[8] & reg_re & !reg_error;
+  assign fifo_status_rxlvl_re = addr_hit[8] && reg_re;
 
-  assign fifo_status_acqlvl_re = addr_hit[8] & reg_re & !reg_error;
+  assign fifo_status_acqlvl_re = addr_hit[8] && reg_re;
 
-  assign ovrd_txovrden_we = addr_hit[9] & reg_we & !reg_error;
+  assign ovrd_txovrden_we = addr_hit[9] & reg_we & ~wr_err;
   assign ovrd_txovrden_wd = reg_wdata[0];
 
-  assign ovrd_sclval_we = addr_hit[9] & reg_we & !reg_error;
+  assign ovrd_sclval_we = addr_hit[9] & reg_we & ~wr_err;
   assign ovrd_sclval_wd = reg_wdata[1];
 
-  assign ovrd_sdaval_we = addr_hit[9] & reg_we & !reg_error;
+  assign ovrd_sdaval_we = addr_hit[9] & reg_we & ~wr_err;
   assign ovrd_sdaval_wd = reg_wdata[2];
 
-  assign val_scl_rx_re = addr_hit[10] & reg_re & !reg_error;
+  assign val_scl_rx_re = addr_hit[10] && reg_re;
 
-  assign val_sda_rx_re = addr_hit[10] & reg_re & !reg_error;
+  assign val_sda_rx_re = addr_hit[10] && reg_re;
 
-  assign timing0_thigh_we = addr_hit[11] & reg_we & !reg_error;
+  assign timing0_thigh_we = addr_hit[11] & reg_we & ~wr_err;
   assign timing0_thigh_wd = reg_wdata[15:0];
 
-  assign timing0_tlow_we = addr_hit[11] & reg_we & !reg_error;
+  assign timing0_tlow_we = addr_hit[11] & reg_we & ~wr_err;
   assign timing0_tlow_wd = reg_wdata[31:16];
 
-  assign timing1_t_r_we = addr_hit[12] & reg_we & !reg_error;
+  assign timing1_t_r_we = addr_hit[12] & reg_we & ~wr_err;
   assign timing1_t_r_wd = reg_wdata[15:0];
 
-  assign timing1_t_f_we = addr_hit[12] & reg_we & !reg_error;
+  assign timing1_t_f_we = addr_hit[12] & reg_we & ~wr_err;
   assign timing1_t_f_wd = reg_wdata[31:16];
 
-  assign timing2_tsu_sta_we = addr_hit[13] & reg_we & !reg_error;
+  assign timing2_tsu_sta_we = addr_hit[13] & reg_we & ~wr_err;
   assign timing2_tsu_sta_wd = reg_wdata[15:0];
 
-  assign timing2_thd_sta_we = addr_hit[13] & reg_we & !reg_error;
+  assign timing2_thd_sta_we = addr_hit[13] & reg_we & ~wr_err;
   assign timing2_thd_sta_wd = reg_wdata[31:16];
 
-  assign timing3_tsu_dat_we = addr_hit[14] & reg_we & !reg_error;
+  assign timing3_tsu_dat_we = addr_hit[14] & reg_we & ~wr_err;
   assign timing3_tsu_dat_wd = reg_wdata[15:0];
 
-  assign timing3_thd_dat_we = addr_hit[14] & reg_we & !reg_error;
+  assign timing3_thd_dat_we = addr_hit[14] & reg_we & ~wr_err;
   assign timing3_thd_dat_wd = reg_wdata[31:16];
 
-  assign timing4_tsu_sto_we = addr_hit[15] & reg_we & !reg_error;
+  assign timing4_tsu_sto_we = addr_hit[15] & reg_we & ~wr_err;
   assign timing4_tsu_sto_wd = reg_wdata[15:0];
 
-  assign timing4_t_buf_we = addr_hit[15] & reg_we & !reg_error;
+  assign timing4_t_buf_we = addr_hit[15] & reg_we & ~wr_err;
   assign timing4_t_buf_wd = reg_wdata[31:16];
 
-  assign timeout_ctrl_val_we = addr_hit[16] & reg_we & !reg_error;
+  assign timeout_ctrl_val_we = addr_hit[16] & reg_we & ~wr_err;
   assign timeout_ctrl_val_wd = reg_wdata[30:0];
 
-  assign timeout_ctrl_en_we = addr_hit[16] & reg_we & !reg_error;
+  assign timeout_ctrl_en_we = addr_hit[16] & reg_we & ~wr_err;
   assign timeout_ctrl_en_wd = reg_wdata[31];
 
-  assign target_id_address0_we = addr_hit[17] & reg_we & !reg_error;
+  assign target_id_address0_we = addr_hit[17] & reg_we & ~wr_err;
   assign target_id_address0_wd = reg_wdata[6:0];
 
-  assign target_id_mask0_we = addr_hit[17] & reg_we & !reg_error;
+  assign target_id_mask0_we = addr_hit[17] & reg_we & ~wr_err;
   assign target_id_mask0_wd = reg_wdata[13:7];
 
-  assign target_id_address1_we = addr_hit[17] & reg_we & !reg_error;
+  assign target_id_address1_we = addr_hit[17] & reg_we & ~wr_err;
   assign target_id_address1_wd = reg_wdata[20:14];
 
-  assign target_id_mask1_we = addr_hit[17] & reg_we & !reg_error;
+  assign target_id_mask1_we = addr_hit[17] & reg_we & ~wr_err;
   assign target_id_mask1_wd = reg_wdata[27:21];
 
-  assign acqdata_abyte_re = addr_hit[18] & reg_re & !reg_error;
+  assign acqdata_abyte_re = addr_hit[18] && reg_re;
 
-  assign acqdata_signal_re = addr_hit[18] & reg_re & !reg_error;
+  assign acqdata_signal_re = addr_hit[18] && reg_re;
 
-  assign txdata_we = addr_hit[19] & reg_we & !reg_error;
+  assign txdata_we = addr_hit[19] & reg_we & ~wr_err;
   assign txdata_wd = reg_wdata[7:0];
 
-  assign stretch_ctrl_enableaddr_we = addr_hit[20] & reg_we & !reg_error;
+  assign stretch_ctrl_enableaddr_we = addr_hit[20] & reg_we & ~wr_err;
   assign stretch_ctrl_enableaddr_wd = reg_wdata[0];
 
-  assign stretch_ctrl_enabletx_we = addr_hit[20] & reg_we & !reg_error;
+  assign stretch_ctrl_enabletx_we = addr_hit[20] & reg_we & ~wr_err;
   assign stretch_ctrl_enabletx_wd = reg_wdata[1];
 
-  assign stretch_ctrl_enableacq_we = addr_hit[20] & reg_we & !reg_error;
+  assign stretch_ctrl_enableacq_we = addr_hit[20] & reg_we & ~wr_err;
   assign stretch_ctrl_enableacq_wd = reg_wdata[2];
 
-  assign stretch_ctrl_stop_we = addr_hit[20] & reg_we & !reg_error;
+  assign stretch_ctrl_stop_we = addr_hit[20] & reg_we & ~wr_err;
   assign stretch_ctrl_stop_wd = reg_wdata[3];
 
-  assign host_timeout_ctrl_we = addr_hit[21] & reg_we & !reg_error;
+  assign host_timeout_ctrl_we = addr_hit[21] & reg_we & ~wr_err;
   assign host_timeout_ctrl_wd = reg_wdata[31:0];
 
   // Read data return
@@ -3318,25 +3278,9 @@ module i2c_reg_top (
     endcase
   end
 
-  // Unused signal tieoff
-
-  // wdata / byte enable are not always fully used
-  // add a blanket unused statement to handle lint waivers
-  logic unused_wdata;
-  logic unused_be;
-  assign unused_wdata = ^reg_wdata;
-  assign unused_be = ^reg_be;
-
   // Assertions for Register Interface
-  `ASSERT_PULSE(wePulse, reg_we)
-  `ASSERT_PULSE(rePulse, reg_re)
-
-  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid)
 
   `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))
 
-  // this is formulated as an assumption such that the FPV testbenches do disprove this
-  // property by mistake
-  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)
 
 endmodule
-- 
2.25.1.377.g2d2118b814

