From 67eec16e962759f6100028719d9bdedd4db618e3 Mon Sep 17 00:00:00 2001
From: Gianna Paulin <pauling@student.ethz.ch>
Date: Mon, 11 Apr 2022 23:39:34 +0200
Subject: [PATCH] axi: add patch for axi_demux vcs compatibility

---
 src/axi_demux.sv | 149 +++++++++++++++++++++++++++++--------------------------
 1 file changed, 78 insertions(+), 71 deletions(-)

diff --git a/src/axi_demux.sv b/src/axi_demux.sv
index 9ba3ef3..8124d12 100644
--- a/src/axi_demux.sv
+++ b/src/axi_demux.sv
@@ -65,14 +65,6 @@ module axi_demux #(
   //--------------------------------------
   // Typedefs for the FIFOs / Queues
   //--------------------------------------
-  typedef struct packed {
-    aw_chan_t aw_chan;
-    select_t  aw_select;
-  } aw_chan_select_t;
-  typedef struct packed {
-    ar_chan_t ar_chan;
-    select_t  ar_select;
-  } ar_chan_select_t;
 
   // pass through if only one master port
   if (NoMstPorts == 32'h1) begin : gen_no_demux
@@ -155,8 +147,11 @@ module axi_demux #(
     // Write Transaction
     //--------------------------------------
     // comes from spill register at input
-    aw_chan_select_t          slv_aw_chan_select;
-    logic                     slv_aw_valid,       slv_aw_ready;
+    aw_chan_t                 slv_aw_chan;
+    select_t                  slv_aw_select;
+
+    logic                     slv_aw_valid, aw_valid_chan, aw_valid_sel;
+    logic                     slv_aw_ready, slv_aw_ready_chan, slv_aw_ready_sel;
 
     // AW ID counter
     select_t                  lookup_aw_select;
@@ -190,8 +185,8 @@ module axi_demux #(
     // Read Transaction
     //--------------------------------------
     // comes from spill register at input
-    ar_chan_select_t          slv_ar_chan_select;
-    logic                     slv_ar_valid,       slv_ar_ready;
+    logic                     slv_ar_valid, ar_valid_chan, ar_valid_sel;
+    logic                     slv_ar_ready, slv_ar_ready_chan, slv_ar_ready_sel;
 
     // AR ID counter
     select_t                  lookup_ar_select;
@@ -220,32 +215,35 @@ module axi_demux #(
     // AW Channel
     //--------------------------------------
     // spill register at the channel input
-    `ifdef TARGET_VSIM
-    // Workaround for bug in Questa 2020.2 and 2021.1: Flatten the struct into a logic vector before
-    // instantiating `spill_register`.
-    typedef logic [$bits(aw_chan_select_t)-1:0] aw_chan_select_flat_t;
-    `else
-    // Other tools, such as VCS, have problems with `$bits()`, so the workaround cannot be used
-    // generally.
-    typedef aw_chan_select_t aw_chan_select_flat_t;
-    `endif
-    aw_chan_select_flat_t slv_aw_chan_select_in_flat,
-                          slv_aw_chan_select_out_flat;
-    assign slv_aw_chan_select_in_flat = {slv_req_i.aw, slv_aw_select_i};
     spill_register #(
-      .T       ( aw_chan_select_flat_t        ),
+      .T       ( aw_chan_t                    ),
       .Bypass  ( ~SpillAw                     ) // because module param indicates if we want a spill reg
-    ) i_aw_spill_reg (
+    ) i_aw_channel_spill_reg (
+      .clk_i   ( clk_i                        ),
+      .rst_ni  ( rst_ni                       ),
+      .valid_i ( slv_req_i.aw_valid           ),
+      .ready_o ( slv_aw_ready_chan            ),
+      .data_i  ( slv_req_i.aw                 ),
+      .valid_o ( aw_valid_chan                 ),
+      .ready_i ( slv_aw_ready                 ),
+      .data_o  ( slv_aw_chan  )
+    );
+    spill_register #(
+      .T       ( select_t                     ),
+      .Bypass  ( ~SpillAw                     ) // because module param indicates if we want a spill reg
+    ) i_aw_select_spill_reg (
       .clk_i   ( clk_i                        ),
       .rst_ni  ( rst_ni                       ),
       .valid_i ( slv_req_i.aw_valid           ),
-      .ready_o ( slv_resp_o.aw_ready          ),
-      .data_i  ( slv_aw_chan_select_in_flat   ),
-      .valid_o ( slv_aw_valid                 ),
+      .ready_o ( slv_aw_ready_sel             ),
+      .data_i  ( slv_aw_select_i              ),
+      .valid_o ( aw_valid_sel                 ),
       .ready_i ( slv_aw_ready                 ),
-      .data_o  ( slv_aw_chan_select_out_flat  )
+      .data_o  ( slv_aw_select  )
     );
-    assign slv_aw_chan_select = slv_aw_chan_select_out_flat;
+    assign slv_resp_o.aw_ready = slv_aw_ready_chan & slv_aw_ready_sel;
+    assign slv_aw_valid = aw_valid_chan & aw_valid_sel;
+    assign slv_aw_chan_select = {slv_aw_chan, slv_aw_select};
 
     // Control of the AW handshake
     always_comb begin
@@ -272,7 +270,7 @@ module axi_demux #(
           lock_aw_valid_d = 1'b0;
           load_aw_lock    = 1'b1;
           // inject the ATOP if necessary
-          atop_inject     = slv_aw_chan_select.aw_chan.atop[axi_pkg::ATOP_R_RESP] & AtopSupport;
+          atop_inject     = slv_aw_chan.atop[axi_pkg::ATOP_R_RESP] & AtopSupport;
         end
       end else begin
         // Process can start handling a transaction if its `i_aw_id_counter` and `w_fifo` have
@@ -281,7 +279,7 @@ module axi_demux #(
         if (!aw_id_cnt_full && !w_fifo_full && (!ar_id_cnt_full || !AtopSupport)) begin
           // there is a valid AW vector make the id lookup and go further, if it passes
           if (slv_aw_valid && (!aw_select_occupied ||
-             (slv_aw_chan_select.aw_select == lookup_aw_select))) begin
+             (slv_aw_select == lookup_aw_select))) begin
             // connect the handshake
             aw_valid     = 1'b1;
             // push arbitration to the W FIFO regardless, do not wait for the AW transaction
@@ -289,7 +287,7 @@ module axi_demux #(
             // on AW transaction
             if (aw_ready) begin
               slv_aw_ready = 1'b1;
-              atop_inject  = slv_aw_chan_select.aw_chan.atop[axi_pkg::ATOP_R_RESP] & AtopSupport;
+              atop_inject  = slv_aw_chan.atop[axi_pkg::ATOP_R_RESP] & AtopSupport;
             // no AW transaction this cycle, lock the decision
             end else begin
               lock_aw_valid_d = 1'b1;
@@ -310,7 +308,7 @@ module axi_demux #(
       // master port as all write transactions with the same ID, or both.  This means that the
       // signals that are driven by the ID counters if this parameter is not set can instead be
       // derived from existing signals.  The ID counters can therefore be omitted.
-      assign lookup_aw_select = slv_aw_chan_select.aw_select;
+      assign lookup_aw_select = slv_aw_select;
       assign aw_select_occupied = 1'b0;
       assign aw_id_cnt_full = 1'b0;
     end else begin : gen_aw_id_counter
@@ -321,14 +319,14 @@ module axi_demux #(
       ) i_aw_id_counter (
         .clk_i                        ( clk_i                                         ),
         .rst_ni                       ( rst_ni                                        ),
-        .lookup_axi_id_i              ( slv_aw_chan_select.aw_chan.id[0+:AxiLookBits] ),
+        .lookup_axi_id_i              ( slv_aw_chan.id[0+:AxiLookBits] ),
         .lookup_mst_select_o          ( lookup_aw_select                              ),
         .lookup_mst_select_occupied_o ( aw_select_occupied                            ),
         .full_o                       ( aw_id_cnt_full                                ),
         .inject_axi_id_i              ( '0                                            ),
         .inject_i                     ( 1'b0                                          ),
-        .push_axi_id_i                ( slv_aw_chan_select.aw_chan.id[0+:AxiLookBits] ),
-        .push_mst_select_i            ( slv_aw_chan_select.aw_select                  ),
+        .push_axi_id_i                ( slv_aw_chan.id[0+:AxiLookBits] ),
+        .push_mst_select_i            ( slv_aw_select                  ),
         .push_i                       ( aw_push                                       ),
         .pop_axi_id_i                 ( slv_b_chan.id[0+:AxiLookBits]                 ),
         .pop_i                        ( slv_b_valid & slv_b_ready                     )
@@ -349,7 +347,7 @@ module axi_demux #(
       .full_o    ( w_fifo_full                  ),
       .empty_o   ( w_fifo_empty                 ),
       .usage_o   (                              ),
-      .data_i    ( slv_aw_chan_select.aw_select ),
+      .data_i    ( slv_aw_select ),
       .push_i    ( aw_push                      ), // controlled from proc_aw_chan
       .data_o    ( w_select                     ), // where the w beat should go
       .pop_i     ( w_fifo_pop                   )  // controlled from proc_w_chan
@@ -414,28 +412,37 @@ module axi_demux #(
     //  AR Channel
     //--------------------------------------
     // Workaround for bug in Questa (see comments on AW channel for details).
-    `ifdef TARGET_VSIM
-    typedef logic [$bits(ar_chan_select_t)-1:0] ar_chan_select_flat_t;
-    `else
-    typedef ar_chan_select_t ar_chan_select_flat_t;
-    `endif
-    ar_chan_select_flat_t slv_ar_chan_select_in_flat,
-                          slv_ar_chan_select_out_flat;
-    assign slv_ar_chan_select_in_flat = {slv_req_i.ar, slv_ar_select_i};
+    ar_chan_t slv_ar_chan;
+    select_t  slv_ar_select;
     spill_register #(
-      .T       ( ar_chan_select_flat_t        ),
+      .T       ( ar_chan_t                    ),
       .Bypass  ( ~SpillAr                     )
-    ) i_ar_spill_reg (
+    ) i_ar_chan_spill_reg (
       .clk_i   ( clk_i                        ),
       .rst_ni  ( rst_ni                       ),
       .valid_i ( slv_req_i.ar_valid           ),
-      .ready_o ( slv_resp_o.ar_ready          ),
-      .data_i  ( slv_ar_chan_select_in_flat   ),
-      .valid_o ( slv_ar_valid                 ),
+      .ready_o ( slv_ar_ready_chan            ),
+      .data_i  ( slv_req_i.ar                 ),
+      .valid_o ( ar_valid_chan                ),
       .ready_i ( slv_ar_ready                 ),
-      .data_o  ( slv_ar_chan_select_out_flat  )
+      .data_o  ( slv_ar_chan                  )
     );
-    assign slv_ar_chan_select = slv_ar_chan_select_out_flat;
+    spill_register #(
+      .T       ( select_t                     ),
+      .Bypass  ( ~SpillAr                     )
+    ) i_ar_sel_spill_reg (
+      .clk_i   ( clk_i                        ),
+      .rst_ni  ( rst_ni                       ),
+      .valid_i ( slv_req_i.ar_valid           ),
+      .ready_o ( slv_ar_ready_sel             ),
+      .data_i  ( slv_ar_select_i              ),
+      .valid_o ( ar_valid_sel                 ),
+      .ready_i ( slv_ar_ready                 ),
+      .data_o  ( slv_ar_select                )
+    );
+    assign slv_resp_o.ar_ready = slv_ar_ready_chan & slv_ar_ready_sel;
+    assign slv_ar_valid = ar_valid_chan & ar_valid_sel;
+    assign slv_ar_chan_select = {slv_ar_chan, slv_ar_select};
 
     // control of the AR handshake
     always_comb begin
@@ -466,7 +473,7 @@ module axi_demux #(
         if (!ar_id_cnt_full) begin
           // There is a valid AR, so look the ID up.
           if (slv_ar_valid && (!ar_select_occupied ||
-             (slv_ar_chan_select.ar_select == lookup_ar_select))) begin
+             (slv_ar_select == lookup_ar_select))) begin
             // connect the AR handshake
             ar_valid     = 1'b1;
             // on transaction
@@ -492,7 +499,7 @@ module axi_demux #(
       // master port as all read transactions with the same ID, or both.  This means that the
       // signals that are driven by the ID counters if this parameter is not set can instead be
       // derived from existing signals.  The ID counters can therefore be omitted.
-      assign lookup_ar_select = slv_ar_chan_select.ar_select;
+      assign lookup_ar_select = slv_ar_select;
       assign ar_select_occupied = 1'b0;
       assign ar_id_cnt_full = 1'b0;
     end else begin : gen_ar_id_counter
@@ -503,14 +510,14 @@ module axi_demux #(
       ) i_ar_id_counter (
         .clk_i                        ( clk_i                                         ),
         .rst_ni                       ( rst_ni                                        ),
-        .lookup_axi_id_i              ( slv_ar_chan_select.ar_chan.id[0+:AxiLookBits] ),
+        .lookup_axi_id_i              ( slv_ar_chan.id[0+:AxiLookBits] ),
         .lookup_mst_select_o          ( lookup_ar_select                              ),
         .lookup_mst_select_occupied_o ( ar_select_occupied                            ),
         .full_o                       ( ar_id_cnt_full                                ),
-        .inject_axi_id_i              ( slv_aw_chan_select.aw_chan.id[0+:AxiLookBits] ),
+        .inject_axi_id_i              ( slv_aw_chan.id[0+:AxiLookBits] ),
         .inject_i                     ( atop_inject                                   ),
-        .push_axi_id_i                ( slv_ar_chan_select.ar_chan.id[0+:AxiLookBits] ),
-        .push_mst_select_i            ( slv_ar_chan_select.ar_select                  ),
+        .push_axi_id_i                ( slv_ar_chan.id[0+:AxiLookBits] ),
+        .push_mst_select_i            ( slv_ar_select                  ),
         .push_i                       ( ar_push                                       ),
         .pop_axi_id_i                 ( slv_r_chan.id[0+:AxiLookBits]                 ),
         .pop_i                        ( slv_r_valid & slv_r_ready & slv_r_chan.last   )
@@ -555,8 +562,8 @@ module axi_demux #(
       .idx_o  (               )
     );
 
-   assign ar_ready = ar_valid & mst_resps_i[slv_ar_chan_select.ar_select].ar_ready;
-   assign aw_ready = aw_valid & mst_resps_i[slv_aw_chan_select.aw_select].aw_ready;
+   assign ar_ready = ar_valid & mst_resps_i[slv_ar_select].ar_ready;
+   assign aw_ready = aw_valid & mst_resps_i[slv_aw_select].aw_ready;
 
     // process that defines the individual demuxes and assignments for the arbitration
     // as mst_reqs_o has to be drivem from the same always comb block!
@@ -568,9 +575,9 @@ module axi_demux #(
 
       for (int unsigned i = 0; i < NoMstPorts; i++) begin
         // AW channel
-        mst_reqs_o[i].aw       = slv_aw_chan_select.aw_chan;
+        mst_reqs_o[i].aw       = slv_aw_chan;
         mst_reqs_o[i].aw_valid = 1'b0;
-        if (aw_valid && (slv_aw_chan_select.aw_select == i)) begin
+        if (aw_valid && (slv_aw_select == i)) begin
           mst_reqs_o[i].aw_valid = 1'b1;
         end
 
@@ -587,9 +594,9 @@ module axi_demux #(
         mst_reqs_o[i].b_ready = mst_b_readies[i];
 
         // AR channel
-        mst_reqs_o[i].ar       = slv_ar_chan_select.ar_chan;
+        mst_reqs_o[i].ar       = slv_ar_chan;
         mst_reqs_o[i].ar_valid = 1'b0;
-        if (ar_valid && (slv_ar_chan_select.ar_select == i)) begin
+        if (ar_valid && (slv_ar_select == i)) begin
           mst_reqs_o[i].ar_valid = 1'b1;
         end
 
@@ -635,13 +642,13 @@ module axi_demux #(
       $fatal(1, "slv_aw_chan_select unstable with valid set.");
     ar_stable: assert property( @(posedge clk_i) (ar_valid && !ar_ready)
                                |=> $stable(slv_ar_chan_select)) else
-      $fatal(1, "slv_aw_chan_select unstable with valid set.");
+      $fatal(1, "slv_ar_chan_select unstable with valid set.");
     internal_ar_select: assert property( @(posedge clk_i)
-        (ar_valid |-> slv_ar_chan_select.ar_select < NoMstPorts))
-      else $fatal(1, "slv_ar_chan_select.ar_select illegal while ar_valid.");
+        (ar_valid |-> slv_ar_select < NoMstPorts))
+      else $fatal(1, "slv_ar_select illegal while ar_valid.");
     internal_aw_select: assert property( @(posedge clk_i)
-        (aw_valid |-> slv_aw_chan_select.aw_select < NoMstPorts))
-      else $fatal(1, "slv_aw_chan_select.aw_select illegal while aw_valid.");
+        (aw_valid |-> slv_aw_select < NoMstPorts))
+      else $fatal(1, "slv_aw_select illegal while aw_valid.");
     `ASSUME(NoAtopAllowed, !AtopSupport && slv_req_i.aw_valid |-> slv_req_i.aw.atop == '0)
 `endif
 `endif
-- 
2.16.5

