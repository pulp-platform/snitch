From 47f7e2068fe9472b4d7205f82dfec0846d87851a Mon Sep 17 00:00:00 2001
From: Florian Zaruba <zarubaf@iis.ee.ethz.ch>
Date: Wed, 25 Aug 2021 13:08:00 +0200
Subject: [PATCH] axi: Improve isolation with termination

An isolated port could mean hanging the entire system. This commit
improves that by optionally terminating AXI transaction in case the
adapter is isolated.
---
 src/axi_isolate.sv | 170 +++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 156 insertions(+), 14 deletions(-)

diff --git a/src/axi_isolate.sv b/src/axi_isolate.sv
index 3dd9dfc..18ae663 100644
--- a/src/axi_isolate.sv
+++ b/src/axi_isolate.sv
@@ -13,24 +13,156 @@
 //         Florian Zaruba <zarubaf@iis.ethz.ch>
 //         Wolfgang Roenninger <wroennin@ethz.ch>
 
-// Description:
-//
-// This module can isolate the AXI4+ATOPs bus on the master port from the slave port.  When the
-// isolation is not active, the two ports are directly connected.
-//
-// This module counts how many open transactions are currently in flight on the read and write
-// channels.  It is further capable of tracking the amount of open atomic transactions with read
-// responses.
-//
-// The isolation interface has two signals: `isolate_i` and `isolated_o`.  When `isolate_i` is
-// asserted, all open transactions are gracefully terminated.  When no transactions are in flight
-// anymore, the `isolated_o` output is asserted.  As long as `isolated_o` is asserted, all output
-// signals in `mst_req_o` are silenced to `'0`. When isolated, new transactions initiated on the
-// slave port are stalled until the isolation is terminated by deasserting `isolate_i`.
+/// # Description
+///
+/// This module can isolate the AXI4+ATOPs bus on the master port from the slave port.  When the
+/// isolation is not active, the two ports are directly connected.
+///
+/// This module counts how many open transactions are currently in flight on the read and write
+/// channels.  It is further capable of tracking the amount of open atomic transactions with read
+/// responses.
+///
+/// The isolation interface has two signals: `isolate_i` and `isolated_o`.  When `isolate_i` is
+/// asserted, all open transactions are gracefully terminated.  When no transactions are in flight
+/// anymore, the `isolated_o` output is asserted.  As long as `isolated_o` is asserted, all output
+/// signals in `mst_req_o` are silenced to `'0`. When isolated, new transactions initiated on the
+/// slave port are stalled until the isolation is terminated by deasserting `isolate_i`.
+///
+/// ## Response
+///
+/// If the `TerminateTransaction` parameter is set to `1`, the module will
+/// return response errors in case there is an incoming transaction while the
+/// module isolates. The data returned on the bus is `1501A7ED` (hexspeak for
+/// isolated).
+///
+/// In case `TerminateTransaction` is set to `0` the transaction will block
+/// indefinitely until the module is de-isolated again.
+
 
 `include "common_cells/registers.svh"
 
 module axi_isolate #(
+  /// Number of pending requests per channel.
+  parameter int unsigned NumPending   = 32'd16,
+  /// Gracefully terminate all incoming transaction in case of isolation
+  /// properly throwing an error response.
+  parameter bit TerminateTransaction  = 1'b0,
+  /// Support atomic transactions.
+  parameter bit AtopSupport           = 1'b1,
+  /// AXI ID width.
+  parameter int unsigned AxiIdWidth   = 32'd0,
+  /// AXI address width.
+  parameter int unsigned AxiAddrWidth = 32'd0,
+  /// AXI data width.
+  parameter int unsigned AxiDataWidth = 32'd0,
+  /// AXI user width.
+  parameter int unsigned AxiUserWidth = 32'd0,
+  /// AXI request struct definition.
+  parameter type         req_t       = logic,
+  /// AXI response struct definition.
+  parameter type         resp_t      = logic
+) (
+  input  logic  clk_i,      // clock
+  input  logic  rst_ni,     // reset
+  input  req_t  slv_req_i,  // slave port request struct
+  output resp_t slv_resp_o, // slave port response struct
+  output req_t  mst_req_o,  // master port request struct
+  input  resp_t mst_resp_i, // master port response struct
+  input  logic  isolate_i,  // isolate master port from slave port
+  output logic  isolated_o  // master port is isolated from slave port
+);
+
+  `include "axi/typedef.svh"
+
+  typedef logic [AxiIdWidth-1:0]     id_t;
+  typedef logic [AxiAddrWidth-1:0]   addr_t;
+  typedef logic [AxiDataWidth-1:0]   data_t;
+  typedef logic [AxiDataWidth/8-1:0] strb_t;
+  typedef logic [AxiUserWidth-1:0]   user_t;
+
+  `AXI_TYPEDEF_AW_CHAN_T(aw_chan_t, addr_t, id_t, user_t)
+  `AXI_TYPEDEF_W_CHAN_T(w_chan_t, data_t, strb_t, user_t)
+  `AXI_TYPEDEF_B_CHAN_T(b_chan_t, id_t, user_t)
+
+  `AXI_TYPEDEF_AR_CHAN_T(ar_chan_t, addr_t, id_t, user_t)
+  `AXI_TYPEDEF_R_CHAN_T(r_chan_t, data_t, id_t, user_t)
+
+  req_t [1:0] demux_req;
+  resp_t [1:0] demux_rsp;
+
+  if (TerminateTransaction) begin
+    axi_demux #(
+      .AtopSupport    ( AtopSupport ),
+      .AxiIdWidth     ( AxiIdWidth  ),
+      .aw_chan_t      ( aw_chan_t   ),
+      .w_chan_t       ( w_chan_t    ),
+      .b_chan_t       ( b_chan_t    ),
+      .ar_chan_t      ( ar_chan_t   ),
+      .r_chan_t       ( r_chan_t    ),
+      .req_t          ( req_t       ),
+      .resp_t         ( resp_t      ),
+      .NoMstPorts     ( 2           ),
+      .MaxTrans       ( NumPending  ),
+      // We don't need many bits here as the common case will be the to go for the
+      // pass-through.
+      .AxiLookBits    ( 1           ),
+      .FallThrough    ( 1'b1        ),
+      .SpillAw        ( 1'b0        ),
+      .SpillW         ( 1'b0        ),
+      .SpillB         ( 1'b0        ),
+      .SpillAr        ( 1'b0        ),
+      .SpillR         ( 1'b0        )
+    ) i_axi_demux (
+      .clk_i,
+      .rst_ni,
+      .test_i          ( 1'b0       ),
+      .slv_aw_select_i ( isolated_o ),
+      .slv_ar_select_i ( isolated_o ),
+      .slv_req_i,
+      .slv_resp_o,
+      .mst_reqs_o      ( demux_req ),
+      .mst_resps_i     ( demux_rsp )
+    );
+
+    axi_err_slv #(
+      .AxiIdWidth  ( AxiIdWidth ),
+      .req_t       ( req_t ),
+      .resp_t      ( resp_t ),
+      .Resp        ( axi_pkg::RESP_DECERR ),
+      .RespData    ( 'h1501A7ED           ),
+      .ATOPs       ( AtopSupport          ),
+      .MaxTrans    ( 1                    )
+    ) i_axi_err_slv (
+      .clk_i,
+      .rst_ni,
+      .test_i (1'b0),
+      // slave port
+      .slv_req_i  ( demux_req[1] ),
+      .slv_resp_o ( demux_rsp[1] )
+    );
+  end else begin
+    assign demux_req[0] = slv_req_i;
+    assign slv_resp_o = demux_rsp[0];
+  end
+
+  axi_isolate_inner #(
+    .NumPending ( NumPending ),
+    .req_t      ( req_t       ),
+    .resp_t     ( resp_t      )
+  ) i_axi_isolate (
+    .clk_i,
+    .rst_ni,
+    .slv_req_i  ( demux_req[0] ),
+    .slv_resp_o ( demux_rsp[0] ),
+    .mst_req_o,
+    .mst_resp_i,
+    .isolate_i,
+    .isolated_o
+  );
+
+endmodule
+
+module axi_isolate_inner #(
   parameter int unsigned NumPending = 32'd16, // Number of pending requests per channel
   parameter type         req_t      = logic,  // AXI request struct definition
   parameter type         resp_t     = logic   // AXI response struct definition
@@ -280,6 +412,10 @@ endmodule
 
 module axi_isolate_intf #(
   parameter int unsigned NUM_PENDING    = 32'd16, // Number of pending requests
+  /// Gracefully terminate all incoming transaction in case of isolation
+  /// properly throwing an error response.
+  parameter bit TerminateTransaction    = 1'b0,
+  parameter bit AtopSupport             = 1'b1,
   parameter int unsigned AXI_ID_WIDTH   = 32'd0,  // AXI ID width
   parameter int unsigned AXI_ADDR_WIDTH = 32'd0,  // AXI address width
   parameter int unsigned AXI_DATA_WIDTH = 32'd0,  // AXI data width
@@ -319,6 +455,12 @@ module axi_isolate_intf #(
 
   axi_isolate #(
     .NumPending ( NUM_PENDING ), // Number of pending requests per channel
+    .TerminateTransaction ( TerminateTransaction ),
+    .AtopSupport ( AtopSupport ),
+    .AxiIdWidth ( AXI_ID_WIDTH ),
+    .AxiAddrWidth ( AXI_ADDR_WIDTH ),
+    .AxiDataWidth ( AXI_DATA_WIDTH ),
+    .AxiUserWidth ( AXI_USER_WIDTH ),
     .req_t      ( req_t       ), // AXI request struct definition
     .resp_t     ( resp_t      )  // AXI response struct definition
   ) i_axi_isolate (
-- 
2.25.1.377.g2d2118b814

