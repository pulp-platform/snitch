From c864de984379bca2883c21eb20c22b1966d435e9 Mon Sep 17 00:00:00 2001
From: Noah Huetter <noahhuetter@gmail.com>
Date: Mon, 21 Feb 2022 17:02:06 +0100
Subject: [vendor/axi] Add AXI TLB

Signed-off-by: Noah Huetter <noahhuetter@gmail.com>
---
 Bender.yml        |   2 +
 src/axi_tlb.sv    | 377 ++++++++++++++++++++++++++
 src/axi_tlb_l1.sv | 311 +++++++++++++++++++++
 3 files changed, 690 insertions(+)
 create mode 100644 hw/vendor/snitch/src/axi_tlb.sv
 create mode 100644 hw/vendor/snitch/src/axi_tlb_l1.sv

diff --git a/Bender.yml b/Bender.yml
index a3f49ba..18c99b3 100644
--- a/Bender.yml
+++ b/Bender.yml
@@ -53,9 +53,11 @@ sources:
   - src/axi_err_slv.sv
   - src/axi_dw_converter.sv
   - src/axi_multicut.sv
+  - src/axi_tlb_l1.sv
   - src/axi_to_axi_lite.sv
   # Level 4
   - src/axi_lite_xbar.sv
+  - src/axi_tlb.sv
   - src/axi_xbar.sv
 
   - target: synth_test
diff --git a/src/axi_tlb.sv b/src/axi_tlb.sv
new file mode 100644
index 0000000..e600b90
--- /dev/null
+++ b/src/axi_tlb.sv
@@ -0,0 +1,377 @@
+// Copyright (c) 2020 ETH Zurich, University of Bologna
+//
+// Copyright and related rights are licensed under the Solderpad Hardware
+// License, Version 0.51 (the "License"); you may not use this file except in
+// compliance with the License.  You may obtain a copy of the License at
+// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law
+// or agreed to in writing, software, hardware and materials distributed under
+// this License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
+// CONDITIONS OF ANY KIND, either express or implied. See the License for the
+// specific language governing permissions and limitations under the License.
+
+// Author: Andreas Kurth  <akurth@iis.ee.ethz.ch>
+
+`include "axi/typedef.svh"
+`include "common_cells/registers.svh"
+
+/// AXI4+ATOP Translation Lookaside Buffer (TLB)
+module axi_tlb #(
+  /// Address width of main AXI4+ATOP slave port
+  parameter int unsigned AxiSlvPortAddrWidth = 0,
+  /// Address width of main AXI4+ATOP master port
+  parameter int unsigned AxiMstPortAddrWidth = 0,
+  /// Data width of main AXI4+ATOP slave and master port
+  parameter int unsigned AxiDataWidth = 0,
+  /// ID width of main AXI4+ATOP slave and master port
+  parameter int unsigned AxiIdWidth = 0,
+  /// Width of user signal of main AXI4+ATOP slave and master port
+  parameter int unsigned AxiUserWidth = 0,
+  /// Maximum number of in-flight transactions on main AXI4+ATOP slave port
+  parameter int unsigned AxiSlvPortMaxTxns = 0,
+  /// Address width of configuration AXI4-Lite port
+  parameter int unsigned CfgAxiAddrWidth = 0,
+  /// Data width of configuration AXI4-Lite port
+  parameter int unsigned CfgAxiDataWidth = 0,
+  /// Number of entries in L1 TLB
+  parameter int unsigned L1NumEntries = 0,
+  /// Pipeline AW and AR channel after L1 TLB
+  parameter bit L1CutAx = 1'b1,
+  /// Request type of main AXI4+ATOP slave port
+  parameter type slv_req_t = logic,
+  /// Request type of main AXI4+ATOP master port
+  parameter type mst_req_t = logic,
+  /// Response type of main AXI4+ATOP slave and master ports
+  parameter type axi_resp_t = logic,
+  /// Request type of configuration AXI4-Lite slave port
+  parameter type lite_req_t = logic,
+  /// Response type of configuration AXI4-Lite slave port
+  parameter type lite_resp_t = logic
+) (
+  /// Rising-edge clock of all ports
+  input  logic        clk_i,
+  /// Asynchronous reset, active low
+  input  logic        rst_ni,
+  /// Test mode enable
+  input  logic        test_en_i,
+  /// Main slave port request
+  input  slv_req_t    slv_req_i,
+  /// Main slave port response
+  output axi_resp_t   slv_resp_o,
+  /// Main master port request
+  output mst_req_t    mst_req_o,
+  /// Main master port response
+  input  axi_resp_t   mst_resp_i,
+  /// Configuration port request
+  input  lite_req_t   cfg_req_i,
+  /// Configuration port response
+  output lite_resp_t  cfg_resp_o
+);
+
+  typedef logic [AxiSlvPortAddrWidth-1:0] slv_addr_t;
+  typedef logic [AxiMstPortAddrWidth-1:0] mst_addr_t;
+  typedef logic [AxiDataWidth       -1:0] data_t;
+  typedef logic [AxiIdWidth         -1:0] id_t;
+  typedef logic [AxiDataWidth/8     -1:0] strb_t;
+  typedef logic [AxiUserWidth       -1:0] user_t;
+  `AXI_TYPEDEF_AW_CHAN_T(slv_aw_t, slv_addr_t, id_t, user_t)
+  `AXI_TYPEDEF_AW_CHAN_T(mst_aw_t, mst_addr_t, id_t, user_t)
+  `AXI_TYPEDEF_W_CHAN_T(w_t, data_t, strb_t, user_t)
+  `AXI_TYPEDEF_B_CHAN_T(b_t, id_t, user_t)
+  `AXI_TYPEDEF_AR_CHAN_T(slv_ar_t, slv_addr_t, id_t, user_t)
+  `AXI_TYPEDEF_AR_CHAN_T(mst_ar_t, mst_addr_t, id_t, user_t)
+  `AXI_TYPEDEF_R_CHAN_T(r_t, data_t, id_t, user_t)
+  /// Translation lookup result.
+  typedef struct packed {
+    logic       hit;
+    mst_addr_t  addr;
+  } tlb_res_t;
+
+  // Fork input requests into L1 TLB.
+  logic aw_valid,             ar_valid,
+        aw_ready,             ar_ready,
+        l1_tlb_wr_req_valid,  l1_tlb_rd_req_valid,
+        l1_tlb_wr_req_ready,  l1_tlb_rd_req_ready;
+  stream_fork #(
+    .N_OUP  ( 2 )
+  ) i_aw_fork (
+    .clk_i,
+    .rst_ni,
+    .valid_i  ( slv_req_i.aw_valid              ),
+    .ready_o  ( slv_resp_o.aw_ready             ),
+    .valid_o  ( {l1_tlb_wr_req_valid, aw_valid} ),
+    .ready_i  ( {l1_tlb_wr_req_ready, aw_ready} )
+  );
+  stream_fork #(
+    .N_OUP  ( 2 )
+  ) i_ar_fork (
+    .clk_i,
+    .rst_ni,
+    .valid_i  ( slv_req_i.ar_valid              ),
+    .ready_o  ( slv_resp_o.ar_ready             ),
+    .valid_o  ( {l1_tlb_rd_req_valid, ar_valid} ),
+    .ready_i  ( {l1_tlb_rd_req_ready, ar_ready} )
+  );
+
+  // L1 TLB
+  tlb_res_t l1_tlb_wr_res,        l1_tlb_rd_res;
+  logic     l1_tlb_wr_res_valid,  l1_tlb_rd_res_valid,
+            l1_tlb_wr_res_ready,  l1_tlb_rd_res_ready;
+  axi_tlb_l1 #(
+    .InpAddrWidth     ( AxiSlvPortAddrWidth ),
+    .OupAddrWidth     ( AxiMstPortAddrWidth ),
+    .NumEntries       ( L1NumEntries        ),
+    .CfgAxiAddrWidth  ( CfgAxiAddrWidth     ),
+    .CfgAxiDataWidth  ( CfgAxiDataWidth     ),
+    .lite_req_t       ( lite_req_t          ),
+    .lite_resp_t      ( lite_resp_t         ),
+    .res_t            ( tlb_res_t           )
+  ) i_l1_tlb (
+    .clk_i,
+    .rst_ni,
+    .test_en_i,
+    .wr_req_addr_i  ( slv_req_i.aw.addr   ),
+    .wr_req_valid_i ( l1_tlb_wr_req_valid ),
+    .wr_req_ready_o ( l1_tlb_wr_req_ready ),
+    .wr_res_o       ( l1_tlb_wr_res       ),
+    .wr_res_valid_o ( l1_tlb_wr_res_valid ),
+    .wr_res_ready_i ( l1_tlb_wr_res_ready ),
+    .rd_req_addr_i  ( slv_req_i.ar.addr   ),
+    .rd_req_valid_i ( l1_tlb_rd_req_valid ),
+    .rd_req_ready_o ( l1_tlb_rd_req_ready ),
+    .rd_res_o       ( l1_tlb_rd_res       ),
+    .rd_res_valid_o ( l1_tlb_rd_res_valid ),
+    .rd_res_ready_i ( l1_tlb_rd_res_ready ),
+    .cfg_req_i,
+    .cfg_resp_o
+  );
+
+  // Join L1 TLB responses with Ax requests into demultiplexer.
+  slv_req_t   demux_req;
+  axi_resp_t  demux_resp;
+  stream_join #(
+    .N_INP  ( 2 )
+  ) i_aw_join (
+    .inp_valid_i  ( {l1_tlb_wr_res_valid, aw_valid} ),
+    .inp_ready_o  ( {l1_tlb_wr_res_ready, aw_ready} ),
+    .oup_valid_o  ( demux_req.aw_valid              ),
+    .oup_ready_i  ( demux_resp.aw_ready             )
+  );
+  assign demux_req.aw = slv_req_i.aw;
+  stream_join #(
+    .N_INP  ( 2 )
+  ) i_ar_join (
+    .inp_valid_i  ( {l1_tlb_rd_res_valid, ar_valid} ),
+    .inp_ready_o  ( {l1_tlb_rd_res_ready, ar_ready} ),
+    .oup_valid_o  ( demux_req.ar_valid              ),
+    .oup_ready_i  ( demux_resp.ar_ready             )
+  );
+  assign demux_req.ar = slv_req_i.ar;
+
+  // Connect W, B, and R channels directly between demultiplexer and slave port.
+  assign demux_req.w = slv_req_i.w;
+  assign demux_req.w_valid = slv_req_i.w_valid;
+  assign slv_resp_o.w_ready = demux_resp.w_ready;
+  assign slv_resp_o.b = demux_resp.b;
+  assign slv_resp_o.b_valid = demux_resp.b_valid;
+  assign demux_req.b_ready = slv_req_i.b_ready;
+  assign slv_resp_o.r = demux_resp.r;
+  assign slv_resp_o.r_valid = demux_resp.r_valid;
+  assign demux_req.r_ready = slv_req_i.r_ready;
+
+  // Demultiplex between address modifier for TLB hits and error slave for TLB misses.
+  slv_req_t   mod_addr_req,   err_slv_req;
+  axi_resp_t  mod_addr_resp,  err_slv_resp;
+  axi_demux #(
+    .AxiIdWidth   ( AxiIdWidth        ),
+    .aw_chan_t    ( slv_aw_t          ),
+    .w_chan_t     ( w_t               ),
+    .b_chan_t     ( b_t               ),
+    .ar_chan_t    ( slv_ar_t          ),
+    .r_chan_t     ( r_t               ),
+    .req_t        ( slv_req_t         ),
+    .resp_t       ( axi_resp_t        ),
+    .NoMstPorts   ( 2                 ),
+    .MaxTrans     ( AxiSlvPortMaxTxns ),
+    .AxiLookBits  ( AxiIdWidth        ),
+    .FallThrough  ( 1'b0              ),
+    .SpillAw      ( L1CutAx           ),
+    .SpillW       ( 1'b0              ),
+    .SpillB       ( 1'b0              ),
+    .SpillAr      ( L1CutAx           ),
+    .SpillR       ( 1'b0              )
+  ) i_slv_demux (
+    .clk_i,
+    .rst_ni,
+    .test_i           ( test_en_i                       ),
+    .slv_req_i        ( demux_req                       ),
+    .slv_aw_select_i  ( l1_tlb_wr_res.hit               ),
+    .slv_ar_select_i  ( l1_tlb_rd_res.hit               ),
+    .slv_resp_o       ( demux_resp                      ),
+    .mst_reqs_o       ( {mod_addr_req,   err_slv_req}   ),
+    .mst_resps_i      ( {mod_addr_resp,  err_slv_resp}  )
+  );
+
+  // Pipeline translated address together with AW and AR.
+  mst_addr_t  l1_tlb_wr_res_addr_buf,
+              l1_tlb_rd_res_addr_buf;
+  spill_register #(
+    .T      ( mst_addr_t  ),
+    .Bypass ( ~L1CutAx    )
+  ) i_spill_reg_wr_addr (
+    .clk_i,
+    .rst_ni,
+    .valid_i  ( demux_req.aw_valid && l1_tlb_wr_res.hit && demux_resp.aw_ready  ),
+    .ready_o  ( /* unused */                                                    ),
+    .data_i   ( l1_tlb_wr_res.addr                                              ),
+    .valid_o  ( /* unused */                                                    ),
+    .ready_i  ( mod_addr_req.aw_valid && mod_addr_resp.aw_ready                 ),
+    .data_o   ( l1_tlb_wr_res_addr_buf                                          )
+  );
+  spill_register #(
+    .T      ( mst_addr_t  ),
+    .Bypass ( ~L1CutAx    )
+  ) i_spill_reg_rd_addr (
+    .clk_i,
+    .rst_ni,
+    .valid_i  ( demux_req.ar_valid && l1_tlb_rd_res.hit && demux_resp.ar_ready  ),
+    .ready_o  ( /* unused */                                                    ),
+    .data_i   ( l1_tlb_rd_res.addr                                              ),
+    .valid_o  ( /* unused */                                                    ),
+    .ready_i  ( mod_addr_req.ar_valid && mod_addr_resp.ar_ready                 ),
+    .data_o   ( l1_tlb_rd_res_addr_buf                                          )
+  );
+
+  // Handle TLB hits: Replace address and forward to master port.
+  axi_modify_address #(
+    .slv_req_t  ( slv_req_t   ),
+    .mst_addr_t ( mst_addr_t  ),
+    .mst_req_t  ( mst_req_t   ),
+    .axi_resp_t ( axi_resp_t  )
+  ) i_mod_addr (
+    .slv_req_i      ( mod_addr_req            ),
+    .slv_resp_o     ( mod_addr_resp           ),
+    .mst_aw_addr_i  ( l1_tlb_wr_res_addr_buf  ),
+    .mst_ar_addr_i  ( l1_tlb_rd_res_addr_buf  ),
+    .mst_req_o,
+    .mst_resp_i
+  );
+
+  // Handle TLB misses: Absorb burst and respond with slave error.
+  axi_err_slv #(
+    .AxiIdWidth   ( AxiIdWidth            ),
+    .req_t        ( slv_req_t             ),
+    .resp_t       ( axi_resp_t            ),
+    .Resp         ( axi_pkg::RESP_SLVERR  ),
+    .RespWidth    ( 32'd32                ),
+    .RespData     ( 32'hDEC0FFEE          ),
+    .ATOPs        ( 1'b1                  ),
+    .MaxTrans     ( 1                     )
+  ) i_err_slv (
+    .clk_i,
+    .rst_ni,
+    .test_i     ( test_en_i     ),
+    .slv_req_i  ( err_slv_req   ),
+    .slv_resp_o ( err_slv_resp  )
+  );
+
+  // TODO: many parameter and type assertions
+endmodule
+
+`include "axi/assign.svh"
+`include "axi/typedef.svh"
+
+/// Interface variant of [`axi_tlb`](module.axi_tlb)
+module axi_tlb_intf #(
+  parameter int unsigned AXI_SLV_PORT_ADDR_WIDTH = 0,
+  parameter int unsigned AXI_MST_PORT_ADDR_WIDTH = 0,
+  parameter int unsigned AXI_DATA_WIDTH = 0,
+  parameter int unsigned AXI_ID_WIDTH = 0,
+  parameter int unsigned AXI_USER_WIDTH = 0,
+  parameter int unsigned AXI_SLV_PORT_MAX_TXNS = 0,
+  parameter int unsigned CFG_AXI_ADDR_WIDTH = 0,
+  parameter int unsigned CFG_AXI_DATA_WIDTH = 0,
+  parameter int unsigned L1_NUM_ENTRIES = 0,
+  parameter bit L1_CUT_AX = 1'b1
+) (
+  input  logic    clk_i,
+  input  logic    rst_ni,
+  input  logic    test_en_i,
+  AXI_BUS.Slave   slv,
+  AXI_BUS.Master  mst,
+  AXI_LITE.Slave  cfg
+);
+
+  typedef logic [AXI_SLV_PORT_ADDR_WIDTH-1:0] slv_addr_t;
+  typedef logic [AXI_MST_PORT_ADDR_WIDTH-1:0] mst_addr_t;
+  typedef logic [AXI_DATA_WIDTH-1:0]          data_t;
+  typedef logic [AXI_ID_WIDTH-1:0]            id_t;
+  typedef logic [AXI_DATA_WIDTH/8-1:0]        strb_t;
+  typedef logic [AXI_USER_WIDTH-1:0]          user_t;
+  `AXI_TYPEDEF_AW_CHAN_T(slv_aw_t, slv_addr_t, id_t, user_t)
+  `AXI_TYPEDEF_AW_CHAN_T(mst_aw_t, mst_addr_t, id_t, user_t)
+  `AXI_TYPEDEF_W_CHAN_T(w_t, data_t, strb_t, user_t)
+  `AXI_TYPEDEF_B_CHAN_T(b_t, id_t, user_t)
+  `AXI_TYPEDEF_AR_CHAN_T(slv_ar_t, slv_addr_t, id_t, user_t)
+  `AXI_TYPEDEF_AR_CHAN_T(mst_ar_t, mst_addr_t, id_t, user_t)
+  `AXI_TYPEDEF_R_CHAN_T(r_t, data_t, id_t, user_t)
+  `AXI_TYPEDEF_REQ_T(slv_req_t, slv_aw_t, w_t, slv_ar_t)
+  `AXI_TYPEDEF_REQ_T(mst_req_t, mst_aw_t, w_t, mst_ar_t)
+  `AXI_TYPEDEF_RESP_T(axi_resp_t, b_t, r_t)
+
+  slv_req_t   slv_req;
+  mst_req_t   mst_req;
+  axi_resp_t  slv_resp,
+              mst_resp;
+
+  `AXI_ASSIGN_TO_REQ(slv_req, slv)
+  `AXI_ASSIGN_FROM_RESP(slv, slv_resp)
+
+  `AXI_ASSIGN_FROM_REQ(mst, mst_req)
+  `AXI_ASSIGN_TO_RESP(mst_resp, mst)
+
+  typedef logic [CFG_AXI_ADDR_WIDTH-1:0]    lite_addr_t;
+  typedef logic [CFG_AXI_DATA_WIDTH-1:0]    lite_data_t;
+  typedef logic [CFG_AXI_DATA_WIDTH/8-1:0]  lite_strb_t;
+  `AXI_LITE_TYPEDEF_AW_CHAN_T(lite_aw_t, lite_addr_t)
+  `AXI_LITE_TYPEDEF_W_CHAN_T(lite_w_t, lite_data_t, lite_strb_t)
+  `AXI_LITE_TYPEDEF_B_CHAN_T(lite_b_t)
+  `AXI_LITE_TYPEDEF_AR_CHAN_T(lite_ar_t, lite_addr_t)
+  `AXI_LITE_TYPEDEF_R_CHAN_T(lite_r_t, lite_data_t)
+  `AXI_LITE_TYPEDEF_REQ_T(lite_req_t, lite_aw_t, lite_w_t, lite_ar_t)
+  `AXI_LITE_TYPEDEF_RESP_T(lite_resp_t, lite_b_t, lite_r_t)
+
+  lite_req_t  cfg_req;
+  lite_resp_t cfg_resp;
+
+  `AXI_LITE_ASSIGN_TO_REQ(cfg_req, cfg)
+  `AXI_LITE_ASSIGN_FROM_RESP(cfg, cfg_resp)
+
+  axi_tlb #(
+    .AxiSlvPortAddrWidth  ( AXI_SLV_PORT_ADDR_WIDTH ),
+    .AxiMstPortAddrWidth  ( AXI_MST_PORT_ADDR_WIDTH ),
+    .AxiDataWidth         ( AXI_DATA_WIDTH          ),
+    .AxiIdWidth           ( AXI_ID_WIDTH            ),
+    .AxiUserWidth         ( AXI_USER_WIDTH          ),
+    .AxiSlvPortMaxTxns    ( AXI_SLV_PORT_MAX_TXNS   ),
+    .CfgAxiAddrWidth      ( CFG_AXI_ADDR_WIDTH      ),
+    .CfgAxiDataWidth      ( CFG_AXI_DATA_WIDTH      ),
+    .L1NumEntries         ( L1_NUM_ENTRIES          ),
+    .L1CutAx              ( L1_CUT_AX               ),
+    .slv_req_t            ( slv_req_t               ),
+    .mst_req_t            ( mst_req_t               ),
+    .axi_resp_t           ( axi_resp_t              ),
+    .lite_req_t           ( lite_req_t              ),
+    .lite_resp_t          ( lite_resp_t             )
+  ) i_axi_tlb (
+    .clk_i,
+    .rst_ni,
+    .test_en_i,
+    .slv_req_i  ( slv_req   ),
+    .slv_resp_o ( slv_resp  ),
+    .mst_req_o  ( mst_req   ),
+    .mst_resp_i ( mst_resp  ),
+    .cfg_req_i  ( cfg_req   ),
+    .cfg_resp_o ( cfg_resp  )
+  );
+
+endmodule
diff --git a/src/axi_tlb_l1.sv b/src/axi_tlb_l1.sv
new file mode 100644
index 0000000..06a3536
--- /dev/null
+++ b/src/axi_tlb_l1.sv
@@ -0,0 +1,311 @@
+// Copyright (c) 2020 ETH Zurich, University of Bologna
+//
+// Copyright and related rights are licensed under the Solderpad Hardware
+// License, Version 0.51 (the "License"); you may not use this file except in
+// compliance with the License.  You may obtain a copy of the License at
+// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law
+// or agreed to in writing, software, hardware and materials distributed under
+// this License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
+// CONDITIONS OF ANY KIND, either express or implied. See the License for the
+// specific language governing permissions and limitations under the License.
+
+// Author: Andreas Kurth  <akurth@iis.ee.ethz.ch>
+
+/// Internal module of [`axi_tlb`](module.axi_tlb): L1 translation table.
+module axi_tlb_l1 #(
+  /// Width of addresses in input address space
+  parameter int unsigned InpAddrWidth = 0,
+  /// Width of addresses in output address space
+  parameter int unsigned OupAddrWidth = 0,
+  /// Number of entries in translation table
+  parameter int unsigned NumEntries = 0,
+  /// Address width of configuration AXI4-Lite port
+  parameter int unsigned CfgAxiAddrWidth = 0,
+  /// Data width of configuration AXI4-Lite port
+  parameter int unsigned CfgAxiDataWidth = 0,
+  /// Request type of configuration AXI4-Lite slave port
+  parameter type lite_req_t = logic,
+  /// Response type of configuration AXI4-Lite slave port
+  parameter type lite_resp_t = logic,
+  /// Type of translation result.  Must have a single-bit field `hit` and an `addr` field as wide as
+  /// the output address.
+  parameter type res_t = logic,
+  /// Derived (=do not override) type of input addresses
+  parameter type inp_addr_t = logic [InpAddrWidth-1:0],
+  /// Derived (=do not override) type of output addresses
+  parameter type oup_addr_t = logic [OupAddrWidth-1:0]
+) (
+  /// Rising-edge clock of all ports
+  input  logic        clk_i,
+  /// Asynchronous reset, active low
+  input  logic        rst_ni,
+  /// Test mode enable
+  input  logic        test_en_i,
+  /// Write request input address
+  input  inp_addr_t   wr_req_addr_i,
+  /// Write request valid
+  input  logic        wr_req_valid_i,
+  /// Write request ready
+  output logic        wr_req_ready_o,
+  /// Write translation result
+  output res_t        wr_res_o,
+  /// Write translation result valid
+  output logic        wr_res_valid_o,
+  /// Write translation result ready
+  input  logic        wr_res_ready_i,
+  /// Read request input address
+  input  inp_addr_t   rd_req_addr_i,
+  /// Read request valid
+  input  logic        rd_req_valid_i,
+  /// Read request ready
+  output logic        rd_req_ready_o,
+  /// Read translation result
+  output res_t        rd_res_o,
+  /// Read translation result valid
+  output logic        rd_res_valid_o,
+  /// Read translation result ready
+  input  logic        rd_res_ready_i,
+  /// Configuration port request
+  input  lite_req_t   cfg_req_i,
+  /// Configuration port response
+  output lite_resp_t  cfg_resp_o
+);
+
+  localparam int unsigned InpPageNumWidth = InpAddrWidth - 12;
+  localparam int unsigned OupPageNumWidth = OupAddrWidth - 12;
+
+  /// Page number in input address space
+  typedef logic [InpPageNumWidth-1:0] inp_page_t;
+  /// Page number in output address space
+  typedef logic [OupPageNumWidth-1:0] oup_page_t;
+  /// Translation table entry with 4 KiB page granularity
+  typedef struct packed {
+    /// Defines whether this entry can only be used for read accesses.
+    logic       read_only;
+    /// Defines whether this entry is valid.
+    logic       valid;
+    /// Number of first page in output address segment; that is, the output address segment starts
+    /// at this `base` page.
+    oup_page_t  base;
+    /// Number of last page (inclusive) in input address segment
+    inp_page_t  last;
+    /// Number of first page in input address segment
+    inp_page_t  first;
+  } entry_t;
+
+  entry_t [NumEntries-1:0]  entries;
+
+  // Write channel
+  axi_tlb_l1_chan #(
+    .NumEntries     ( NumEntries  ),
+    .IsWriteChannel ( 1'b1        ),
+    .req_addr_t     ( inp_addr_t  ),
+    .entry_t        ( entry_t     ),
+    .res_t          ( res_t       )
+  ) i_wr_chan (
+    .clk_i,
+    .rst_ni,
+    .test_en_i,
+    .entries_i    ( entries         ),
+    .req_addr_i   ( wr_req_addr_i   ),
+    .req_valid_i  ( wr_req_valid_i  ),
+    .req_ready_o  ( wr_req_ready_o  ),
+    .res_o        ( wr_res_o        ),
+    .res_valid_o  ( wr_res_valid_o  ),
+    .res_ready_i  ( wr_res_ready_i  )
+  );
+
+  // Read channel
+  axi_tlb_l1_chan #(
+    .NumEntries     ( NumEntries  ),
+    .IsWriteChannel ( 1'b0        ),
+    .req_addr_t     ( inp_addr_t  ),
+    .entry_t        ( entry_t     ),
+    .res_t          ( res_t       )
+  ) i_rd_chan (
+    .clk_i,
+    .rst_ni,
+    .test_en_i,
+    .entries_i    ( entries         ),
+    .req_addr_i   ( rd_req_addr_i   ),
+    .req_valid_i  ( rd_req_valid_i  ),
+    .req_ready_o  ( rd_req_ready_o  ),
+    .res_o        ( rd_res_o        ),
+    .res_valid_o  ( rd_res_valid_o  ),
+    .res_ready_i  ( rd_res_ready_i  )
+  );
+
+  // Table entries from AXI4-Lite registers, aligned to 32-bit words
+  localparam int unsigned InpPageNumBytes = cf_math_pkg::ceil_div(InpPageNumWidth, 8);
+  localparam int unsigned InpPageNumBytesAligned = cf_math_pkg::ceil_div(InpPageNumBytes, 4) * 4;
+  localparam int unsigned OupPageNumBytes = cf_math_pkg::ceil_div(OupPageNumWidth, 8);
+  localparam int unsigned OupPageNumBytesAligned = cf_math_pkg::ceil_div(OupPageNumBytes, 4) * 4;
+  localparam int unsigned FlagBytes = cf_math_pkg::ceil_div(2, 8);
+  localparam int unsigned FlagBytesAligned = cf_math_pkg::ceil_div(FlagBytes, 4) * 4;
+  localparam int unsigned EntryBytesAligned =
+      2 * InpPageNumBytesAligned + OupPageNumBytesAligned + FlagBytesAligned;
+  localparam int unsigned RegNumBytes = NumEntries * EntryBytesAligned;
+  typedef struct packed {
+    bit [FlagBytesAligned-1:0]        flags;
+    bit [OupPageNumBytesAligned-1:0]  base;
+    bit [InpPageNumBytesAligned-1:0]  last;
+    bit [InpPageNumBytesAligned-1:0]  first;
+  } entry_bits_t;
+  localparam entry_bits_t [NumEntries-1:0] AxiReadOnly = '{NumEntries{'{
+    flags:              {{FlagBytesAligned-FlagBytes{1'b1}},       {FlagBytes{1'b0}}},
+    base:   {{OupPageNumBytesAligned-OupPageNumBytes{1'b1}}, {OupPageNumBytes{1'b0}}},
+    last:   {{InpPageNumBytesAligned-InpPageNumBytes{1'b1}}, {InpPageNumBytes{1'b0}}},
+    first:  {{InpPageNumBytesAligned-InpPageNumBytes{1'b1}}, {InpPageNumBytes{1'b0}}},
+    default: 1'b0 // this should not be needed, but in doubt better make the bytes writeable
+  }}};
+  typedef struct packed {
+    logic [FlagBytesAligned*8-1:0]        flags;
+    logic [OupPageNumBytesAligned*8-1:0]  base;
+    logic [InpPageNumBytesAligned*8-1:0]  last;
+    logic [InpPageNumBytesAligned*8-1:0]  first;
+  } entry_padded_t;
+  typedef logic [7:0] byte_t;
+  byte_t [RegNumBytes-1:0] reg_q;
+  axi_lite_regs #(
+    .RegNumBytes    ( RegNumBytes           ),
+    .AxiAddrWidth   ( CfgAxiAddrWidth       ),
+    .AxiDataWidth   ( CfgAxiDataWidth       ),
+    .PrivProtOnly   ( 1'b0                  ),
+    .SecuProtOnly   ( 1'b0                  ),
+    .AxiReadOnly    ( AxiReadOnly           ),
+    .RegRstVal      ( '{RegNumBytes{8'h00}} ),
+    .req_lite_t     ( lite_req_t            ),
+    .resp_lite_t    ( lite_resp_t           )
+  ) i_regs (
+    .clk_i,
+    .rst_ni,
+    .axi_req_i    ( cfg_req_i             ),
+    .axi_resp_o   ( cfg_resp_o            ),
+    .wr_active_o  ( /* unused */          ),
+    .rd_active_o  ( /* unused */          ),
+    .reg_d_i      ( '{RegNumBytes{8'h00}} ),
+    .reg_load_i   ( '{RegNumBytes{1'b0}}  ),
+    .reg_q_o      ( reg_q                 )
+  );
+  entry_padded_t [NumEntries-1:0] entries_padded;
+  assign {>>{entries_padded}} = reg_q;
+  for (genvar i = 0; i < NumEntries; i++) begin : gen_unpack_entry
+    assign entries[i].first = entries_padded[i].first[InpPageNumWidth-1:0];
+    assign entries[i].last = entries_padded[i].last[InpPageNumWidth-1:0];
+    assign entries[i].base = entries_padded[i].base[OupPageNumWidth-1:0];
+    assign entries[i].valid = entries_padded[i].flags[0];
+    assign entries[i].read_only = entries_padded[i].flags[1];
+  end
+
+  `ifndef VERILATOR
+  // pragma translate_off
+  initial begin
+    assert (InpAddrWidth > 12)
+      else $fatal(1, "Input address space must be larger than one 4 KiB page!");
+    assert (OupAddrWidth > 12)
+      else $fatal(1, "Output address space must be larger than one 4 KiB page!");
+  end
+  // pragma translate_on
+  `endif
+
+endmodule
+
+
+/// Internal module of [`axi_tlb_l1`](module.axi_tlb_l1): Channel handler.
+module axi_tlb_l1_chan #(
+  /// Number of entries in translation table
+  parameter int unsigned NumEntries = 0,
+  /// Is this channel is used for writes?
+  parameter logic IsWriteChannel = 1'b0,
+  /// Type of request address
+  parameter type req_addr_t = logic,
+  /// Type of a translation table entry
+  parameter type entry_t = logic,
+  /// Type of translation result
+  parameter type res_t = logic
+) (
+  /// Rising-edge clock
+  input  logic                    clk_i,
+  /// Asynchronous reset, active low
+  input  logic                    rst_ni,
+  /// Test mode enable
+  input  logic                    test_en_i,
+  /// Translation table entries
+  input  entry_t [NumEntries-1:0] entries_i,
+  /// Request address
+  input  req_addr_t               req_addr_i,
+  /// Request valid
+  input  logic                    req_valid_i,
+  /// Request ready
+  output logic                    req_ready_o,
+  /// Translation result
+  output res_t                    res_o,
+  /// Translation result valid
+  output logic                    res_valid_o,
+  /// Translation result ready
+  input  logic                    res_ready_i
+);
+
+  localparam int unsigned EntryIdxWidth = NumEntries > 1 ? $clog2(NumEntries) : 1;
+
+  typedef logic [EntryIdxWidth-1:0] entry_idx_t;
+
+  // Determine all entries matching a request.
+  logic [NumEntries-1:0] entry_matches;
+  for (genvar i = 0; i < NumEntries; i++) begin : gen_matches
+    assign entry_matches[i] = entries_i[i].valid & req_valid_i
+        & ((req_addr_i >> 12) >= entries_i[i].first)
+        & ((req_addr_i >> 12) <= entries_i[i].last)
+        & (~IsWriteChannel | ~entries_i[i].read_only);
+  end
+
+  // Determine entry with lowest index that matches the request.
+  entry_idx_t match_idx;
+  logic       no_match;
+  lzc #(
+    .WIDTH  ( NumEntries  ),
+    .MODE   ( 1'b0        )   // trailing zeros -> lowest match
+  ) i_lzc (
+    .in_i     ( entry_matches ),
+    .cnt_o    ( match_idx     ),
+    .empty_o  ( no_match      )
+  );
+
+  // Handle request and translate address.
+  logic res_valid, res_ready;
+  res_t res;
+  always_comb begin
+    res_valid = 1'b0;
+    req_ready_o = 1'b0;
+    res = '{default: '0};
+    if (req_valid_i) begin
+      if (no_match) begin
+        res = '{default: '0};
+      end else begin
+        res.hit = 1'b1;
+        res.addr = {(
+          ((req_addr_i >> 12) - entries_i[match_idx].first) + entries_i[match_idx].base
+        ), req_addr_i[11:0]};
+      end
+      res_valid = 1'b1;
+      req_ready_o = res_ready;
+    end
+  end
+  // Store translation in fall-through register.  This prevents changes in the translated address
+  // due to changes in `entries_i` while downstream handshake is outstanding.
+  fall_through_register #(
+    .T  ( res_t )
+  ) i_res_ft_reg (
+    .clk_i,
+    .rst_ni,
+    .clr_i      ( 1'b0        ),
+    .testmode_i ( test_en_i   ),
+    .valid_i    ( res_valid   ),
+    .ready_o    ( res_ready   ),
+    .data_i     ( res         ),
+    .valid_o    ( res_valid_o ),
+    .ready_i    ( res_ready_i ),
+    .data_o     ( res_o       )
+  );
+
+endmodule
-- 
2.16.5

