From c6611c9ee464a1438cab17ad1f45ea854dba6dc5 Mon Sep 17 00:00:00 2001
From: Florian Zaruba <zarubaf@iis.ee.ethz.ch>
Date: Wed, 26 May 2021 12:28:59 +0200
Subject: [PATCH] vendor VCS patches

---
 test/cb_filter_tb.sv       | 324 ++++++++++++++++++-------------------
 test/stream_register_tb.sv | 159 +++++++++---------
 test/sub_per_hash_tb.sv    |  62 ++++---
 3 files changed, 269 insertions(+), 276 deletions(-)

diff --git a/test/cb_filter_tb.sv b/test/cb_filter_tb.sv
index becf859..bce4a28 100644
--- a/test/cb_filter_tb.sv
+++ b/test/cb_filter_tb.sv
@@ -93,192 +93,190 @@ module cb_filter_tb;
   // ------------------------
   // Test Bench
   // ------------------------
-  program test_cbf;
-    initial begin : stimulus
-      sim_done = 1'b0;
-      no_tests           = 64'd0;
-      no_positives       = 64'd0;
-      no_false_positives = 64'd0;
-      no_negatives       = 64'd0;
-      no_false_negatives = 64'd0;
-      init_signals();
-      fork
-        begin
-          // simulation control branch
-          max_items = 10;
-          min_items =  3;
-          @(posedge rst_n);
-          repeat (RunCycles) @(posedge clk);
-          sim_done = 1'b1;
-        end
-        begin
-          @(posedge rst_n);
-          run_lookup(sim_done);
-        end
-        begin
-          @(posedge rst_n);
-          run_increment(sim_done, decr_valid);
-        end
-        begin
-          @(posedge rst_n);
-          run_decrement(sim_done);
-        end
-      join
-      print_result(no_tests, no_positives, no_false_positives, no_negatives, no_false_negatives);
-      empty_filter();
-      $stop();
-    end
+  initial begin : stimulus
+    sim_done = 1'b0;
+    no_tests           = 64'd0;
+    no_positives       = 64'd0;
+    no_false_positives = 64'd0;
+    no_negatives       = 64'd0;
+    no_false_negatives = 64'd0;
+    init_signals();
+    fork
+      begin
+        // simulation control branch
+        max_items = 10;
+        min_items =  3;
+        @(posedge rst_n);
+        repeat (RunCycles) @(posedge clk);
+        sim_done = 1'b1;
+      end
+      begin
+        @(posedge rst_n);
+        run_lookup(sim_done);
+      end
+      begin
+        @(posedge rst_n);
+        run_increment(sim_done, decr_valid);
+      end
+      begin
+        @(posedge rst_n);
+        run_decrement(sim_done);
+      end
+    join
+    print_result(no_tests, no_positives, no_false_positives, no_negatives, no_false_negatives);
+    empty_filter();
+    $stop();
+  end
 
-    task cycle_start();
-      #TTest;
-    endtask : cycle_start
+  task cycle_start();
+    #TTest;
+  endtask : cycle_start
 
-    task cycle_end();
-      @(posedge clk);
-    endtask : cycle_end
+  task cycle_end();
+    @(posedge clk);
+  endtask : cycle_end
 
-    task reset_filter();
-      filter_clear <= #TAppli '1;
-      cycle_end();
-      filter_clear <= #TAppli '0;
-    endtask : reset_filter
+  task reset_filter();
+    filter_clear <= #TAppli '1;
+    cycle_end();
+    filter_clear <= #TAppli '0;
+  endtask : reset_filter
 
-    task init_signals();
-      look_data    <= #TAppli '0;
-      incr_data    <= #TAppli '0;
-      incr_valid   <= #TAppli '0;
-      decr_data    <= #TAppli '0;
-      decr_valid   <= #TAppli '0;
-      filter_clear <= #TAppli '0;
-    endtask : init_signals
+  task init_signals();
+    look_data    <= #TAppli '0;
+    incr_data    <= #TAppli '0;
+    incr_valid   <= #TAppli '0;
+    decr_data    <= #TAppli '0;
+    decr_valid   <= #TAppli '0;
+    filter_clear <= #TAppli '0;
+  endtask : init_signals
 
-    // runs each cycle a lookup and tests if the output is expected
-    task automatic run_lookup(ref logic sim_done);
-      while (!sim_done) begin
-        logic [DataWidth-1:0] lookup = $urandom_range(0,2**DataWidth-1);;
-        rand_wait(0,6);
-        look_data    <= #TAppli lookup;
-        cycle_start();
-        no_tests++;
-        // check the result
-        if(control_array.exists(lookup)) begin
-          // the result has to be right
-          if(!look_valid) begin
-            $warning(1, "Had a false negative!!!\nIndex: %d", lookup);
-            no_false_negatives++;
-          end else begin
-            no_positives++;
-          end
+  // runs each cycle a lookup and tests if the output is expected
+  task automatic run_lookup(ref logic sim_done);
+    while (!sim_done) begin
+      logic [DataWidth-1:0] lookup = $urandom_range(0,2**DataWidth-1);;
+      rand_wait(0,6);
+      look_data    <= #TAppli lookup;
+      cycle_start();
+      no_tests++;
+      // check the result
+      if(control_array.exists(lookup)) begin
+        // the result has to be right
+        if(!look_valid) begin
+          $warning(1, "Had a false negative!!!\nIndex: %d", lookup);
+          no_false_negatives++;
         end else begin
-          // here we can check for false positives
-          if(look_valid) begin
-            //$display("Had a false positive!\nIndex: %d", lookup);
-            no_false_positives++;
-          end else begin
-            //$display("Item correctly not in Set.\nIndex: %d", lookup);
-            no_negatives++;
-          end
+          no_positives++;
         end
+      end else begin
+        // here we can check for false positives
+        if(look_valid) begin
+          //$display("Had a false positive!\nIndex: %d", lookup);
+          no_false_positives++;
+        end else begin
+          //$display("Item correctly not in Set.\nIndex: %d", lookup);
+          no_negatives++;
+        end
+      end
+      cycle_end();
+    end
+  endtask : run_lookup
+
+  // randomly put data into the filter
+  task automatic run_increment(ref logic sim_done, ref logic decr_valid);
+    while (!sim_done) begin
+      logic [DataWidth-1:0] data = $urandom_range(0,2**DataWidth-1);
+      if(!control_array.exists(data)) begin
+        rand_wait(0,5);
+        incr_data <= #TAppli data;
+        while (filter_full | (control_array.num() > max_items))
+            begin if (sim_done | decr_valid) break; cycle_end(); end
+        incr_valid <= #TAppli 1'b1;
+        cycle_end();
+        control_array[data] = 1'b1;
+        incr_data  <= #TAppli '0;
+        incr_valid <= #TAppli '0;
+      end else begin
         cycle_end();
       end
-    endtask : run_lookup
+    end
+  endtask : run_increment
 
-    // randomly put data into the filter
-    task automatic run_increment(ref logic sim_done, ref logic decr_valid);
-      while (!sim_done) begin
-        logic [DataWidth-1:0] data = $urandom_range(0,2**DataWidth-1);
-        if(!control_array.exists(data)) begin
+  // remove randomly an item from the filter
+  task automatic run_decrement(ref logic sim_done);
+    int unsigned nb_tryes = 0;
+    while (!sim_done) begin
+      logic [DataWidth-1:0] data = $urandom_range(0,2**DataWidth-1);;
+      if(control_array.exists(data)) begin
+        if(control_array.num() > min_items) begin
           rand_wait(0,5);
-          incr_data <= #TAppli data;
-          while (filter_full | (control_array.num() > max_items))
-              begin if (sim_done | decr_valid) break; cycle_end(); end
-          incr_valid <= #TAppli 1'b1;
+          decr_data  <= #TAppli data;
+          decr_valid <= #TAppli 1'b1;
+          cycle_start();
+          control_array.delete(data);
           cycle_end();
-          control_array[data] = 1'b1;
-          incr_data  <= #TAppli '0;
-          incr_valid <= #TAppli '0;
+          decr_data  <= #TAppli '0;
+          decr_valid <= #TAppli 1'b0;
         end else begin
           cycle_end();
         end
-      end
-    endtask : run_increment
-
-    // remove randomly an item from the filter
-    task automatic run_decrement(ref logic sim_done);
-      int unsigned nb_tryes = 0;
-      while (!sim_done) begin
-        logic [DataWidth-1:0] data = $urandom_range(0,2**DataWidth-1);;
-        if(control_array.exists(data)) begin
-          if(control_array.num() > min_items) begin
-            rand_wait(0,5);
-            decr_data  <= #TAppli data;
-            decr_valid <= #TAppli 1'b1;
-            cycle_start();
-            control_array.delete(data);
-            cycle_end();
-            decr_data  <= #TAppli '0;
-            decr_valid <= #TAppli 1'b0;
-          end else begin
-            cycle_end();
-          end
+      end else begin
+        if(nb_tryes < 100) begin
+          nb_tryes++;
         end else begin
-          if(nb_tryes < 100) begin
-            nb_tryes++;
-          end else begin
-            nb_tryes = 0;
-            cycle_end();
-          end
-        end
-      end
-    endtask : run_decrement
-
-    // clear the filter from all items
-    task empty_filter();
-      rand_wait(10,15);
-      for (int unsigned i = 0; i < 2**DataWidth; i++) begin
-        if(control_array.exists(i)) begin
-          decr_data  <= #TAppli i;
-          decr_valid <= #TAppli 1'b1;
-          cycle_start();
-          control_array.delete(i);
+          nb_tryes = 0;
           cycle_end();
         end
       end
-      // check empty flag
-      decr_data  <= #TAppli '0;
-      decr_valid <= #TAppli 1'b0;
-      cycle_start();
-      cycle_end();
-      $display("Filter empty is: %b", filter_empty);
-    endtask : empty_filter
+    end
+  endtask : run_decrement
 
-    task print_result(input longint unsigned n_test, n_pos, n_f_pos, n_neg, n_f_neg);
-      $info(   "######################################################");
-      if (n_f_neg == 64'h0) begin
-        $display("***SUCCESS***");
-      end else begin
-        $display("!!!FAILED!!!");
+  // clear the filter from all items
+  task empty_filter();
+    rand_wait(10,15);
+    for (int unsigned i = 0; i < 2**DataWidth; i++) begin
+      if(control_array.exists(i)) begin
+        decr_data  <= #TAppli i;
+        decr_valid <= #TAppli 1'b1;
+        cycle_start();
+        control_array.delete(i);
+        cycle_end();
       end
-      $display("Finished Tests");
-      $display("NO Testes:    %d", n_test);
-      $display("NO Positive:  %d", n_pos);
-      $display("NO False Pos: %d", n_f_pos);
-      $display("NO Negatives: %d", n_neg);
-      $display("NO False Neg: %d <--- Success if this is 0!", n_f_neg);
-      $display("######################################################");
-    endtask : print_result
+    end
+    // check empty flag
+    decr_data  <= #TAppli '0;
+    decr_valid <= #TAppli 1'b0;
+    cycle_start();
+    cycle_end();
+    $display("Filter empty is: %b", filter_empty);
+  endtask : empty_filter
+
+  task print_result(input longint unsigned n_test, n_pos, n_f_pos, n_neg, n_f_neg);
+    $info(   "######################################################");
+    if (n_f_neg == 64'h0) begin
+      $display("***SUCCESS***");
+    end else begin
+      $display("!!!FAILED!!!");
+    end
+    $display("Finished Tests");
+    $display("NO Testes:    %d", n_test);
+    $display("NO Positive:  %d", n_pos);
+    $display("NO False Pos: %d", n_f_pos);
+    $display("NO Negatives: %d", n_neg);
+    $display("NO False Neg: %d <--- Success if this is 0!", n_f_neg);
+    $display("######################################################");
+  endtask : print_result
 
-    task automatic rand_wait(input int unsigned min, max);
-      int unsigned rand_success, cycles;
-      rand_success = std::randomize(cycles) with {
-        cycles >= min;
-        cycles <= max;
-      };
-      assert (rand_success) else $error("Failed to randomize wait cycles!");
-      repeat (cycles) @(posedge clk);
-    endtask : rand_wait
+  task automatic rand_wait(input int unsigned min, max);
+    int unsigned rand_success, cycles;
+    rand_success = std::randomize(cycles) with {
+      cycles >= min;
+      cycles <= max;
+    };
+    assert (rand_success) else $error("Failed to randomize wait cycles!");
+    repeat (cycles) @(posedge clk);
+  endtask : rand_wait
 
-  endprogram
 
   cb_filter #(
     .KHashes       ( NoHashes    ), // Number of hash functions
diff --git a/test/stream_register_tb.sv b/test/stream_register_tb.sv
index 3645fa2..7c9eba2 100644
--- a/test/stream_register_tb.sv
+++ b/test/stream_register_tb.sv
@@ -70,95 +70,92 @@ module stream_register_tb #(
         }
     endclass
 
-    program testbench ();
-        logic[7:0] queue [$];
-        // clocking outputs are DUT inputs and vice versa
-        clocking cb @(posedge clk);
-            default input #2 output #4;
-            output clr, inp_data, inp_valid, oup_ready;
-            input inp_ready, oup_valid, oup_data;
-        endclocking
-
-        clocking pck @(posedge clk);
-            default input #2 output #4;
-            input clr, inp_data, inp_valid, inp_ready, oup_data, oup_valid, oup_ready;
-        endclocking
-
-        // --------
-        // Driver
-        // --------
-        initial begin
-            automatic random_action_t random_action = new();
-
-            cb.clr <= 1'b0;
-
-            wait (rst_n == 1'b1);
-            cb.inp_valid <= 1'b0;
-
-            forever begin
-                void'(random_action.randomize());
-                repeat($urandom_range(0, 8)) @(cb);
-                // $display("%d\n", random_action.action);
-                case (random_action.action)
-                    0: begin
-                        cb.inp_data     <= $urandom_range(0,256);
-                        cb.inp_valid    <= 1'b1;
-                    end
-                    1: begin
-                        cb.clr <= 1'b0;
-                        cb.inp_data     <= $urandom_range(0,256);
-                        cb.inp_valid    <= 1'b0;
-                    end
-                    default: begin
-                        cb.clr          <= 1'b1;
-                        cb.inp_valid    <= 1'b0;
-                        @(cb);
-                        cb.clr          <= 1'b0;
-                    end
-                endcase
-            end
+    logic[7:0] queue [$];
+    // clocking outputs are DUT inputs and vice versa
+    clocking cb @(posedge clk);
+        default input #2 output #4;
+        output clr, inp_data, inp_valid, oup_ready;
+        input inp_ready, oup_valid, oup_data;
+    endclocking
+
+    clocking pck @(posedge clk);
+        default input #2 output #4;
+        input clr, inp_data, inp_valid, inp_ready, oup_data, oup_valid, oup_ready;
+    endclocking
+
+    // --------
+    // Driver
+    // --------
+    initial begin
+        automatic random_action_t random_action = new();
+
+        cb.clr <= 1'b0;
+
+        wait (rst_n == 1'b1);
+        cb.inp_valid <= 1'b0;
+
+        forever begin
+            void'(random_action.randomize());
+            repeat($urandom_range(0, 8)) @(cb);
+            // $display("%d\n", random_action.action);
+            case (random_action.action)
+                0: begin
+                    cb.inp_data     <= $urandom_range(0,256);
+                    cb.inp_valid    <= 1'b1;
+                end
+                1: begin
+                    cb.clr <= 1'b0;
+                    cb.inp_data     <= $urandom_range(0,256);
+                    cb.inp_valid    <= 1'b0;
+                end
+                default: begin
+                    cb.clr          <= 1'b1;
+                    cb.inp_valid    <= 1'b0;
+                    @(cb);
+                    cb.clr          <= 1'b0;
+                end
+            endcase
         end
+    end
 
-        initial begin
-            // wait for reset to be high
-            wait (rst_n == 1'b1);
-            // pop from queue
-            forever begin
-                @(cb)
-                cb.oup_ready    <= 1'b1;
-                repeat($urandom_range(0, 8)) @(cb);
-                cb.oup_ready    <= 1'b0;
-            end
+    initial begin
+        // wait for reset to be high
+        wait (rst_n == 1'b1);
+        // pop from queue
+        forever begin
+            @(cb)
+            cb.oup_ready    <= 1'b1;
+            repeat($urandom_range(0, 8)) @(cb);
+            cb.oup_ready    <= 1'b0;
         end
+    end
 
-        // -------------------
-        // Monitor && Checker
-        // -------------------
-        initial begin
-            automatic T data;
-            nr_checks = 0;
-            forever begin
-                @(pck)
-
-                if (pck.inp_valid && pck.inp_ready && !pck.clr) begin
-                    queue.push_back(pck.inp_data);
-                end
+    // -------------------
+    // Monitor && Checker
+    // -------------------
+    initial begin
+        automatic T data;
+        nr_checks = 0;
+        forever begin
+            @(pck)
 
-                if (pck.oup_valid && pck.oup_ready) begin
-                    data = queue.pop_front();
-                    // $display("Time: %t, Expected: %0h Got %0h", $time, data, fifo_if.pck.rdata);
-                    assert(data == pck.oup_data)
-                        else $error("Mismatch, Expected: %0h Got %0h", data, pck.oup_data);
-                    nr_checks++;
-                end
+            if (pck.inp_valid && pck.inp_ready && !pck.clr) begin
+                queue.push_back(pck.inp_data);
+            end
 
-                if (pck.clr) begin
-                    queue = {};
-                end
+            if (pck.oup_valid && pck.oup_ready) begin
+                data = queue.pop_front();
+                // $display("Time: %t, Expected: %0h Got %0h", $time, data, fifo_if.pck.rdata);
+                assert(data == pck.oup_data)
+                    else $error("Mismatch, Expected: %0h Got %0h", data, pck.oup_data);
+                nr_checks++;
+            end
 
+            if (pck.clr) begin
+                queue = {};
             end
+
         end
-    endprogram
+    end
 
-    testbench tb();
 endmodule
diff --git a/test/sub_per_hash_tb.sv b/test/sub_per_hash_tb.sv
index f6d68c1..bd9b2b5 100644
--- a/test/sub_per_hash_tb.sv
+++ b/test/sub_per_hash_tb.sv
@@ -59,45 +59,43 @@ module sub_per_hash_tb;
   // ------------------------
   // Test Bench
   // ------------------------
-  program test_cbf;
-    initial begin : shutdown_sim
-      repeat (MaxCycles) @(posedge clk);
-      $info("Stop, because max cycles was reached.");
-      $stop();
-    end
-
-    initial begin : stimulus
-      set_data(0);
-      // wait for reset
-      @(posedge rst_n);
-      repeat (10) @(posedge clk);
+  initial begin : shutdown_sim
+    repeat (MaxCycles) @(posedge clk);
+    $info("Stop, because max cycles was reached.");
+    $stop();
+  end
 
-      for (longint unsigned i = 0; i < 2**DataWidth; i++) begin
-        set_data(i);
-      end
+  initial begin : stimulus
+    set_data(0);
+    // wait for reset
+    @(posedge rst_n);
+    repeat (10) @(posedge clk);
 
-      repeat (10) @(posedge clk);
-      $info("Stop, because all possible inputs were applied.");
-      $stop();
+    for (longint unsigned i = 0; i < 2**DataWidth; i++) begin
+      set_data(i);
     end
 
-    task cycle_start();
-      #TTest;
-    endtask : cycle_start
+    repeat (10) @(posedge clk);
+    $info("Stop, because all possible inputs were applied.");
+    $stop();
+  end
+
+  task cycle_start();
+    #TTest;
+  endtask : cycle_start
 
-    task cycle_end();
-      @(posedge clk);
-    endtask : cycle_end
+  task cycle_end();
+    @(posedge clk);
+  endtask : cycle_end
 
-    task set_data (input longint unsigned nbr);
-      data <= #TAppli data_t'(nbr);
-      cycle_end();
-    endtask : set_data
+  task set_data (input longint unsigned nbr);
+    data <= #TAppli data_t'(nbr);
+    cycle_end();
+  endtask : set_data
 
-    task init_signals();
-      data <= '0;
-    endtask : init_signals
-  endprogram
+  task init_signals();
+    data <= '0;
+  endtask : init_signals
 
   // generate duts
   for (genvar i = 0; i < NoHashes; i++) begin : gen_hash_dut
-- 
2.25.1.377.g2d2118b814

