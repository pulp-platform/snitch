// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module axi_tlb_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 9
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output axi_tlb_reg_pkg::axi_tlb_reg2hw_t reg2hw, // Write


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import axi_tlb_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic tlb_enable_qs;
  logic tlb_enable_wd;
  logic tlb_enable_we;
  logic [31:0] tlb_entry_0_pagein_first_low_qs;
  logic [31:0] tlb_entry_0_pagein_first_low_wd;
  logic tlb_entry_0_pagein_first_low_we;
  logic [31:0] tlb_entry_0_pagein_first_high_qs;
  logic [31:0] tlb_entry_0_pagein_first_high_wd;
  logic tlb_entry_0_pagein_first_high_we;
  logic [31:0] tlb_entry_0_pagein_last_low_qs;
  logic [31:0] tlb_entry_0_pagein_last_low_wd;
  logic tlb_entry_0_pagein_last_low_we;
  logic [31:0] tlb_entry_0_pagein_last_high_qs;
  logic [31:0] tlb_entry_0_pagein_last_high_wd;
  logic tlb_entry_0_pagein_last_high_we;
  logic [31:0] tlb_entry_0_pageout_low_qs;
  logic [31:0] tlb_entry_0_pageout_low_wd;
  logic tlb_entry_0_pageout_low_we;
  logic [31:0] tlb_entry_0_pageout_high_qs;
  logic [31:0] tlb_entry_0_pageout_high_wd;
  logic tlb_entry_0_pageout_high_we;
  logic tlb_entry_0_flags_valid_qs;
  logic tlb_entry_0_flags_valid_wd;
  logic tlb_entry_0_flags_valid_we;
  logic tlb_entry_0_flags_read_only_qs;
  logic tlb_entry_0_flags_read_only_wd;
  logic tlb_entry_0_flags_read_only_we;
  logic [31:0] tlb_entry_1_pagein_first_low_qs;
  logic [31:0] tlb_entry_1_pagein_first_low_wd;
  logic tlb_entry_1_pagein_first_low_we;
  logic [31:0] tlb_entry_1_pagein_first_high_qs;
  logic [31:0] tlb_entry_1_pagein_first_high_wd;
  logic tlb_entry_1_pagein_first_high_we;
  logic [31:0] tlb_entry_1_pagein_last_low_qs;
  logic [31:0] tlb_entry_1_pagein_last_low_wd;
  logic tlb_entry_1_pagein_last_low_we;
  logic [31:0] tlb_entry_1_pagein_last_high_qs;
  logic [31:0] tlb_entry_1_pagein_last_high_wd;
  logic tlb_entry_1_pagein_last_high_we;
  logic [31:0] tlb_entry_1_pageout_low_qs;
  logic [31:0] tlb_entry_1_pageout_low_wd;
  logic tlb_entry_1_pageout_low_we;
  logic [31:0] tlb_entry_1_pageout_high_qs;
  logic [31:0] tlb_entry_1_pageout_high_wd;
  logic tlb_entry_1_pageout_high_we;
  logic tlb_entry_1_flags_valid_qs;
  logic tlb_entry_1_flags_valid_wd;
  logic tlb_entry_1_flags_valid_we;
  logic tlb_entry_1_flags_read_only_qs;
  logic tlb_entry_1_flags_read_only_wd;
  logic tlb_entry_1_flags_read_only_we;
  logic [31:0] tlb_entry_2_pagein_first_low_qs;
  logic [31:0] tlb_entry_2_pagein_first_low_wd;
  logic tlb_entry_2_pagein_first_low_we;
  logic [31:0] tlb_entry_2_pagein_first_high_qs;
  logic [31:0] tlb_entry_2_pagein_first_high_wd;
  logic tlb_entry_2_pagein_first_high_we;
  logic [31:0] tlb_entry_2_pagein_last_low_qs;
  logic [31:0] tlb_entry_2_pagein_last_low_wd;
  logic tlb_entry_2_pagein_last_low_we;
  logic [31:0] tlb_entry_2_pagein_last_high_qs;
  logic [31:0] tlb_entry_2_pagein_last_high_wd;
  logic tlb_entry_2_pagein_last_high_we;
  logic [31:0] tlb_entry_2_pageout_low_qs;
  logic [31:0] tlb_entry_2_pageout_low_wd;
  logic tlb_entry_2_pageout_low_we;
  logic [31:0] tlb_entry_2_pageout_high_qs;
  logic [31:0] tlb_entry_2_pageout_high_wd;
  logic tlb_entry_2_pageout_high_we;
  logic tlb_entry_2_flags_valid_qs;
  logic tlb_entry_2_flags_valid_wd;
  logic tlb_entry_2_flags_valid_we;
  logic tlb_entry_2_flags_read_only_qs;
  logic tlb_entry_2_flags_read_only_wd;
  logic tlb_entry_2_flags_read_only_we;
  logic [31:0] tlb_entry_3_pagein_first_low_qs;
  logic [31:0] tlb_entry_3_pagein_first_low_wd;
  logic tlb_entry_3_pagein_first_low_we;
  logic [31:0] tlb_entry_3_pagein_first_high_qs;
  logic [31:0] tlb_entry_3_pagein_first_high_wd;
  logic tlb_entry_3_pagein_first_high_we;
  logic [31:0] tlb_entry_3_pagein_last_low_qs;
  logic [31:0] tlb_entry_3_pagein_last_low_wd;
  logic tlb_entry_3_pagein_last_low_we;
  logic [31:0] tlb_entry_3_pagein_last_high_qs;
  logic [31:0] tlb_entry_3_pagein_last_high_wd;
  logic tlb_entry_3_pagein_last_high_we;
  logic [31:0] tlb_entry_3_pageout_low_qs;
  logic [31:0] tlb_entry_3_pageout_low_wd;
  logic tlb_entry_3_pageout_low_we;
  logic [31:0] tlb_entry_3_pageout_high_qs;
  logic [31:0] tlb_entry_3_pageout_high_wd;
  logic tlb_entry_3_pageout_high_we;
  logic tlb_entry_3_flags_valid_qs;
  logic tlb_entry_3_flags_valid_wd;
  logic tlb_entry_3_flags_valid_we;
  logic tlb_entry_3_flags_read_only_qs;
  logic tlb_entry_3_flags_read_only_wd;
  logic tlb_entry_3_flags_read_only_we;
  logic [31:0] tlb_entry_4_pagein_first_low_qs;
  logic [31:0] tlb_entry_4_pagein_first_low_wd;
  logic tlb_entry_4_pagein_first_low_we;
  logic [31:0] tlb_entry_4_pagein_first_high_qs;
  logic [31:0] tlb_entry_4_pagein_first_high_wd;
  logic tlb_entry_4_pagein_first_high_we;
  logic [31:0] tlb_entry_4_pagein_last_low_qs;
  logic [31:0] tlb_entry_4_pagein_last_low_wd;
  logic tlb_entry_4_pagein_last_low_we;
  logic [31:0] tlb_entry_4_pagein_last_high_qs;
  logic [31:0] tlb_entry_4_pagein_last_high_wd;
  logic tlb_entry_4_pagein_last_high_we;
  logic [31:0] tlb_entry_4_pageout_low_qs;
  logic [31:0] tlb_entry_4_pageout_low_wd;
  logic tlb_entry_4_pageout_low_we;
  logic [31:0] tlb_entry_4_pageout_high_qs;
  logic [31:0] tlb_entry_4_pageout_high_wd;
  logic tlb_entry_4_pageout_high_we;
  logic tlb_entry_4_flags_valid_qs;
  logic tlb_entry_4_flags_valid_wd;
  logic tlb_entry_4_flags_valid_we;
  logic tlb_entry_4_flags_read_only_qs;
  logic tlb_entry_4_flags_read_only_wd;
  logic tlb_entry_4_flags_read_only_we;
  logic [31:0] tlb_entry_5_pagein_first_low_qs;
  logic [31:0] tlb_entry_5_pagein_first_low_wd;
  logic tlb_entry_5_pagein_first_low_we;
  logic [31:0] tlb_entry_5_pagein_first_high_qs;
  logic [31:0] tlb_entry_5_pagein_first_high_wd;
  logic tlb_entry_5_pagein_first_high_we;
  logic [31:0] tlb_entry_5_pagein_last_low_qs;
  logic [31:0] tlb_entry_5_pagein_last_low_wd;
  logic tlb_entry_5_pagein_last_low_we;
  logic [31:0] tlb_entry_5_pagein_last_high_qs;
  logic [31:0] tlb_entry_5_pagein_last_high_wd;
  logic tlb_entry_5_pagein_last_high_we;
  logic [31:0] tlb_entry_5_pageout_low_qs;
  logic [31:0] tlb_entry_5_pageout_low_wd;
  logic tlb_entry_5_pageout_low_we;
  logic [31:0] tlb_entry_5_pageout_high_qs;
  logic [31:0] tlb_entry_5_pageout_high_wd;
  logic tlb_entry_5_pageout_high_we;
  logic tlb_entry_5_flags_valid_qs;
  logic tlb_entry_5_flags_valid_wd;
  logic tlb_entry_5_flags_valid_we;
  logic tlb_entry_5_flags_read_only_qs;
  logic tlb_entry_5_flags_read_only_wd;
  logic tlb_entry_5_flags_read_only_we;
  logic [31:0] tlb_entry_6_pagein_first_low_qs;
  logic [31:0] tlb_entry_6_pagein_first_low_wd;
  logic tlb_entry_6_pagein_first_low_we;
  logic [31:0] tlb_entry_6_pagein_first_high_qs;
  logic [31:0] tlb_entry_6_pagein_first_high_wd;
  logic tlb_entry_6_pagein_first_high_we;
  logic [31:0] tlb_entry_6_pagein_last_low_qs;
  logic [31:0] tlb_entry_6_pagein_last_low_wd;
  logic tlb_entry_6_pagein_last_low_we;
  logic [31:0] tlb_entry_6_pagein_last_high_qs;
  logic [31:0] tlb_entry_6_pagein_last_high_wd;
  logic tlb_entry_6_pagein_last_high_we;
  logic [31:0] tlb_entry_6_pageout_low_qs;
  logic [31:0] tlb_entry_6_pageout_low_wd;
  logic tlb_entry_6_pageout_low_we;
  logic [31:0] tlb_entry_6_pageout_high_qs;
  logic [31:0] tlb_entry_6_pageout_high_wd;
  logic tlb_entry_6_pageout_high_we;
  logic tlb_entry_6_flags_valid_qs;
  logic tlb_entry_6_flags_valid_wd;
  logic tlb_entry_6_flags_valid_we;
  logic tlb_entry_6_flags_read_only_qs;
  logic tlb_entry_6_flags_read_only_wd;
  logic tlb_entry_6_flags_read_only_we;
  logic [31:0] tlb_entry_7_pagein_first_low_qs;
  logic [31:0] tlb_entry_7_pagein_first_low_wd;
  logic tlb_entry_7_pagein_first_low_we;
  logic [31:0] tlb_entry_7_pagein_first_high_qs;
  logic [31:0] tlb_entry_7_pagein_first_high_wd;
  logic tlb_entry_7_pagein_first_high_we;
  logic [31:0] tlb_entry_7_pagein_last_low_qs;
  logic [31:0] tlb_entry_7_pagein_last_low_wd;
  logic tlb_entry_7_pagein_last_low_we;
  logic [31:0] tlb_entry_7_pagein_last_high_qs;
  logic [31:0] tlb_entry_7_pagein_last_high_wd;
  logic tlb_entry_7_pagein_last_high_we;
  logic [31:0] tlb_entry_7_pageout_low_qs;
  logic [31:0] tlb_entry_7_pageout_low_wd;
  logic tlb_entry_7_pageout_low_we;
  logic [31:0] tlb_entry_7_pageout_high_qs;
  logic [31:0] tlb_entry_7_pageout_high_wd;
  logic tlb_entry_7_pageout_high_we;
  logic tlb_entry_7_flags_valid_qs;
  logic tlb_entry_7_flags_valid_wd;
  logic tlb_entry_7_flags_valid_we;
  logic tlb_entry_7_flags_read_only_qs;
  logic tlb_entry_7_flags_read_only_wd;
  logic tlb_entry_7_flags_read_only_we;

  // Register instances
  // R[tlb_enable]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_tlb_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_enable_we),
    .wd     (tlb_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_enable.q ),

    // to register interface (read)
    .qs     (tlb_enable_qs)
  );


  // R[tlb_entry_0_pagein_first_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_0_pagein_first_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_0_pagein_first_low_we),
    .wd     (tlb_entry_0_pagein_first_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_0_pagein_first_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_0_pagein_first_low_qs)
  );


  // R[tlb_entry_0_pagein_first_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_0_pagein_first_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_0_pagein_first_high_we),
    .wd     (tlb_entry_0_pagein_first_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_0_pagein_first_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_0_pagein_first_high_qs)
  );


  // R[tlb_entry_0_pagein_last_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_0_pagein_last_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_0_pagein_last_low_we),
    .wd     (tlb_entry_0_pagein_last_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_0_pagein_last_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_0_pagein_last_low_qs)
  );


  // R[tlb_entry_0_pagein_last_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_0_pagein_last_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_0_pagein_last_high_we),
    .wd     (tlb_entry_0_pagein_last_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_0_pagein_last_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_0_pagein_last_high_qs)
  );


  // R[tlb_entry_0_pageout_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_0_pageout_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_0_pageout_low_we),
    .wd     (tlb_entry_0_pageout_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_0_pageout_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_0_pageout_low_qs)
  );


  // R[tlb_entry_0_pageout_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_0_pageout_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_0_pageout_high_we),
    .wd     (tlb_entry_0_pageout_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_0_pageout_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_0_pageout_high_qs)
  );


  // R[tlb_entry_0_flags]: V(False)

  //   F[valid]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_tlb_entry_0_flags_valid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_0_flags_valid_we),
    .wd     (tlb_entry_0_flags_valid_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_0_flags.valid.q ),

    // to register interface (read)
    .qs     (tlb_entry_0_flags_valid_qs)
  );


  //   F[read_only]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_tlb_entry_0_flags_read_only (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_0_flags_read_only_we),
    .wd     (tlb_entry_0_flags_read_only_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_0_flags.read_only.q ),

    // to register interface (read)
    .qs     (tlb_entry_0_flags_read_only_qs)
  );


  // R[tlb_entry_1_pagein_first_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_1_pagein_first_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_1_pagein_first_low_we),
    .wd     (tlb_entry_1_pagein_first_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_1_pagein_first_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_1_pagein_first_low_qs)
  );


  // R[tlb_entry_1_pagein_first_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_1_pagein_first_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_1_pagein_first_high_we),
    .wd     (tlb_entry_1_pagein_first_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_1_pagein_first_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_1_pagein_first_high_qs)
  );


  // R[tlb_entry_1_pagein_last_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_1_pagein_last_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_1_pagein_last_low_we),
    .wd     (tlb_entry_1_pagein_last_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_1_pagein_last_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_1_pagein_last_low_qs)
  );


  // R[tlb_entry_1_pagein_last_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_1_pagein_last_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_1_pagein_last_high_we),
    .wd     (tlb_entry_1_pagein_last_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_1_pagein_last_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_1_pagein_last_high_qs)
  );


  // R[tlb_entry_1_pageout_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_1_pageout_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_1_pageout_low_we),
    .wd     (tlb_entry_1_pageout_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_1_pageout_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_1_pageout_low_qs)
  );


  // R[tlb_entry_1_pageout_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_1_pageout_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_1_pageout_high_we),
    .wd     (tlb_entry_1_pageout_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_1_pageout_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_1_pageout_high_qs)
  );


  // R[tlb_entry_1_flags]: V(False)

  //   F[valid]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_tlb_entry_1_flags_valid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_1_flags_valid_we),
    .wd     (tlb_entry_1_flags_valid_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_1_flags.valid.q ),

    // to register interface (read)
    .qs     (tlb_entry_1_flags_valid_qs)
  );


  //   F[read_only]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_tlb_entry_1_flags_read_only (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_1_flags_read_only_we),
    .wd     (tlb_entry_1_flags_read_only_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_1_flags.read_only.q ),

    // to register interface (read)
    .qs     (tlb_entry_1_flags_read_only_qs)
  );


  // R[tlb_entry_2_pagein_first_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_2_pagein_first_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_2_pagein_first_low_we),
    .wd     (tlb_entry_2_pagein_first_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_2_pagein_first_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_2_pagein_first_low_qs)
  );


  // R[tlb_entry_2_pagein_first_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_2_pagein_first_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_2_pagein_first_high_we),
    .wd     (tlb_entry_2_pagein_first_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_2_pagein_first_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_2_pagein_first_high_qs)
  );


  // R[tlb_entry_2_pagein_last_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_2_pagein_last_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_2_pagein_last_low_we),
    .wd     (tlb_entry_2_pagein_last_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_2_pagein_last_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_2_pagein_last_low_qs)
  );


  // R[tlb_entry_2_pagein_last_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_2_pagein_last_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_2_pagein_last_high_we),
    .wd     (tlb_entry_2_pagein_last_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_2_pagein_last_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_2_pagein_last_high_qs)
  );


  // R[tlb_entry_2_pageout_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_2_pageout_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_2_pageout_low_we),
    .wd     (tlb_entry_2_pageout_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_2_pageout_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_2_pageout_low_qs)
  );


  // R[tlb_entry_2_pageout_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_2_pageout_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_2_pageout_high_we),
    .wd     (tlb_entry_2_pageout_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_2_pageout_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_2_pageout_high_qs)
  );


  // R[tlb_entry_2_flags]: V(False)

  //   F[valid]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_tlb_entry_2_flags_valid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_2_flags_valid_we),
    .wd     (tlb_entry_2_flags_valid_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_2_flags.valid.q ),

    // to register interface (read)
    .qs     (tlb_entry_2_flags_valid_qs)
  );


  //   F[read_only]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_tlb_entry_2_flags_read_only (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_2_flags_read_only_we),
    .wd     (tlb_entry_2_flags_read_only_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_2_flags.read_only.q ),

    // to register interface (read)
    .qs     (tlb_entry_2_flags_read_only_qs)
  );


  // R[tlb_entry_3_pagein_first_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_3_pagein_first_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_3_pagein_first_low_we),
    .wd     (tlb_entry_3_pagein_first_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_3_pagein_first_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_3_pagein_first_low_qs)
  );


  // R[tlb_entry_3_pagein_first_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_3_pagein_first_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_3_pagein_first_high_we),
    .wd     (tlb_entry_3_pagein_first_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_3_pagein_first_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_3_pagein_first_high_qs)
  );


  // R[tlb_entry_3_pagein_last_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_3_pagein_last_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_3_pagein_last_low_we),
    .wd     (tlb_entry_3_pagein_last_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_3_pagein_last_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_3_pagein_last_low_qs)
  );


  // R[tlb_entry_3_pagein_last_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_3_pagein_last_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_3_pagein_last_high_we),
    .wd     (tlb_entry_3_pagein_last_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_3_pagein_last_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_3_pagein_last_high_qs)
  );


  // R[tlb_entry_3_pageout_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_3_pageout_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_3_pageout_low_we),
    .wd     (tlb_entry_3_pageout_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_3_pageout_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_3_pageout_low_qs)
  );


  // R[tlb_entry_3_pageout_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_3_pageout_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_3_pageout_high_we),
    .wd     (tlb_entry_3_pageout_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_3_pageout_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_3_pageout_high_qs)
  );


  // R[tlb_entry_3_flags]: V(False)

  //   F[valid]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_tlb_entry_3_flags_valid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_3_flags_valid_we),
    .wd     (tlb_entry_3_flags_valid_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_3_flags.valid.q ),

    // to register interface (read)
    .qs     (tlb_entry_3_flags_valid_qs)
  );


  //   F[read_only]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_tlb_entry_3_flags_read_only (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_3_flags_read_only_we),
    .wd     (tlb_entry_3_flags_read_only_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_3_flags.read_only.q ),

    // to register interface (read)
    .qs     (tlb_entry_3_flags_read_only_qs)
  );


  // R[tlb_entry_4_pagein_first_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_4_pagein_first_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_4_pagein_first_low_we),
    .wd     (tlb_entry_4_pagein_first_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_4_pagein_first_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_4_pagein_first_low_qs)
  );


  // R[tlb_entry_4_pagein_first_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_4_pagein_first_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_4_pagein_first_high_we),
    .wd     (tlb_entry_4_pagein_first_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_4_pagein_first_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_4_pagein_first_high_qs)
  );


  // R[tlb_entry_4_pagein_last_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_4_pagein_last_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_4_pagein_last_low_we),
    .wd     (tlb_entry_4_pagein_last_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_4_pagein_last_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_4_pagein_last_low_qs)
  );


  // R[tlb_entry_4_pagein_last_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_4_pagein_last_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_4_pagein_last_high_we),
    .wd     (tlb_entry_4_pagein_last_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_4_pagein_last_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_4_pagein_last_high_qs)
  );


  // R[tlb_entry_4_pageout_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_4_pageout_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_4_pageout_low_we),
    .wd     (tlb_entry_4_pageout_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_4_pageout_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_4_pageout_low_qs)
  );


  // R[tlb_entry_4_pageout_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_4_pageout_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_4_pageout_high_we),
    .wd     (tlb_entry_4_pageout_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_4_pageout_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_4_pageout_high_qs)
  );


  // R[tlb_entry_4_flags]: V(False)

  //   F[valid]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_tlb_entry_4_flags_valid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_4_flags_valid_we),
    .wd     (tlb_entry_4_flags_valid_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_4_flags.valid.q ),

    // to register interface (read)
    .qs     (tlb_entry_4_flags_valid_qs)
  );


  //   F[read_only]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_tlb_entry_4_flags_read_only (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_4_flags_read_only_we),
    .wd     (tlb_entry_4_flags_read_only_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_4_flags.read_only.q ),

    // to register interface (read)
    .qs     (tlb_entry_4_flags_read_only_qs)
  );


  // R[tlb_entry_5_pagein_first_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_5_pagein_first_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_5_pagein_first_low_we),
    .wd     (tlb_entry_5_pagein_first_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_5_pagein_first_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_5_pagein_first_low_qs)
  );


  // R[tlb_entry_5_pagein_first_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_5_pagein_first_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_5_pagein_first_high_we),
    .wd     (tlb_entry_5_pagein_first_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_5_pagein_first_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_5_pagein_first_high_qs)
  );


  // R[tlb_entry_5_pagein_last_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_5_pagein_last_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_5_pagein_last_low_we),
    .wd     (tlb_entry_5_pagein_last_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_5_pagein_last_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_5_pagein_last_low_qs)
  );


  // R[tlb_entry_5_pagein_last_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_5_pagein_last_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_5_pagein_last_high_we),
    .wd     (tlb_entry_5_pagein_last_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_5_pagein_last_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_5_pagein_last_high_qs)
  );


  // R[tlb_entry_5_pageout_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_5_pageout_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_5_pageout_low_we),
    .wd     (tlb_entry_5_pageout_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_5_pageout_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_5_pageout_low_qs)
  );


  // R[tlb_entry_5_pageout_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_5_pageout_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_5_pageout_high_we),
    .wd     (tlb_entry_5_pageout_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_5_pageout_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_5_pageout_high_qs)
  );


  // R[tlb_entry_5_flags]: V(False)

  //   F[valid]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_tlb_entry_5_flags_valid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_5_flags_valid_we),
    .wd     (tlb_entry_5_flags_valid_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_5_flags.valid.q ),

    // to register interface (read)
    .qs     (tlb_entry_5_flags_valid_qs)
  );


  //   F[read_only]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_tlb_entry_5_flags_read_only (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_5_flags_read_only_we),
    .wd     (tlb_entry_5_flags_read_only_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_5_flags.read_only.q ),

    // to register interface (read)
    .qs     (tlb_entry_5_flags_read_only_qs)
  );


  // R[tlb_entry_6_pagein_first_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_6_pagein_first_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_6_pagein_first_low_we),
    .wd     (tlb_entry_6_pagein_first_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_6_pagein_first_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_6_pagein_first_low_qs)
  );


  // R[tlb_entry_6_pagein_first_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_6_pagein_first_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_6_pagein_first_high_we),
    .wd     (tlb_entry_6_pagein_first_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_6_pagein_first_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_6_pagein_first_high_qs)
  );


  // R[tlb_entry_6_pagein_last_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_6_pagein_last_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_6_pagein_last_low_we),
    .wd     (tlb_entry_6_pagein_last_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_6_pagein_last_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_6_pagein_last_low_qs)
  );


  // R[tlb_entry_6_pagein_last_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_6_pagein_last_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_6_pagein_last_high_we),
    .wd     (tlb_entry_6_pagein_last_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_6_pagein_last_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_6_pagein_last_high_qs)
  );


  // R[tlb_entry_6_pageout_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_6_pageout_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_6_pageout_low_we),
    .wd     (tlb_entry_6_pageout_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_6_pageout_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_6_pageout_low_qs)
  );


  // R[tlb_entry_6_pageout_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_6_pageout_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_6_pageout_high_we),
    .wd     (tlb_entry_6_pageout_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_6_pageout_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_6_pageout_high_qs)
  );


  // R[tlb_entry_6_flags]: V(False)

  //   F[valid]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_tlb_entry_6_flags_valid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_6_flags_valid_we),
    .wd     (tlb_entry_6_flags_valid_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_6_flags.valid.q ),

    // to register interface (read)
    .qs     (tlb_entry_6_flags_valid_qs)
  );


  //   F[read_only]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_tlb_entry_6_flags_read_only (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_6_flags_read_only_we),
    .wd     (tlb_entry_6_flags_read_only_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_6_flags.read_only.q ),

    // to register interface (read)
    .qs     (tlb_entry_6_flags_read_only_qs)
  );


  // R[tlb_entry_7_pagein_first_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_7_pagein_first_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_7_pagein_first_low_we),
    .wd     (tlb_entry_7_pagein_first_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_7_pagein_first_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_7_pagein_first_low_qs)
  );


  // R[tlb_entry_7_pagein_first_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_7_pagein_first_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_7_pagein_first_high_we),
    .wd     (tlb_entry_7_pagein_first_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_7_pagein_first_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_7_pagein_first_high_qs)
  );


  // R[tlb_entry_7_pagein_last_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_7_pagein_last_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_7_pagein_last_low_we),
    .wd     (tlb_entry_7_pagein_last_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_7_pagein_last_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_7_pagein_last_low_qs)
  );


  // R[tlb_entry_7_pagein_last_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_7_pagein_last_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_7_pagein_last_high_we),
    .wd     (tlb_entry_7_pagein_last_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_7_pagein_last_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_7_pagein_last_high_qs)
  );


  // R[tlb_entry_7_pageout_low]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_7_pageout_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_7_pageout_low_we),
    .wd     (tlb_entry_7_pageout_low_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_7_pageout_low.q ),

    // to register interface (read)
    .qs     (tlb_entry_7_pageout_low_qs)
  );


  // R[tlb_entry_7_pageout_high]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_tlb_entry_7_pageout_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_7_pageout_high_we),
    .wd     (tlb_entry_7_pageout_high_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_7_pageout_high.q ),

    // to register interface (read)
    .qs     (tlb_entry_7_pageout_high_qs)
  );


  // R[tlb_entry_7_flags]: V(False)

  //   F[valid]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_tlb_entry_7_flags_valid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_7_flags_valid_we),
    .wd     (tlb_entry_7_flags_valid_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_7_flags.valid.q ),

    // to register interface (read)
    .qs     (tlb_entry_7_flags_valid_qs)
  );


  //   F[read_only]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_tlb_entry_7_flags_read_only (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tlb_entry_7_flags_read_only_we),
    .wd     (tlb_entry_7_flags_read_only_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tlb_entry_7_flags.read_only.q ),

    // to register interface (read)
    .qs     (tlb_entry_7_flags_read_only_qs)
  );




  logic [56:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == AXI_TLB_TLB_ENABLE_OFFSET);
    addr_hit[ 1] = (reg_addr == AXI_TLB_TLB_ENTRY_0_PAGEIN_FIRST_LOW_OFFSET);
    addr_hit[ 2] = (reg_addr == AXI_TLB_TLB_ENTRY_0_PAGEIN_FIRST_HIGH_OFFSET);
    addr_hit[ 3] = (reg_addr == AXI_TLB_TLB_ENTRY_0_PAGEIN_LAST_LOW_OFFSET);
    addr_hit[ 4] = (reg_addr == AXI_TLB_TLB_ENTRY_0_PAGEIN_LAST_HIGH_OFFSET);
    addr_hit[ 5] = (reg_addr == AXI_TLB_TLB_ENTRY_0_PAGEOUT_LOW_OFFSET);
    addr_hit[ 6] = (reg_addr == AXI_TLB_TLB_ENTRY_0_PAGEOUT_HIGH_OFFSET);
    addr_hit[ 7] = (reg_addr == AXI_TLB_TLB_ENTRY_0_FLAGS_OFFSET);
    addr_hit[ 8] = (reg_addr == AXI_TLB_TLB_ENTRY_1_PAGEIN_FIRST_LOW_OFFSET);
    addr_hit[ 9] = (reg_addr == AXI_TLB_TLB_ENTRY_1_PAGEIN_FIRST_HIGH_OFFSET);
    addr_hit[10] = (reg_addr == AXI_TLB_TLB_ENTRY_1_PAGEIN_LAST_LOW_OFFSET);
    addr_hit[11] = (reg_addr == AXI_TLB_TLB_ENTRY_1_PAGEIN_LAST_HIGH_OFFSET);
    addr_hit[12] = (reg_addr == AXI_TLB_TLB_ENTRY_1_PAGEOUT_LOW_OFFSET);
    addr_hit[13] = (reg_addr == AXI_TLB_TLB_ENTRY_1_PAGEOUT_HIGH_OFFSET);
    addr_hit[14] = (reg_addr == AXI_TLB_TLB_ENTRY_1_FLAGS_OFFSET);
    addr_hit[15] = (reg_addr == AXI_TLB_TLB_ENTRY_2_PAGEIN_FIRST_LOW_OFFSET);
    addr_hit[16] = (reg_addr == AXI_TLB_TLB_ENTRY_2_PAGEIN_FIRST_HIGH_OFFSET);
    addr_hit[17] = (reg_addr == AXI_TLB_TLB_ENTRY_2_PAGEIN_LAST_LOW_OFFSET);
    addr_hit[18] = (reg_addr == AXI_TLB_TLB_ENTRY_2_PAGEIN_LAST_HIGH_OFFSET);
    addr_hit[19] = (reg_addr == AXI_TLB_TLB_ENTRY_2_PAGEOUT_LOW_OFFSET);
    addr_hit[20] = (reg_addr == AXI_TLB_TLB_ENTRY_2_PAGEOUT_HIGH_OFFSET);
    addr_hit[21] = (reg_addr == AXI_TLB_TLB_ENTRY_2_FLAGS_OFFSET);
    addr_hit[22] = (reg_addr == AXI_TLB_TLB_ENTRY_3_PAGEIN_FIRST_LOW_OFFSET);
    addr_hit[23] = (reg_addr == AXI_TLB_TLB_ENTRY_3_PAGEIN_FIRST_HIGH_OFFSET);
    addr_hit[24] = (reg_addr == AXI_TLB_TLB_ENTRY_3_PAGEIN_LAST_LOW_OFFSET);
    addr_hit[25] = (reg_addr == AXI_TLB_TLB_ENTRY_3_PAGEIN_LAST_HIGH_OFFSET);
    addr_hit[26] = (reg_addr == AXI_TLB_TLB_ENTRY_3_PAGEOUT_LOW_OFFSET);
    addr_hit[27] = (reg_addr == AXI_TLB_TLB_ENTRY_3_PAGEOUT_HIGH_OFFSET);
    addr_hit[28] = (reg_addr == AXI_TLB_TLB_ENTRY_3_FLAGS_OFFSET);
    addr_hit[29] = (reg_addr == AXI_TLB_TLB_ENTRY_4_PAGEIN_FIRST_LOW_OFFSET);
    addr_hit[30] = (reg_addr == AXI_TLB_TLB_ENTRY_4_PAGEIN_FIRST_HIGH_OFFSET);
    addr_hit[31] = (reg_addr == AXI_TLB_TLB_ENTRY_4_PAGEIN_LAST_LOW_OFFSET);
    addr_hit[32] = (reg_addr == AXI_TLB_TLB_ENTRY_4_PAGEIN_LAST_HIGH_OFFSET);
    addr_hit[33] = (reg_addr == AXI_TLB_TLB_ENTRY_4_PAGEOUT_LOW_OFFSET);
    addr_hit[34] = (reg_addr == AXI_TLB_TLB_ENTRY_4_PAGEOUT_HIGH_OFFSET);
    addr_hit[35] = (reg_addr == AXI_TLB_TLB_ENTRY_4_FLAGS_OFFSET);
    addr_hit[36] = (reg_addr == AXI_TLB_TLB_ENTRY_5_PAGEIN_FIRST_LOW_OFFSET);
    addr_hit[37] = (reg_addr == AXI_TLB_TLB_ENTRY_5_PAGEIN_FIRST_HIGH_OFFSET);
    addr_hit[38] = (reg_addr == AXI_TLB_TLB_ENTRY_5_PAGEIN_LAST_LOW_OFFSET);
    addr_hit[39] = (reg_addr == AXI_TLB_TLB_ENTRY_5_PAGEIN_LAST_HIGH_OFFSET);
    addr_hit[40] = (reg_addr == AXI_TLB_TLB_ENTRY_5_PAGEOUT_LOW_OFFSET);
    addr_hit[41] = (reg_addr == AXI_TLB_TLB_ENTRY_5_PAGEOUT_HIGH_OFFSET);
    addr_hit[42] = (reg_addr == AXI_TLB_TLB_ENTRY_5_FLAGS_OFFSET);
    addr_hit[43] = (reg_addr == AXI_TLB_TLB_ENTRY_6_PAGEIN_FIRST_LOW_OFFSET);
    addr_hit[44] = (reg_addr == AXI_TLB_TLB_ENTRY_6_PAGEIN_FIRST_HIGH_OFFSET);
    addr_hit[45] = (reg_addr == AXI_TLB_TLB_ENTRY_6_PAGEIN_LAST_LOW_OFFSET);
    addr_hit[46] = (reg_addr == AXI_TLB_TLB_ENTRY_6_PAGEIN_LAST_HIGH_OFFSET);
    addr_hit[47] = (reg_addr == AXI_TLB_TLB_ENTRY_6_PAGEOUT_LOW_OFFSET);
    addr_hit[48] = (reg_addr == AXI_TLB_TLB_ENTRY_6_PAGEOUT_HIGH_OFFSET);
    addr_hit[49] = (reg_addr == AXI_TLB_TLB_ENTRY_6_FLAGS_OFFSET);
    addr_hit[50] = (reg_addr == AXI_TLB_TLB_ENTRY_7_PAGEIN_FIRST_LOW_OFFSET);
    addr_hit[51] = (reg_addr == AXI_TLB_TLB_ENTRY_7_PAGEIN_FIRST_HIGH_OFFSET);
    addr_hit[52] = (reg_addr == AXI_TLB_TLB_ENTRY_7_PAGEIN_LAST_LOW_OFFSET);
    addr_hit[53] = (reg_addr == AXI_TLB_TLB_ENTRY_7_PAGEIN_LAST_HIGH_OFFSET);
    addr_hit[54] = (reg_addr == AXI_TLB_TLB_ENTRY_7_PAGEOUT_LOW_OFFSET);
    addr_hit[55] = (reg_addr == AXI_TLB_TLB_ENTRY_7_PAGEOUT_HIGH_OFFSET);
    addr_hit[56] = (reg_addr == AXI_TLB_TLB_ENTRY_7_FLAGS_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(AXI_TLB_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(AXI_TLB_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(AXI_TLB_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(AXI_TLB_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(AXI_TLB_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(AXI_TLB_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(AXI_TLB_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(AXI_TLB_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(AXI_TLB_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(AXI_TLB_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(AXI_TLB_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(AXI_TLB_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(AXI_TLB_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(AXI_TLB_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(AXI_TLB_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(AXI_TLB_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(AXI_TLB_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(AXI_TLB_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(AXI_TLB_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(AXI_TLB_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(AXI_TLB_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(AXI_TLB_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(AXI_TLB_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(AXI_TLB_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(AXI_TLB_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(AXI_TLB_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(AXI_TLB_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(AXI_TLB_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(AXI_TLB_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(AXI_TLB_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(AXI_TLB_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(AXI_TLB_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(AXI_TLB_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(AXI_TLB_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(AXI_TLB_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(AXI_TLB_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(AXI_TLB_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(AXI_TLB_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(AXI_TLB_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(AXI_TLB_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(AXI_TLB_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(AXI_TLB_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(AXI_TLB_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(AXI_TLB_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(AXI_TLB_PERMIT[44] & ~reg_be))) |
               (addr_hit[45] & (|(AXI_TLB_PERMIT[45] & ~reg_be))) |
               (addr_hit[46] & (|(AXI_TLB_PERMIT[46] & ~reg_be))) |
               (addr_hit[47] & (|(AXI_TLB_PERMIT[47] & ~reg_be))) |
               (addr_hit[48] & (|(AXI_TLB_PERMIT[48] & ~reg_be))) |
               (addr_hit[49] & (|(AXI_TLB_PERMIT[49] & ~reg_be))) |
               (addr_hit[50] & (|(AXI_TLB_PERMIT[50] & ~reg_be))) |
               (addr_hit[51] & (|(AXI_TLB_PERMIT[51] & ~reg_be))) |
               (addr_hit[52] & (|(AXI_TLB_PERMIT[52] & ~reg_be))) |
               (addr_hit[53] & (|(AXI_TLB_PERMIT[53] & ~reg_be))) |
               (addr_hit[54] & (|(AXI_TLB_PERMIT[54] & ~reg_be))) |
               (addr_hit[55] & (|(AXI_TLB_PERMIT[55] & ~reg_be))) |
               (addr_hit[56] & (|(AXI_TLB_PERMIT[56] & ~reg_be)))));
  end

  assign tlb_enable_we = addr_hit[0] & reg_we & !reg_error;
  assign tlb_enable_wd = reg_wdata[0];

  assign tlb_entry_0_pagein_first_low_we = addr_hit[1] & reg_we & !reg_error;
  assign tlb_entry_0_pagein_first_low_wd = reg_wdata[31:0];

  assign tlb_entry_0_pagein_first_high_we = addr_hit[2] & reg_we & !reg_error;
  assign tlb_entry_0_pagein_first_high_wd = reg_wdata[31:0];

  assign tlb_entry_0_pagein_last_low_we = addr_hit[3] & reg_we & !reg_error;
  assign tlb_entry_0_pagein_last_low_wd = reg_wdata[31:0];

  assign tlb_entry_0_pagein_last_high_we = addr_hit[4] & reg_we & !reg_error;
  assign tlb_entry_0_pagein_last_high_wd = reg_wdata[31:0];

  assign tlb_entry_0_pageout_low_we = addr_hit[5] & reg_we & !reg_error;
  assign tlb_entry_0_pageout_low_wd = reg_wdata[31:0];

  assign tlb_entry_0_pageout_high_we = addr_hit[6] & reg_we & !reg_error;
  assign tlb_entry_0_pageout_high_wd = reg_wdata[31:0];

  assign tlb_entry_0_flags_valid_we = addr_hit[7] & reg_we & !reg_error;
  assign tlb_entry_0_flags_valid_wd = reg_wdata[0];

  assign tlb_entry_0_flags_read_only_we = addr_hit[7] & reg_we & !reg_error;
  assign tlb_entry_0_flags_read_only_wd = reg_wdata[1];

  assign tlb_entry_1_pagein_first_low_we = addr_hit[8] & reg_we & !reg_error;
  assign tlb_entry_1_pagein_first_low_wd = reg_wdata[31:0];

  assign tlb_entry_1_pagein_first_high_we = addr_hit[9] & reg_we & !reg_error;
  assign tlb_entry_1_pagein_first_high_wd = reg_wdata[31:0];

  assign tlb_entry_1_pagein_last_low_we = addr_hit[10] & reg_we & !reg_error;
  assign tlb_entry_1_pagein_last_low_wd = reg_wdata[31:0];

  assign tlb_entry_1_pagein_last_high_we = addr_hit[11] & reg_we & !reg_error;
  assign tlb_entry_1_pagein_last_high_wd = reg_wdata[31:0];

  assign tlb_entry_1_pageout_low_we = addr_hit[12] & reg_we & !reg_error;
  assign tlb_entry_1_pageout_low_wd = reg_wdata[31:0];

  assign tlb_entry_1_pageout_high_we = addr_hit[13] & reg_we & !reg_error;
  assign tlb_entry_1_pageout_high_wd = reg_wdata[31:0];

  assign tlb_entry_1_flags_valid_we = addr_hit[14] & reg_we & !reg_error;
  assign tlb_entry_1_flags_valid_wd = reg_wdata[0];

  assign tlb_entry_1_flags_read_only_we = addr_hit[14] & reg_we & !reg_error;
  assign tlb_entry_1_flags_read_only_wd = reg_wdata[1];

  assign tlb_entry_2_pagein_first_low_we = addr_hit[15] & reg_we & !reg_error;
  assign tlb_entry_2_pagein_first_low_wd = reg_wdata[31:0];

  assign tlb_entry_2_pagein_first_high_we = addr_hit[16] & reg_we & !reg_error;
  assign tlb_entry_2_pagein_first_high_wd = reg_wdata[31:0];

  assign tlb_entry_2_pagein_last_low_we = addr_hit[17] & reg_we & !reg_error;
  assign tlb_entry_2_pagein_last_low_wd = reg_wdata[31:0];

  assign tlb_entry_2_pagein_last_high_we = addr_hit[18] & reg_we & !reg_error;
  assign tlb_entry_2_pagein_last_high_wd = reg_wdata[31:0];

  assign tlb_entry_2_pageout_low_we = addr_hit[19] & reg_we & !reg_error;
  assign tlb_entry_2_pageout_low_wd = reg_wdata[31:0];

  assign tlb_entry_2_pageout_high_we = addr_hit[20] & reg_we & !reg_error;
  assign tlb_entry_2_pageout_high_wd = reg_wdata[31:0];

  assign tlb_entry_2_flags_valid_we = addr_hit[21] & reg_we & !reg_error;
  assign tlb_entry_2_flags_valid_wd = reg_wdata[0];

  assign tlb_entry_2_flags_read_only_we = addr_hit[21] & reg_we & !reg_error;
  assign tlb_entry_2_flags_read_only_wd = reg_wdata[1];

  assign tlb_entry_3_pagein_first_low_we = addr_hit[22] & reg_we & !reg_error;
  assign tlb_entry_3_pagein_first_low_wd = reg_wdata[31:0];

  assign tlb_entry_3_pagein_first_high_we = addr_hit[23] & reg_we & !reg_error;
  assign tlb_entry_3_pagein_first_high_wd = reg_wdata[31:0];

  assign tlb_entry_3_pagein_last_low_we = addr_hit[24] & reg_we & !reg_error;
  assign tlb_entry_3_pagein_last_low_wd = reg_wdata[31:0];

  assign tlb_entry_3_pagein_last_high_we = addr_hit[25] & reg_we & !reg_error;
  assign tlb_entry_3_pagein_last_high_wd = reg_wdata[31:0];

  assign tlb_entry_3_pageout_low_we = addr_hit[26] & reg_we & !reg_error;
  assign tlb_entry_3_pageout_low_wd = reg_wdata[31:0];

  assign tlb_entry_3_pageout_high_we = addr_hit[27] & reg_we & !reg_error;
  assign tlb_entry_3_pageout_high_wd = reg_wdata[31:0];

  assign tlb_entry_3_flags_valid_we = addr_hit[28] & reg_we & !reg_error;
  assign tlb_entry_3_flags_valid_wd = reg_wdata[0];

  assign tlb_entry_3_flags_read_only_we = addr_hit[28] & reg_we & !reg_error;
  assign tlb_entry_3_flags_read_only_wd = reg_wdata[1];

  assign tlb_entry_4_pagein_first_low_we = addr_hit[29] & reg_we & !reg_error;
  assign tlb_entry_4_pagein_first_low_wd = reg_wdata[31:0];

  assign tlb_entry_4_pagein_first_high_we = addr_hit[30] & reg_we & !reg_error;
  assign tlb_entry_4_pagein_first_high_wd = reg_wdata[31:0];

  assign tlb_entry_4_pagein_last_low_we = addr_hit[31] & reg_we & !reg_error;
  assign tlb_entry_4_pagein_last_low_wd = reg_wdata[31:0];

  assign tlb_entry_4_pagein_last_high_we = addr_hit[32] & reg_we & !reg_error;
  assign tlb_entry_4_pagein_last_high_wd = reg_wdata[31:0];

  assign tlb_entry_4_pageout_low_we = addr_hit[33] & reg_we & !reg_error;
  assign tlb_entry_4_pageout_low_wd = reg_wdata[31:0];

  assign tlb_entry_4_pageout_high_we = addr_hit[34] & reg_we & !reg_error;
  assign tlb_entry_4_pageout_high_wd = reg_wdata[31:0];

  assign tlb_entry_4_flags_valid_we = addr_hit[35] & reg_we & !reg_error;
  assign tlb_entry_4_flags_valid_wd = reg_wdata[0];

  assign tlb_entry_4_flags_read_only_we = addr_hit[35] & reg_we & !reg_error;
  assign tlb_entry_4_flags_read_only_wd = reg_wdata[1];

  assign tlb_entry_5_pagein_first_low_we = addr_hit[36] & reg_we & !reg_error;
  assign tlb_entry_5_pagein_first_low_wd = reg_wdata[31:0];

  assign tlb_entry_5_pagein_first_high_we = addr_hit[37] & reg_we & !reg_error;
  assign tlb_entry_5_pagein_first_high_wd = reg_wdata[31:0];

  assign tlb_entry_5_pagein_last_low_we = addr_hit[38] & reg_we & !reg_error;
  assign tlb_entry_5_pagein_last_low_wd = reg_wdata[31:0];

  assign tlb_entry_5_pagein_last_high_we = addr_hit[39] & reg_we & !reg_error;
  assign tlb_entry_5_pagein_last_high_wd = reg_wdata[31:0];

  assign tlb_entry_5_pageout_low_we = addr_hit[40] & reg_we & !reg_error;
  assign tlb_entry_5_pageout_low_wd = reg_wdata[31:0];

  assign tlb_entry_5_pageout_high_we = addr_hit[41] & reg_we & !reg_error;
  assign tlb_entry_5_pageout_high_wd = reg_wdata[31:0];

  assign tlb_entry_5_flags_valid_we = addr_hit[42] & reg_we & !reg_error;
  assign tlb_entry_5_flags_valid_wd = reg_wdata[0];

  assign tlb_entry_5_flags_read_only_we = addr_hit[42] & reg_we & !reg_error;
  assign tlb_entry_5_flags_read_only_wd = reg_wdata[1];

  assign tlb_entry_6_pagein_first_low_we = addr_hit[43] & reg_we & !reg_error;
  assign tlb_entry_6_pagein_first_low_wd = reg_wdata[31:0];

  assign tlb_entry_6_pagein_first_high_we = addr_hit[44] & reg_we & !reg_error;
  assign tlb_entry_6_pagein_first_high_wd = reg_wdata[31:0];

  assign tlb_entry_6_pagein_last_low_we = addr_hit[45] & reg_we & !reg_error;
  assign tlb_entry_6_pagein_last_low_wd = reg_wdata[31:0];

  assign tlb_entry_6_pagein_last_high_we = addr_hit[46] & reg_we & !reg_error;
  assign tlb_entry_6_pagein_last_high_wd = reg_wdata[31:0];

  assign tlb_entry_6_pageout_low_we = addr_hit[47] & reg_we & !reg_error;
  assign tlb_entry_6_pageout_low_wd = reg_wdata[31:0];

  assign tlb_entry_6_pageout_high_we = addr_hit[48] & reg_we & !reg_error;
  assign tlb_entry_6_pageout_high_wd = reg_wdata[31:0];

  assign tlb_entry_6_flags_valid_we = addr_hit[49] & reg_we & !reg_error;
  assign tlb_entry_6_flags_valid_wd = reg_wdata[0];

  assign tlb_entry_6_flags_read_only_we = addr_hit[49] & reg_we & !reg_error;
  assign tlb_entry_6_flags_read_only_wd = reg_wdata[1];

  assign tlb_entry_7_pagein_first_low_we = addr_hit[50] & reg_we & !reg_error;
  assign tlb_entry_7_pagein_first_low_wd = reg_wdata[31:0];

  assign tlb_entry_7_pagein_first_high_we = addr_hit[51] & reg_we & !reg_error;
  assign tlb_entry_7_pagein_first_high_wd = reg_wdata[31:0];

  assign tlb_entry_7_pagein_last_low_we = addr_hit[52] & reg_we & !reg_error;
  assign tlb_entry_7_pagein_last_low_wd = reg_wdata[31:0];

  assign tlb_entry_7_pagein_last_high_we = addr_hit[53] & reg_we & !reg_error;
  assign tlb_entry_7_pagein_last_high_wd = reg_wdata[31:0];

  assign tlb_entry_7_pageout_low_we = addr_hit[54] & reg_we & !reg_error;
  assign tlb_entry_7_pageout_low_wd = reg_wdata[31:0];

  assign tlb_entry_7_pageout_high_we = addr_hit[55] & reg_we & !reg_error;
  assign tlb_entry_7_pageout_high_wd = reg_wdata[31:0];

  assign tlb_entry_7_flags_valid_we = addr_hit[56] & reg_we & !reg_error;
  assign tlb_entry_7_flags_valid_wd = reg_wdata[0];

  assign tlb_entry_7_flags_read_only_we = addr_hit[56] & reg_we & !reg_error;
  assign tlb_entry_7_flags_read_only_wd = reg_wdata[1];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = tlb_enable_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = tlb_entry_0_pagein_first_low_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = tlb_entry_0_pagein_first_high_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = tlb_entry_0_pagein_last_low_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = tlb_entry_0_pagein_last_high_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = tlb_entry_0_pageout_low_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = tlb_entry_0_pageout_high_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = tlb_entry_0_flags_valid_qs;
        reg_rdata_next[1] = tlb_entry_0_flags_read_only_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = tlb_entry_1_pagein_first_low_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = tlb_entry_1_pagein_first_high_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = tlb_entry_1_pagein_last_low_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = tlb_entry_1_pagein_last_high_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = tlb_entry_1_pageout_low_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = tlb_entry_1_pageout_high_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = tlb_entry_1_flags_valid_qs;
        reg_rdata_next[1] = tlb_entry_1_flags_read_only_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = tlb_entry_2_pagein_first_low_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = tlb_entry_2_pagein_first_high_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = tlb_entry_2_pagein_last_low_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = tlb_entry_2_pagein_last_high_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = tlb_entry_2_pageout_low_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = tlb_entry_2_pageout_high_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[0] = tlb_entry_2_flags_valid_qs;
        reg_rdata_next[1] = tlb_entry_2_flags_read_only_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = tlb_entry_3_pagein_first_low_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = tlb_entry_3_pagein_first_high_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[31:0] = tlb_entry_3_pagein_last_low_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = tlb_entry_3_pagein_last_high_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = tlb_entry_3_pageout_low_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = tlb_entry_3_pageout_high_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = tlb_entry_3_flags_valid_qs;
        reg_rdata_next[1] = tlb_entry_3_flags_read_only_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[31:0] = tlb_entry_4_pagein_first_low_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[31:0] = tlb_entry_4_pagein_first_high_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[31:0] = tlb_entry_4_pagein_last_low_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = tlb_entry_4_pagein_last_high_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = tlb_entry_4_pageout_low_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = tlb_entry_4_pageout_high_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[0] = tlb_entry_4_flags_valid_qs;
        reg_rdata_next[1] = tlb_entry_4_flags_read_only_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[31:0] = tlb_entry_5_pagein_first_low_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[31:0] = tlb_entry_5_pagein_first_high_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[31:0] = tlb_entry_5_pagein_last_low_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[31:0] = tlb_entry_5_pagein_last_high_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[31:0] = tlb_entry_5_pageout_low_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[31:0] = tlb_entry_5_pageout_high_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[0] = tlb_entry_5_flags_valid_qs;
        reg_rdata_next[1] = tlb_entry_5_flags_read_only_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[31:0] = tlb_entry_6_pagein_first_low_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[31:0] = tlb_entry_6_pagein_first_high_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[31:0] = tlb_entry_6_pagein_last_low_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[31:0] = tlb_entry_6_pagein_last_high_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[31:0] = tlb_entry_6_pageout_low_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[31:0] = tlb_entry_6_pageout_high_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[0] = tlb_entry_6_flags_valid_qs;
        reg_rdata_next[1] = tlb_entry_6_flags_read_only_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[31:0] = tlb_entry_7_pagein_first_low_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[31:0] = tlb_entry_7_pagein_first_high_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[31:0] = tlb_entry_7_pagein_last_low_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[31:0] = tlb_entry_7_pagein_last_high_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[31:0] = tlb_entry_7_pageout_low_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[31:0] = tlb_entry_7_pageout_high_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[0] = tlb_entry_7_flags_valid_qs;
        reg_rdata_next[1] = tlb_entry_7_flags_read_only_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
