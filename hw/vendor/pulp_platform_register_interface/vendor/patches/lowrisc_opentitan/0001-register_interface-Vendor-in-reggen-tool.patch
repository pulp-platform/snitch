From efb46d22a9eb0dd1272d24c03267e3fa4b807290 Mon Sep 17 00:00:00 2001
From: Florian Zaruba <zarubaf@iis.ee.ethz.ch>
Date: Sat, 29 Aug 2020 14:58:59 +0200
Subject: [PATCH 1/1] register_interface: Vendor in reggen tool

---
 gen_rtl.py     |  7 ++
 reg_pkg.sv.tpl |  4 +-
 reg_top.sv.tpl | 90 ++++++++++++++++++--
 3 files changed, 92 insertions(+), 9 deletions(-)

diff --git a/gen_rtl.py b/gen_rtl.py
index 1c0036ff..2315a5fd 100644
--- a/gen_rtl.py
+++ b/gen_rtl.py
@@ -145,6 +145,13 @@ def json_to_reg(obj):

     log.info("Data Width is set to %d bits", block.width)

+    block.bus_device = obj["bus_device"]
+
+    if block.bus_device != "tlul" and block.bus_device != "reg":
+        log.error(
+            "Current reggen tool doesn't support buses other than TileLink and Register Interface"
+        )
+
     block.params = obj["param_list"] if "param_list" in obj else []

     block.hier_path = obj["hier_path"] if "hier_path" in obj else ""
diff --git a/reg_pkg.sv.tpl b/reg_pkg.sv.tpl
index 728cd20a..8016d853 100644
--- a/reg_pkg.sv.tpl
+++ b/reg_pkg.sv.tpl
@@ -95,7 +95,7 @@ package ${block.name}_reg_pkg;
   // Register to internal design logic //
   ///////////////////////////////////////
 <%
-nbits = block.get_n_bits(["q","qe","re"]) - 1
+nbits = block.get_n_bits(["q","qe","re"])
 packbit = 0
 %>\
 % if nbits > 0:
@@ -124,7 +124,7 @@ packbit = 0
   // Internal design logic to register //
   ///////////////////////////////////////
 <%
-nbits = block.get_n_bits(["d","de"]) - 1
+nbits = block.get_n_bits(["d","de"])
 packbit = 0
 %>\
 % if nbits > 0:
diff --git a/reg_top.sv.tpl b/reg_top.sv.tpl
index f39dc06f..5becb428 100644
--- a/reg_top.sv.tpl
+++ b/reg_top.sv.tpl
@@ -7,7 +7,12 @@
   num_wins = len(block.wins)
   num_wins_width = ((num_wins+1).bit_length()) - 1
   num_dsp  = num_wins + 1
-  params = [p for p in block.params if p["local"] == "false"]
+  reg_intf_req = "reg_req_t"
+  reg_intf_rsp = "reg_rsp_t"
+  params = [p for p in block.params if p["local"] == "false"] + [
+    {"type": "type", "name": reg_intf_req, "default": "logic"},
+    {"type": "type", "name": reg_intf_rsp, "default": "logic"},
+  ]
   max_regs_char = len("{}".format(block.get_n_regs_flat()-1))
   regs_flat = block.get_regs_flat()
 %>
@@ -17,15 +22,24 @@ module ${block.name}_reg_top ${print_param(params)}(
   input clk_i,
   input rst_ni,

-  // Below Regster interface can be changed
+  // Below Register interface can be changed
+% if block.bus_device == "reg":
+  input  ${reg_intf_req} reg_req_i,
+  output ${reg_intf_rsp} reg_rsp_o,
+% else:
   input  tlul_pkg::tl_h2d_t tl_i,
   output tlul_pkg::tl_d2h_t tl_o,
+% endif
 % if num_wins != 0:

   // Output port for window
+  % if block.bus_device == "reg":
+  output ${reg_intf_req} [${num_wins}-1:0] reg_req_win_o,
+  input  ${reg_intf_rsp} [${num_wins}-1:0] reg_rsp_win_i,
+  % else:
   output tlul_pkg::tl_h2d_t tl_win_o  [${num_wins}],
   input  tlul_pkg::tl_d2h_t tl_win_i  [${num_wins}],
-
+  % endif
 % endif
   // To HW
 % if block.get_n_bits(["q","qe","re"]):
@@ -58,18 +72,57 @@ module ${block.name}_reg_top ${print_param(params)}(

   logic [DW-1:0] reg_rdata_next;

+% if block.bus_device == "reg":
+  ${reg_intf_req} reg_intf_req;
+  ${reg_intf_rsp} reg_intf_rsp;
+% else:
   tlul_pkg::tl_h2d_t tl_reg_h2d;
   tlul_pkg::tl_d2h_t tl_reg_d2h;
+% endif

 % if num_wins == 0:
+  % if block.bus_device == "reg":
+  assign reg_intf_req = reg_req_i;
+  assign reg_rsp_o = reg_intf_rsp;
+  % else:
   assign tl_reg_h2d = tl_i;
   assign tl_o       = tl_reg_d2h;
+  % endif
 % else:
+  logic [${num_wins_width-1}:0] reg_steer;
+
+  % if block.bus_device == "reg":
+  ${reg_intf_req} [${num_dsp}-1:0] reg_intf_demux_req;
+  ${reg_intf_rsp} [${num_dsp}-1:0] reg_intf_demux_rsp;
+
+  // demux connection
+  assign reg_intf_req = reg_intf_demux_req[${num_wins}];
+  assign reg_intf_demux_rsp[${num_wins}] = reg_intf_rsp;
+
+    % for i,t in enumerate(block.wins):
+  assign reg_req_win_o[${i}] = reg_intf_demux_req[${i}];
+  assign reg_intf_demux_rsp[${i}] = reg_rsp_win_i[${i}];
+    % endfor
+
+  // Create Socket_1n
+  reg_demux #(
+    .NoPorts  (${num_dsp}),
+    .req_t    (${reg_intf_req}),
+    .rsp_t    (${reg_intf_rsp})
+  ) i_reg_demux (
+    .clk_i,
+    .rst_ni,
+    .in_req_i (reg_req_i),
+    .in_rsp_o (reg_rsp_o),
+    .out_req_o (reg_intf_demux_req),
+    .out_rsp_i (reg_intf_demux_rsp),
+    .in_select_i (reg_steer)
+  );
+
+  % else:
   tlul_pkg::tl_h2d_t tl_socket_h2d [${num_dsp}];
   tlul_pkg::tl_d2h_t tl_socket_d2h [${num_dsp}];

-  logic [${num_wins_width}:0] reg_steer;
-
   // socket_1n connection
   assign tl_reg_h2d = tl_socket_h2d[${num_wins}];
   assign tl_socket_d2h[${num_wins}] = tl_reg_d2h;
@@ -99,6 +152,7 @@ module ${block.name}_reg_top ${print_param(params)}(
     .tl_d_i (tl_socket_d2h),
     .dev_select_i (reg_steer)
   );
+  % endif

   // Create steering logic
   always_comb begin
@@ -107,10 +161,18 @@ module ${block.name}_reg_top ${print_param(params)}(
     // TODO: Can below codes be unique case () inside ?
   % for i,w in enumerate(block.wins):
       % if w.limit_addr == 2**block.addr_width:
+        % if block.bus_device == "reg":
+    if (reg_req_i.addr[AW-1:0] >= ${w.base_addr}) begin
+        % else:
     if (tl_i.a_address[AW-1:0] >= ${w.base_addr}) begin
+        % endif
       // Exceed or meet the address range. Removed the comparison of limit addr ${"'h %x" % w.limit_addr}
       % else:
+        % if block.bus_device == "reg":
+    if (reg_req_i.addr[AW-1:0] >= ${w.base_addr} && reg_req_i.addr[AW-1:0] < ${w.limit_addr}) begin
+        % else:
     if (tl_i.a_address[AW-1:0] >= ${w.base_addr} && tl_i.a_address[AW-1:0] < ${w.limit_addr}) begin
+        % endif
       % endif
       reg_steer = ${i};
     end
@@ -118,6 +180,16 @@ module ${block.name}_reg_top ${print_param(params)}(
   end
 % endif

+% if block.bus_device == "reg":
+  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
+  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
+  assign reg_addr = reg_intf_req.addr;
+  assign reg_wdata = reg_intf_req.wdata;
+  assign reg_be = reg_intf_req.wstrb;
+  assign reg_intf_rsp.rdata = reg_rdata;
+  assign reg_intf_rsp.error = reg_error;
+  assign reg_intf_rsp.ready = 1'b1;
+% else:
   tlul_adapter_reg #(
     .RegAw(AW),
     .RegDw(DW)
@@ -136,6 +208,7 @@ module ${block.name}_reg_top ${print_param(params)}(
     .rdata_i (reg_rdata),
     .error_i (reg_error)
   );
+% endif

   assign reg_rdata = reg_rdata_next ;
   assign reg_error = (devmode_i & addrmiss) | wr_err ;
@@ -377,16 +450,19 @@ ${rdata_gen(sig_name, msb, lsb, swrdaccess)}\
   end

   // Assertions for Register Interface
+% if block.bus_device != "reg":
   `ASSERT_PULSE(wePulse, reg_we)
   `ASSERT_PULSE(rePulse, reg_re)

   `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid)

-  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))
-
   // this is formulated as an assumption such that the FPV testbenches do disprove this
   // property by mistake
   `ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.parity_en == 1'b0)
+% endif
+
+  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))
+

 endmodule
 <%def name="str_bits_sv(msb, lsb)">\
--
2.17.1

