// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module snitch_cluster_peripheral_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 7
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output snitch_cluster_peripheral_reg_pkg::snitch_cluster_peripheral_reg2hw_t reg2hw, // Write
  input  snitch_cluster_peripheral_reg_pkg::snitch_cluster_peripheral_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import snitch_cluster_peripheral_reg_pkg::* ;

  localparam int DW = 64;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic perf_counter_enable_0_cycle_0_qs;
  logic perf_counter_enable_0_cycle_0_wd;
  logic perf_counter_enable_0_cycle_0_we;
  logic perf_counter_enable_0_tcdm_accessed_0_qs;
  logic perf_counter_enable_0_tcdm_accessed_0_wd;
  logic perf_counter_enable_0_tcdm_accessed_0_we;
  logic perf_counter_enable_0_tcdm_congested_0_qs;
  logic perf_counter_enable_0_tcdm_congested_0_wd;
  logic perf_counter_enable_0_tcdm_congested_0_we;
  logic perf_counter_enable_0_issue_fpu_0_qs;
  logic perf_counter_enable_0_issue_fpu_0_wd;
  logic perf_counter_enable_0_issue_fpu_0_we;
  logic perf_counter_enable_0_issue_fpu_seq_0_qs;
  logic perf_counter_enable_0_issue_fpu_seq_0_wd;
  logic perf_counter_enable_0_issue_fpu_seq_0_we;
  logic perf_counter_enable_0_issue_core_to_fpu_0_qs;
  logic perf_counter_enable_0_issue_core_to_fpu_0_wd;
  logic perf_counter_enable_0_issue_core_to_fpu_0_we;
  logic perf_counter_enable_0_dma_aw_stall_0_qs;
  logic perf_counter_enable_0_dma_aw_stall_0_wd;
  logic perf_counter_enable_0_dma_aw_stall_0_we;
  logic perf_counter_enable_0_dma_ar_stall_0_qs;
  logic perf_counter_enable_0_dma_ar_stall_0_wd;
  logic perf_counter_enable_0_dma_ar_stall_0_we;
  logic perf_counter_enable_0_dma_r_stall_0_qs;
  logic perf_counter_enable_0_dma_r_stall_0_wd;
  logic perf_counter_enable_0_dma_r_stall_0_we;
  logic perf_counter_enable_0_dma_w_stall_0_qs;
  logic perf_counter_enable_0_dma_w_stall_0_wd;
  logic perf_counter_enable_0_dma_w_stall_0_we;
  logic perf_counter_enable_0_dma_buf_w_stall_0_qs;
  logic perf_counter_enable_0_dma_buf_w_stall_0_wd;
  logic perf_counter_enable_0_dma_buf_w_stall_0_we;
  logic perf_counter_enable_0_dma_buf_r_stall_0_qs;
  logic perf_counter_enable_0_dma_buf_r_stall_0_wd;
  logic perf_counter_enable_0_dma_buf_r_stall_0_we;
  logic perf_counter_enable_0_dma_aw_done_0_qs;
  logic perf_counter_enable_0_dma_aw_done_0_wd;
  logic perf_counter_enable_0_dma_aw_done_0_we;
  logic perf_counter_enable_0_dma_aw_bw_0_qs;
  logic perf_counter_enable_0_dma_aw_bw_0_wd;
  logic perf_counter_enable_0_dma_aw_bw_0_we;
  logic perf_counter_enable_0_dma_ar_done_0_qs;
  logic perf_counter_enable_0_dma_ar_done_0_wd;
  logic perf_counter_enable_0_dma_ar_done_0_we;
  logic perf_counter_enable_0_dma_ar_bw_0_qs;
  logic perf_counter_enable_0_dma_ar_bw_0_wd;
  logic perf_counter_enable_0_dma_ar_bw_0_we;
  logic perf_counter_enable_0_dma_r_done_0_qs;
  logic perf_counter_enable_0_dma_r_done_0_wd;
  logic perf_counter_enable_0_dma_r_done_0_we;
  logic perf_counter_enable_0_dma_r_bw_0_qs;
  logic perf_counter_enable_0_dma_r_bw_0_wd;
  logic perf_counter_enable_0_dma_r_bw_0_we;
  logic perf_counter_enable_0_dma_w_done_0_qs;
  logic perf_counter_enable_0_dma_w_done_0_wd;
  logic perf_counter_enable_0_dma_w_done_0_we;
  logic perf_counter_enable_0_dma_w_bw_0_qs;
  logic perf_counter_enable_0_dma_w_bw_0_wd;
  logic perf_counter_enable_0_dma_w_bw_0_we;
  logic perf_counter_enable_0_dma_b_done_0_qs;
  logic perf_counter_enable_0_dma_b_done_0_wd;
  logic perf_counter_enable_0_dma_b_done_0_we;
  logic perf_counter_enable_0_dma_busy_0_qs;
  logic perf_counter_enable_0_dma_busy_0_wd;
  logic perf_counter_enable_0_dma_busy_0_we;
  logic perf_counter_enable_0_icache_miss_0_qs;
  logic perf_counter_enable_0_icache_miss_0_wd;
  logic perf_counter_enable_0_icache_miss_0_we;
  logic perf_counter_enable_0_icache_hit_0_qs;
  logic perf_counter_enable_0_icache_hit_0_wd;
  logic perf_counter_enable_0_icache_hit_0_we;
  logic perf_counter_enable_0_icache_prefetch_0_qs;
  logic perf_counter_enable_0_icache_prefetch_0_wd;
  logic perf_counter_enable_0_icache_prefetch_0_we;
  logic perf_counter_enable_0_icache_double_hit_0_qs;
  logic perf_counter_enable_0_icache_double_hit_0_wd;
  logic perf_counter_enable_0_icache_double_hit_0_we;
  logic perf_counter_enable_0_icache_stall_0_qs;
  logic perf_counter_enable_0_icache_stall_0_wd;
  logic perf_counter_enable_0_icache_stall_0_we;
  logic perf_counter_enable_1_cycle_1_qs;
  logic perf_counter_enable_1_cycle_1_wd;
  logic perf_counter_enable_1_cycle_1_we;
  logic perf_counter_enable_1_tcdm_accessed_1_qs;
  logic perf_counter_enable_1_tcdm_accessed_1_wd;
  logic perf_counter_enable_1_tcdm_accessed_1_we;
  logic perf_counter_enable_1_tcdm_congested_1_qs;
  logic perf_counter_enable_1_tcdm_congested_1_wd;
  logic perf_counter_enable_1_tcdm_congested_1_we;
  logic perf_counter_enable_1_issue_fpu_1_qs;
  logic perf_counter_enable_1_issue_fpu_1_wd;
  logic perf_counter_enable_1_issue_fpu_1_we;
  logic perf_counter_enable_1_issue_fpu_seq_1_qs;
  logic perf_counter_enable_1_issue_fpu_seq_1_wd;
  logic perf_counter_enable_1_issue_fpu_seq_1_we;
  logic perf_counter_enable_1_issue_core_to_fpu_1_qs;
  logic perf_counter_enable_1_issue_core_to_fpu_1_wd;
  logic perf_counter_enable_1_issue_core_to_fpu_1_we;
  logic perf_counter_enable_1_dma_aw_stall_1_qs;
  logic perf_counter_enable_1_dma_aw_stall_1_wd;
  logic perf_counter_enable_1_dma_aw_stall_1_we;
  logic perf_counter_enable_1_dma_ar_stall_1_qs;
  logic perf_counter_enable_1_dma_ar_stall_1_wd;
  logic perf_counter_enable_1_dma_ar_stall_1_we;
  logic perf_counter_enable_1_dma_r_stall_1_qs;
  logic perf_counter_enable_1_dma_r_stall_1_wd;
  logic perf_counter_enable_1_dma_r_stall_1_we;
  logic perf_counter_enable_1_dma_w_stall_1_qs;
  logic perf_counter_enable_1_dma_w_stall_1_wd;
  logic perf_counter_enable_1_dma_w_stall_1_we;
  logic perf_counter_enable_1_dma_buf_w_stall_1_qs;
  logic perf_counter_enable_1_dma_buf_w_stall_1_wd;
  logic perf_counter_enable_1_dma_buf_w_stall_1_we;
  logic perf_counter_enable_1_dma_buf_r_stall_1_qs;
  logic perf_counter_enable_1_dma_buf_r_stall_1_wd;
  logic perf_counter_enable_1_dma_buf_r_stall_1_we;
  logic perf_counter_enable_1_dma_aw_done_1_qs;
  logic perf_counter_enable_1_dma_aw_done_1_wd;
  logic perf_counter_enable_1_dma_aw_done_1_we;
  logic perf_counter_enable_1_dma_aw_bw_1_qs;
  logic perf_counter_enable_1_dma_aw_bw_1_wd;
  logic perf_counter_enable_1_dma_aw_bw_1_we;
  logic perf_counter_enable_1_dma_ar_done_1_qs;
  logic perf_counter_enable_1_dma_ar_done_1_wd;
  logic perf_counter_enable_1_dma_ar_done_1_we;
  logic perf_counter_enable_1_dma_ar_bw_1_qs;
  logic perf_counter_enable_1_dma_ar_bw_1_wd;
  logic perf_counter_enable_1_dma_ar_bw_1_we;
  logic perf_counter_enable_1_dma_r_done_1_qs;
  logic perf_counter_enable_1_dma_r_done_1_wd;
  logic perf_counter_enable_1_dma_r_done_1_we;
  logic perf_counter_enable_1_dma_r_bw_1_qs;
  logic perf_counter_enable_1_dma_r_bw_1_wd;
  logic perf_counter_enable_1_dma_r_bw_1_we;
  logic perf_counter_enable_1_dma_w_done_1_qs;
  logic perf_counter_enable_1_dma_w_done_1_wd;
  logic perf_counter_enable_1_dma_w_done_1_we;
  logic perf_counter_enable_1_dma_w_bw_1_qs;
  logic perf_counter_enable_1_dma_w_bw_1_wd;
  logic perf_counter_enable_1_dma_w_bw_1_we;
  logic perf_counter_enable_1_dma_b_done_1_qs;
  logic perf_counter_enable_1_dma_b_done_1_wd;
  logic perf_counter_enable_1_dma_b_done_1_we;
  logic perf_counter_enable_1_dma_busy_1_qs;
  logic perf_counter_enable_1_dma_busy_1_wd;
  logic perf_counter_enable_1_dma_busy_1_we;
  logic perf_counter_enable_1_icache_miss_1_qs;
  logic perf_counter_enable_1_icache_miss_1_wd;
  logic perf_counter_enable_1_icache_miss_1_we;
  logic perf_counter_enable_1_icache_hit_1_qs;
  logic perf_counter_enable_1_icache_hit_1_wd;
  logic perf_counter_enable_1_icache_hit_1_we;
  logic perf_counter_enable_1_icache_prefetch_1_qs;
  logic perf_counter_enable_1_icache_prefetch_1_wd;
  logic perf_counter_enable_1_icache_prefetch_1_we;
  logic perf_counter_enable_1_icache_double_hit_1_qs;
  logic perf_counter_enable_1_icache_double_hit_1_wd;
  logic perf_counter_enable_1_icache_double_hit_1_we;
  logic perf_counter_enable_1_icache_stall_1_qs;
  logic perf_counter_enable_1_icache_stall_1_wd;
  logic perf_counter_enable_1_icache_stall_1_we;
  logic [9:0] hart_select_0_qs;
  logic [9:0] hart_select_0_wd;
  logic hart_select_0_we;
  logic [9:0] hart_select_1_qs;
  logic [9:0] hart_select_1_wd;
  logic hart_select_1_we;
  logic [47:0] perf_counter_0_qs;
  logic [47:0] perf_counter_0_wd;
  logic perf_counter_0_we;
  logic perf_counter_0_re;
  logic [47:0] perf_counter_1_qs;
  logic [47:0] perf_counter_1_wd;
  logic perf_counter_1_we;
  logic perf_counter_1_re;
  logic [31:0] cl_clint_set_wd;
  logic cl_clint_set_we;
  logic [31:0] cl_clint_clear_wd;
  logic cl_clint_clear_we;
  logic [31:0] hw_barrier_qs;
  logic hw_barrier_re;
  logic icache_prefetch_enable_wd;
  logic icache_prefetch_enable_we;

  // Register instances

  // Subregister 0 of Multireg perf_counter_enable
  // R[perf_counter_enable_0]: V(False)

  // F[cycle_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_cycle_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_cycle_0_we),
    .wd     (perf_counter_enable_0_cycle_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].cycle.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_cycle_0_qs)
  );


  // F[tcdm_accessed_0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_tcdm_accessed_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_tcdm_accessed_0_we),
    .wd     (perf_counter_enable_0_tcdm_accessed_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].tcdm_accessed.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_tcdm_accessed_0_qs)
  );


  // F[tcdm_congested_0]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_tcdm_congested_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_tcdm_congested_0_we),
    .wd     (perf_counter_enable_0_tcdm_congested_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].tcdm_congested.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_tcdm_congested_0_qs)
  );


  // F[issue_fpu_0]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_issue_fpu_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_issue_fpu_0_we),
    .wd     (perf_counter_enable_0_issue_fpu_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].issue_fpu.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_issue_fpu_0_qs)
  );


  // F[issue_fpu_seq_0]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_issue_fpu_seq_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_issue_fpu_seq_0_we),
    .wd     (perf_counter_enable_0_issue_fpu_seq_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].issue_fpu_seq.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_issue_fpu_seq_0_qs)
  );


  // F[issue_core_to_fpu_0]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_issue_core_to_fpu_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_issue_core_to_fpu_0_we),
    .wd     (perf_counter_enable_0_issue_core_to_fpu_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].issue_core_to_fpu.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_issue_core_to_fpu_0_qs)
  );


  // F[dma_aw_stall_0]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_dma_aw_stall_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_dma_aw_stall_0_we),
    .wd     (perf_counter_enable_0_dma_aw_stall_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].dma_aw_stall.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_dma_aw_stall_0_qs)
  );


  // F[dma_ar_stall_0]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_dma_ar_stall_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_dma_ar_stall_0_we),
    .wd     (perf_counter_enable_0_dma_ar_stall_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].dma_ar_stall.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_dma_ar_stall_0_qs)
  );


  // F[dma_r_stall_0]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_dma_r_stall_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_dma_r_stall_0_we),
    .wd     (perf_counter_enable_0_dma_r_stall_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].dma_r_stall.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_dma_r_stall_0_qs)
  );


  // F[dma_w_stall_0]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_dma_w_stall_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_dma_w_stall_0_we),
    .wd     (perf_counter_enable_0_dma_w_stall_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].dma_w_stall.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_dma_w_stall_0_qs)
  );


  // F[dma_buf_w_stall_0]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_dma_buf_w_stall_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_dma_buf_w_stall_0_we),
    .wd     (perf_counter_enable_0_dma_buf_w_stall_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].dma_buf_w_stall.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_dma_buf_w_stall_0_qs)
  );


  // F[dma_buf_r_stall_0]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_dma_buf_r_stall_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_dma_buf_r_stall_0_we),
    .wd     (perf_counter_enable_0_dma_buf_r_stall_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].dma_buf_r_stall.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_dma_buf_r_stall_0_qs)
  );


  // F[dma_aw_done_0]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_dma_aw_done_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_dma_aw_done_0_we),
    .wd     (perf_counter_enable_0_dma_aw_done_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].dma_aw_done.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_dma_aw_done_0_qs)
  );


  // F[dma_aw_bw_0]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_dma_aw_bw_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_dma_aw_bw_0_we),
    .wd     (perf_counter_enable_0_dma_aw_bw_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].dma_aw_bw.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_dma_aw_bw_0_qs)
  );


  // F[dma_ar_done_0]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_dma_ar_done_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_dma_ar_done_0_we),
    .wd     (perf_counter_enable_0_dma_ar_done_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].dma_ar_done.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_dma_ar_done_0_qs)
  );


  // F[dma_ar_bw_0]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_dma_ar_bw_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_dma_ar_bw_0_we),
    .wd     (perf_counter_enable_0_dma_ar_bw_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].dma_ar_bw.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_dma_ar_bw_0_qs)
  );


  // F[dma_r_done_0]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_dma_r_done_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_dma_r_done_0_we),
    .wd     (perf_counter_enable_0_dma_r_done_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].dma_r_done.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_dma_r_done_0_qs)
  );


  // F[dma_r_bw_0]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_dma_r_bw_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_dma_r_bw_0_we),
    .wd     (perf_counter_enable_0_dma_r_bw_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].dma_r_bw.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_dma_r_bw_0_qs)
  );


  // F[dma_w_done_0]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_dma_w_done_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_dma_w_done_0_we),
    .wd     (perf_counter_enable_0_dma_w_done_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].dma_w_done.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_dma_w_done_0_qs)
  );


  // F[dma_w_bw_0]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_dma_w_bw_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_dma_w_bw_0_we),
    .wd     (perf_counter_enable_0_dma_w_bw_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].dma_w_bw.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_dma_w_bw_0_qs)
  );


  // F[dma_b_done_0]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_dma_b_done_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_dma_b_done_0_we),
    .wd     (perf_counter_enable_0_dma_b_done_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].dma_b_done.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_dma_b_done_0_qs)
  );


  // F[dma_busy_0]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_dma_busy_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_dma_busy_0_we),
    .wd     (perf_counter_enable_0_dma_busy_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].dma_busy.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_dma_busy_0_qs)
  );


  // F[icache_miss_0]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_icache_miss_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_icache_miss_0_we),
    .wd     (perf_counter_enable_0_icache_miss_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].icache_miss.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_icache_miss_0_qs)
  );


  // F[icache_hit_0]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_icache_hit_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_icache_hit_0_we),
    .wd     (perf_counter_enable_0_icache_hit_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].icache_hit.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_icache_hit_0_qs)
  );


  // F[icache_prefetch_0]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_icache_prefetch_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_icache_prefetch_0_we),
    .wd     (perf_counter_enable_0_icache_prefetch_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].icache_prefetch.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_icache_prefetch_0_qs)
  );


  // F[icache_double_hit_0]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_icache_double_hit_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_icache_double_hit_0_we),
    .wd     (perf_counter_enable_0_icache_double_hit_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].icache_double_hit.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_icache_double_hit_0_qs)
  );


  // F[icache_stall_0]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_0_icache_stall_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_0_icache_stall_0_we),
    .wd     (perf_counter_enable_0_icache_stall_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[0].icache_stall.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_0_icache_stall_0_qs)
  );


  // Subregister 1 of Multireg perf_counter_enable
  // R[perf_counter_enable_1]: V(False)

  // F[cycle_1]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_cycle_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_cycle_1_we),
    .wd     (perf_counter_enable_1_cycle_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].cycle.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_cycle_1_qs)
  );


  // F[tcdm_accessed_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_tcdm_accessed_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_tcdm_accessed_1_we),
    .wd     (perf_counter_enable_1_tcdm_accessed_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].tcdm_accessed.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_tcdm_accessed_1_qs)
  );


  // F[tcdm_congested_1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_tcdm_congested_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_tcdm_congested_1_we),
    .wd     (perf_counter_enable_1_tcdm_congested_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].tcdm_congested.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_tcdm_congested_1_qs)
  );


  // F[issue_fpu_1]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_issue_fpu_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_issue_fpu_1_we),
    .wd     (perf_counter_enable_1_issue_fpu_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].issue_fpu.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_issue_fpu_1_qs)
  );


  // F[issue_fpu_seq_1]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_issue_fpu_seq_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_issue_fpu_seq_1_we),
    .wd     (perf_counter_enable_1_issue_fpu_seq_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].issue_fpu_seq.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_issue_fpu_seq_1_qs)
  );


  // F[issue_core_to_fpu_1]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_issue_core_to_fpu_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_issue_core_to_fpu_1_we),
    .wd     (perf_counter_enable_1_issue_core_to_fpu_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].issue_core_to_fpu.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_issue_core_to_fpu_1_qs)
  );


  // F[dma_aw_stall_1]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_dma_aw_stall_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_dma_aw_stall_1_we),
    .wd     (perf_counter_enable_1_dma_aw_stall_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].dma_aw_stall.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_dma_aw_stall_1_qs)
  );


  // F[dma_ar_stall_1]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_dma_ar_stall_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_dma_ar_stall_1_we),
    .wd     (perf_counter_enable_1_dma_ar_stall_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].dma_ar_stall.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_dma_ar_stall_1_qs)
  );


  // F[dma_r_stall_1]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_dma_r_stall_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_dma_r_stall_1_we),
    .wd     (perf_counter_enable_1_dma_r_stall_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].dma_r_stall.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_dma_r_stall_1_qs)
  );


  // F[dma_w_stall_1]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_dma_w_stall_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_dma_w_stall_1_we),
    .wd     (perf_counter_enable_1_dma_w_stall_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].dma_w_stall.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_dma_w_stall_1_qs)
  );


  // F[dma_buf_w_stall_1]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_dma_buf_w_stall_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_dma_buf_w_stall_1_we),
    .wd     (perf_counter_enable_1_dma_buf_w_stall_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].dma_buf_w_stall.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_dma_buf_w_stall_1_qs)
  );


  // F[dma_buf_r_stall_1]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_dma_buf_r_stall_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_dma_buf_r_stall_1_we),
    .wd     (perf_counter_enable_1_dma_buf_r_stall_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].dma_buf_r_stall.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_dma_buf_r_stall_1_qs)
  );


  // F[dma_aw_done_1]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_dma_aw_done_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_dma_aw_done_1_we),
    .wd     (perf_counter_enable_1_dma_aw_done_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].dma_aw_done.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_dma_aw_done_1_qs)
  );


  // F[dma_aw_bw_1]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_dma_aw_bw_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_dma_aw_bw_1_we),
    .wd     (perf_counter_enable_1_dma_aw_bw_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].dma_aw_bw.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_dma_aw_bw_1_qs)
  );


  // F[dma_ar_done_1]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_dma_ar_done_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_dma_ar_done_1_we),
    .wd     (perf_counter_enable_1_dma_ar_done_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].dma_ar_done.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_dma_ar_done_1_qs)
  );


  // F[dma_ar_bw_1]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_dma_ar_bw_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_dma_ar_bw_1_we),
    .wd     (perf_counter_enable_1_dma_ar_bw_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].dma_ar_bw.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_dma_ar_bw_1_qs)
  );


  // F[dma_r_done_1]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_dma_r_done_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_dma_r_done_1_we),
    .wd     (perf_counter_enable_1_dma_r_done_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].dma_r_done.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_dma_r_done_1_qs)
  );


  // F[dma_r_bw_1]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_dma_r_bw_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_dma_r_bw_1_we),
    .wd     (perf_counter_enable_1_dma_r_bw_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].dma_r_bw.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_dma_r_bw_1_qs)
  );


  // F[dma_w_done_1]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_dma_w_done_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_dma_w_done_1_we),
    .wd     (perf_counter_enable_1_dma_w_done_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].dma_w_done.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_dma_w_done_1_qs)
  );


  // F[dma_w_bw_1]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_dma_w_bw_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_dma_w_bw_1_we),
    .wd     (perf_counter_enable_1_dma_w_bw_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].dma_w_bw.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_dma_w_bw_1_qs)
  );


  // F[dma_b_done_1]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_dma_b_done_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_dma_b_done_1_we),
    .wd     (perf_counter_enable_1_dma_b_done_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].dma_b_done.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_dma_b_done_1_qs)
  );


  // F[dma_busy_1]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_dma_busy_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_dma_busy_1_we),
    .wd     (perf_counter_enable_1_dma_busy_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].dma_busy.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_dma_busy_1_qs)
  );


  // F[icache_miss_1]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_icache_miss_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_icache_miss_1_we),
    .wd     (perf_counter_enable_1_icache_miss_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].icache_miss.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_icache_miss_1_qs)
  );


  // F[icache_hit_1]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_icache_hit_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_icache_hit_1_we),
    .wd     (perf_counter_enable_1_icache_hit_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].icache_hit.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_icache_hit_1_qs)
  );


  // F[icache_prefetch_1]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_icache_prefetch_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_icache_prefetch_1_we),
    .wd     (perf_counter_enable_1_icache_prefetch_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].icache_prefetch.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_icache_prefetch_1_qs)
  );


  // F[icache_double_hit_1]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_icache_double_hit_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_icache_double_hit_1_we),
    .wd     (perf_counter_enable_1_icache_double_hit_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].icache_double_hit.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_icache_double_hit_1_qs)
  );


  // F[icache_stall_1]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_perf_counter_enable_1_icache_stall_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (perf_counter_enable_1_icache_stall_1_we),
    .wd     (perf_counter_enable_1_icache_stall_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.perf_counter_enable[1].icache_stall.q ),

    // to register interface (read)
    .qs     (perf_counter_enable_1_icache_stall_1_qs)
  );




  // Subregister 0 of Multireg hart_select
  // R[hart_select_0]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_hart_select_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hart_select_0_we),
    .wd     (hart_select_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hart_select[0].q ),

    // to register interface (read)
    .qs     (hart_select_0_qs)
  );

  // Subregister 1 of Multireg hart_select
  // R[hart_select_1]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_hart_select_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (hart_select_1_we),
    .wd     (hart_select_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hart_select[1].q ),

    // to register interface (read)
    .qs     (hart_select_1_qs)
  );



  // Subregister 0 of Multireg perf_counter
  // R[perf_counter_0]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_0 (
    .re     (perf_counter_0_re),
    .we     (perf_counter_0_we),
    .wd     (perf_counter_0_wd),
    .d      (hw2reg.perf_counter[0].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[0].qe),
    .q      (reg2hw.perf_counter[0].q ),
    .qs     (perf_counter_0_qs)
  );

  // Subregister 1 of Multireg perf_counter
  // R[perf_counter_1]: V(True)

  prim_subreg_ext #(
    .DW    (48)
  ) u_perf_counter_1 (
    .re     (perf_counter_1_re),
    .we     (perf_counter_1_we),
    .wd     (perf_counter_1_wd),
    .d      (hw2reg.perf_counter[1].d),
    .qre    (),
    .qe     (reg2hw.perf_counter[1].qe),
    .q      (reg2hw.perf_counter[1].q ),
    .qs     (perf_counter_1_qs)
  );


  // R[cl_clint_set]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_cl_clint_set (
    .re     (1'b0),
    .we     (cl_clint_set_we),
    .wd     (cl_clint_set_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.cl_clint_set.qe),
    .q      (reg2hw.cl_clint_set.q ),
    .qs     ()
  );


  // R[cl_clint_clear]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_cl_clint_clear (
    .re     (1'b0),
    .we     (cl_clint_clear_we),
    .wd     (cl_clint_clear_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.cl_clint_clear.qe),
    .q      (reg2hw.cl_clint_clear.q ),
    .qs     ()
  );


  // R[hw_barrier]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_hw_barrier (
    .re     (hw_barrier_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.hw_barrier.d),
    .qre    (),
    .qe     (),
    .q      (reg2hw.hw_barrier.q ),
    .qs     (hw_barrier_qs)
  );


  // R[icache_prefetch_enable]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h1)
  ) u_icache_prefetch_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (icache_prefetch_enable_we),
    .wd     (icache_prefetch_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.icache_prefetch_enable.q ),

    .qs     ()
  );




  logic [9:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_0_OFFSET);
    addr_hit[1] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_ENABLE_1_OFFSET);
    addr_hit[2] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_HART_SELECT_0_OFFSET);
    addr_hit[3] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_HART_SELECT_1_OFFSET);
    addr_hit[4] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_0_OFFSET);
    addr_hit[5] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_PERF_COUNTER_1_OFFSET);
    addr_hit[6] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_CL_CLINT_SET_OFFSET);
    addr_hit[7] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_CL_CLINT_CLEAR_OFFSET);
    addr_hit[8] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_HW_BARRIER_OFFSET);
    addr_hit[9] = (reg_addr == SNITCH_CLUSTER_PERIPHERAL_ICACHE_PREFETCH_ENABLE_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[4] & ~reg_be))) |
               (addr_hit[5] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[5] & ~reg_be))) |
               (addr_hit[6] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[6] & ~reg_be))) |
               (addr_hit[7] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[7] & ~reg_be))) |
               (addr_hit[8] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[8] & ~reg_be))) |
               (addr_hit[9] & (|(SNITCH_CLUSTER_PERIPHERAL_PERMIT[9] & ~reg_be)))));
  end

  assign perf_counter_enable_0_cycle_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_cycle_0_wd = reg_wdata[0];

  assign perf_counter_enable_0_tcdm_accessed_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_tcdm_accessed_0_wd = reg_wdata[1];

  assign perf_counter_enable_0_tcdm_congested_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_tcdm_congested_0_wd = reg_wdata[2];

  assign perf_counter_enable_0_issue_fpu_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_issue_fpu_0_wd = reg_wdata[3];

  assign perf_counter_enable_0_issue_fpu_seq_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_issue_fpu_seq_0_wd = reg_wdata[4];

  assign perf_counter_enable_0_issue_core_to_fpu_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_issue_core_to_fpu_0_wd = reg_wdata[5];

  assign perf_counter_enable_0_dma_aw_stall_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_dma_aw_stall_0_wd = reg_wdata[6];

  assign perf_counter_enable_0_dma_ar_stall_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_dma_ar_stall_0_wd = reg_wdata[7];

  assign perf_counter_enable_0_dma_r_stall_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_dma_r_stall_0_wd = reg_wdata[8];

  assign perf_counter_enable_0_dma_w_stall_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_dma_w_stall_0_wd = reg_wdata[9];

  assign perf_counter_enable_0_dma_buf_w_stall_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_dma_buf_w_stall_0_wd = reg_wdata[10];

  assign perf_counter_enable_0_dma_buf_r_stall_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_dma_buf_r_stall_0_wd = reg_wdata[11];

  assign perf_counter_enable_0_dma_aw_done_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_dma_aw_done_0_wd = reg_wdata[12];

  assign perf_counter_enable_0_dma_aw_bw_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_dma_aw_bw_0_wd = reg_wdata[13];

  assign perf_counter_enable_0_dma_ar_done_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_dma_ar_done_0_wd = reg_wdata[14];

  assign perf_counter_enable_0_dma_ar_bw_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_dma_ar_bw_0_wd = reg_wdata[15];

  assign perf_counter_enable_0_dma_r_done_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_dma_r_done_0_wd = reg_wdata[16];

  assign perf_counter_enable_0_dma_r_bw_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_dma_r_bw_0_wd = reg_wdata[17];

  assign perf_counter_enable_0_dma_w_done_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_dma_w_done_0_wd = reg_wdata[18];

  assign perf_counter_enable_0_dma_w_bw_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_dma_w_bw_0_wd = reg_wdata[19];

  assign perf_counter_enable_0_dma_b_done_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_dma_b_done_0_wd = reg_wdata[20];

  assign perf_counter_enable_0_dma_busy_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_dma_busy_0_wd = reg_wdata[21];

  assign perf_counter_enable_0_icache_miss_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_icache_miss_0_wd = reg_wdata[22];

  assign perf_counter_enable_0_icache_hit_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_icache_hit_0_wd = reg_wdata[23];

  assign perf_counter_enable_0_icache_prefetch_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_icache_prefetch_0_wd = reg_wdata[24];

  assign perf_counter_enable_0_icache_double_hit_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_icache_double_hit_0_wd = reg_wdata[25];

  assign perf_counter_enable_0_icache_stall_0_we = addr_hit[0] & reg_we & !reg_error;
  assign perf_counter_enable_0_icache_stall_0_wd = reg_wdata[26];

  assign perf_counter_enable_1_cycle_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_cycle_1_wd = reg_wdata[0];

  assign perf_counter_enable_1_tcdm_accessed_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_tcdm_accessed_1_wd = reg_wdata[1];

  assign perf_counter_enable_1_tcdm_congested_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_tcdm_congested_1_wd = reg_wdata[2];

  assign perf_counter_enable_1_issue_fpu_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_issue_fpu_1_wd = reg_wdata[3];

  assign perf_counter_enable_1_issue_fpu_seq_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_issue_fpu_seq_1_wd = reg_wdata[4];

  assign perf_counter_enable_1_issue_core_to_fpu_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_issue_core_to_fpu_1_wd = reg_wdata[5];

  assign perf_counter_enable_1_dma_aw_stall_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_dma_aw_stall_1_wd = reg_wdata[6];

  assign perf_counter_enable_1_dma_ar_stall_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_dma_ar_stall_1_wd = reg_wdata[7];

  assign perf_counter_enable_1_dma_r_stall_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_dma_r_stall_1_wd = reg_wdata[8];

  assign perf_counter_enable_1_dma_w_stall_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_dma_w_stall_1_wd = reg_wdata[9];

  assign perf_counter_enable_1_dma_buf_w_stall_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_dma_buf_w_stall_1_wd = reg_wdata[10];

  assign perf_counter_enable_1_dma_buf_r_stall_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_dma_buf_r_stall_1_wd = reg_wdata[11];

  assign perf_counter_enable_1_dma_aw_done_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_dma_aw_done_1_wd = reg_wdata[12];

  assign perf_counter_enable_1_dma_aw_bw_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_dma_aw_bw_1_wd = reg_wdata[13];

  assign perf_counter_enable_1_dma_ar_done_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_dma_ar_done_1_wd = reg_wdata[14];

  assign perf_counter_enable_1_dma_ar_bw_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_dma_ar_bw_1_wd = reg_wdata[15];

  assign perf_counter_enable_1_dma_r_done_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_dma_r_done_1_wd = reg_wdata[16];

  assign perf_counter_enable_1_dma_r_bw_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_dma_r_bw_1_wd = reg_wdata[17];

  assign perf_counter_enable_1_dma_w_done_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_dma_w_done_1_wd = reg_wdata[18];

  assign perf_counter_enable_1_dma_w_bw_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_dma_w_bw_1_wd = reg_wdata[19];

  assign perf_counter_enable_1_dma_b_done_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_dma_b_done_1_wd = reg_wdata[20];

  assign perf_counter_enable_1_dma_busy_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_dma_busy_1_wd = reg_wdata[21];

  assign perf_counter_enable_1_icache_miss_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_icache_miss_1_wd = reg_wdata[22];

  assign perf_counter_enable_1_icache_hit_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_icache_hit_1_wd = reg_wdata[23];

  assign perf_counter_enable_1_icache_prefetch_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_icache_prefetch_1_wd = reg_wdata[24];

  assign perf_counter_enable_1_icache_double_hit_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_icache_double_hit_1_wd = reg_wdata[25];

  assign perf_counter_enable_1_icache_stall_1_we = addr_hit[1] & reg_we & !reg_error;
  assign perf_counter_enable_1_icache_stall_1_wd = reg_wdata[26];

  assign hart_select_0_we = addr_hit[2] & reg_we & !reg_error;
  assign hart_select_0_wd = reg_wdata[9:0];

  assign hart_select_1_we = addr_hit[3] & reg_we & !reg_error;
  assign hart_select_1_wd = reg_wdata[9:0];

  assign perf_counter_0_we = addr_hit[4] & reg_we & !reg_error;
  assign perf_counter_0_wd = reg_wdata[47:0];
  assign perf_counter_0_re = addr_hit[4] & reg_re & !reg_error;

  assign perf_counter_1_we = addr_hit[5] & reg_we & !reg_error;
  assign perf_counter_1_wd = reg_wdata[47:0];
  assign perf_counter_1_re = addr_hit[5] & reg_re & !reg_error;

  assign cl_clint_set_we = addr_hit[6] & reg_we & !reg_error;
  assign cl_clint_set_wd = reg_wdata[31:0];

  assign cl_clint_clear_we = addr_hit[7] & reg_we & !reg_error;
  assign cl_clint_clear_wd = reg_wdata[31:0];

  assign hw_barrier_re = addr_hit[8] & reg_re & !reg_error;

  assign icache_prefetch_enable_we = addr_hit[9] & reg_we & !reg_error;
  assign icache_prefetch_enable_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = perf_counter_enable_0_cycle_0_qs;
        reg_rdata_next[1] = perf_counter_enable_0_tcdm_accessed_0_qs;
        reg_rdata_next[2] = perf_counter_enable_0_tcdm_congested_0_qs;
        reg_rdata_next[3] = perf_counter_enable_0_issue_fpu_0_qs;
        reg_rdata_next[4] = perf_counter_enable_0_issue_fpu_seq_0_qs;
        reg_rdata_next[5] = perf_counter_enable_0_issue_core_to_fpu_0_qs;
        reg_rdata_next[6] = perf_counter_enable_0_dma_aw_stall_0_qs;
        reg_rdata_next[7] = perf_counter_enable_0_dma_ar_stall_0_qs;
        reg_rdata_next[8] = perf_counter_enable_0_dma_r_stall_0_qs;
        reg_rdata_next[9] = perf_counter_enable_0_dma_w_stall_0_qs;
        reg_rdata_next[10] = perf_counter_enable_0_dma_buf_w_stall_0_qs;
        reg_rdata_next[11] = perf_counter_enable_0_dma_buf_r_stall_0_qs;
        reg_rdata_next[12] = perf_counter_enable_0_dma_aw_done_0_qs;
        reg_rdata_next[13] = perf_counter_enable_0_dma_aw_bw_0_qs;
        reg_rdata_next[14] = perf_counter_enable_0_dma_ar_done_0_qs;
        reg_rdata_next[15] = perf_counter_enable_0_dma_ar_bw_0_qs;
        reg_rdata_next[16] = perf_counter_enable_0_dma_r_done_0_qs;
        reg_rdata_next[17] = perf_counter_enable_0_dma_r_bw_0_qs;
        reg_rdata_next[18] = perf_counter_enable_0_dma_w_done_0_qs;
        reg_rdata_next[19] = perf_counter_enable_0_dma_w_bw_0_qs;
        reg_rdata_next[20] = perf_counter_enable_0_dma_b_done_0_qs;
        reg_rdata_next[21] = perf_counter_enable_0_dma_busy_0_qs;
        reg_rdata_next[22] = perf_counter_enable_0_icache_miss_0_qs;
        reg_rdata_next[23] = perf_counter_enable_0_icache_hit_0_qs;
        reg_rdata_next[24] = perf_counter_enable_0_icache_prefetch_0_qs;
        reg_rdata_next[25] = perf_counter_enable_0_icache_double_hit_0_qs;
        reg_rdata_next[26] = perf_counter_enable_0_icache_stall_0_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = perf_counter_enable_1_cycle_1_qs;
        reg_rdata_next[1] = perf_counter_enable_1_tcdm_accessed_1_qs;
        reg_rdata_next[2] = perf_counter_enable_1_tcdm_congested_1_qs;
        reg_rdata_next[3] = perf_counter_enable_1_issue_fpu_1_qs;
        reg_rdata_next[4] = perf_counter_enable_1_issue_fpu_seq_1_qs;
        reg_rdata_next[5] = perf_counter_enable_1_issue_core_to_fpu_1_qs;
        reg_rdata_next[6] = perf_counter_enable_1_dma_aw_stall_1_qs;
        reg_rdata_next[7] = perf_counter_enable_1_dma_ar_stall_1_qs;
        reg_rdata_next[8] = perf_counter_enable_1_dma_r_stall_1_qs;
        reg_rdata_next[9] = perf_counter_enable_1_dma_w_stall_1_qs;
        reg_rdata_next[10] = perf_counter_enable_1_dma_buf_w_stall_1_qs;
        reg_rdata_next[11] = perf_counter_enable_1_dma_buf_r_stall_1_qs;
        reg_rdata_next[12] = perf_counter_enable_1_dma_aw_done_1_qs;
        reg_rdata_next[13] = perf_counter_enable_1_dma_aw_bw_1_qs;
        reg_rdata_next[14] = perf_counter_enable_1_dma_ar_done_1_qs;
        reg_rdata_next[15] = perf_counter_enable_1_dma_ar_bw_1_qs;
        reg_rdata_next[16] = perf_counter_enable_1_dma_r_done_1_qs;
        reg_rdata_next[17] = perf_counter_enable_1_dma_r_bw_1_qs;
        reg_rdata_next[18] = perf_counter_enable_1_dma_w_done_1_qs;
        reg_rdata_next[19] = perf_counter_enable_1_dma_w_bw_1_qs;
        reg_rdata_next[20] = perf_counter_enable_1_dma_b_done_1_qs;
        reg_rdata_next[21] = perf_counter_enable_1_dma_busy_1_qs;
        reg_rdata_next[22] = perf_counter_enable_1_icache_miss_1_qs;
        reg_rdata_next[23] = perf_counter_enable_1_icache_hit_1_qs;
        reg_rdata_next[24] = perf_counter_enable_1_icache_prefetch_1_qs;
        reg_rdata_next[25] = perf_counter_enable_1_icache_double_hit_1_qs;
        reg_rdata_next[26] = perf_counter_enable_1_icache_stall_1_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[9:0] = hart_select_0_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[9:0] = hart_select_1_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[47:0] = perf_counter_0_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[47:0] = perf_counter_1_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = hw_barrier_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = '0;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
