// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module occamy_soc_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 8
) (
    input logic clk_i,
    input logic rst_ni,
    input reg_req_t reg_req_i,
    output reg_rsp_t reg_rsp_o,
    // To HW
    output occamy_soc_reg_pkg::occamy_soc_reg2hw_t reg2hw,  // Write
    input occamy_soc_reg_pkg::occamy_soc_hw2reg_t hw2reg,  // Read


    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);

  import occamy_soc_reg_pkg::*;

  localparam int DW = 32;
  localparam int DBW = DW / 8;  // Byte Width

  // register signals
  logic               reg_we;
  logic               reg_re;
  logic [BlockAw-1:0] reg_addr;
  logic [     DW-1:0] reg_wdata;
  logic [    DBW-1:0] reg_be;
  logic [     DW-1:0] reg_rdata;
  logic               reg_error;

  logic addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_ecc_narrow_uncorrectable_qs;
  logic intr_state_ecc_narrow_uncorrectable_wd;
  logic intr_state_ecc_narrow_uncorrectable_we;
  logic intr_state_ecc_narrow_correctable_qs;
  logic intr_state_ecc_narrow_correctable_wd;
  logic intr_state_ecc_narrow_correctable_we;
  logic intr_state_ecc_wide_uncorrectable_qs;
  logic intr_state_ecc_wide_uncorrectable_wd;
  logic intr_state_ecc_wide_uncorrectable_we;
  logic intr_state_ecc_wide_correctable_qs;
  logic intr_state_ecc_wide_correctable_wd;
  logic intr_state_ecc_wide_correctable_we;
  logic intr_enable_ecc_narrow_uncorrectable_qs;
  logic intr_enable_ecc_narrow_uncorrectable_wd;
  logic intr_enable_ecc_narrow_uncorrectable_we;
  logic intr_enable_ecc_narrow_correctable_qs;
  logic intr_enable_ecc_narrow_correctable_wd;
  logic intr_enable_ecc_narrow_correctable_we;
  logic intr_enable_ecc_wide_uncorrectable_qs;
  logic intr_enable_ecc_wide_uncorrectable_wd;
  logic intr_enable_ecc_wide_uncorrectable_we;
  logic intr_enable_ecc_wide_correctable_qs;
  logic intr_enable_ecc_wide_correctable_wd;
  logic intr_enable_ecc_wide_correctable_we;
  logic intr_test_ecc_narrow_uncorrectable_wd;
  logic intr_test_ecc_narrow_uncorrectable_we;
  logic intr_test_ecc_narrow_correctable_wd;
  logic intr_test_ecc_narrow_correctable_we;
  logic intr_test_ecc_wide_uncorrectable_wd;
  logic intr_test_ecc_wide_uncorrectable_we;
  logic intr_test_ecc_wide_correctable_wd;
  logic intr_test_ecc_wide_correctable_we;
  logic [15:0] version_qs;
  logic [1:0] chip_id_qs;
  logic chip_id_re;
  logic [31:0] scratch_0_qs;
  logic [31:0] scratch_0_wd;
  logic scratch_0_we;
  logic [31:0] scratch_1_qs;
  logic [31:0] scratch_1_wd;
  logic scratch_1_we;
  logic [31:0] scratch_2_qs;
  logic [31:0] scratch_2_wd;
  logic scratch_2_we;
  logic [31:0] scratch_3_qs;
  logic [31:0] scratch_3_wd;
  logic scratch_3_we;
  logic [1:0] boot_mode_qs;
  logic boot_mode_re;
  logic [31:0] num_quadrants_qs;
  logic num_quadrants_re;
  logic pad_0_slw_0_qs;
  logic pad_0_slw_0_wd;
  logic pad_0_slw_0_we;
  logic pad_0_smt_0_qs;
  logic pad_0_smt_0_wd;
  logic pad_0_smt_0_we;
  logic [1:0] pad_0_drv_0_qs;
  logic [1:0] pad_0_drv_0_wd;
  logic pad_0_drv_0_we;
  logic pad_1_slw_1_qs;
  logic pad_1_slw_1_wd;
  logic pad_1_slw_1_we;
  logic pad_1_smt_1_qs;
  logic pad_1_smt_1_wd;
  logic pad_1_smt_1_we;
  logic [1:0] pad_1_drv_1_qs;
  logic [1:0] pad_1_drv_1_wd;
  logic pad_1_drv_1_we;
  logic pad_2_slw_2_qs;
  logic pad_2_slw_2_wd;
  logic pad_2_slw_2_we;
  logic pad_2_smt_2_qs;
  logic pad_2_smt_2_wd;
  logic pad_2_smt_2_we;
  logic [1:0] pad_2_drv_2_qs;
  logic [1:0] pad_2_drv_2_wd;
  logic pad_2_drv_2_we;
  logic pad_3_slw_3_qs;
  logic pad_3_slw_3_wd;
  logic pad_3_slw_3_we;
  logic pad_3_smt_3_qs;
  logic pad_3_smt_3_wd;
  logic pad_3_smt_3_we;
  logic [1:0] pad_3_drv_3_qs;
  logic [1:0] pad_3_drv_3_wd;
  logic pad_3_drv_3_we;
  logic pad_4_slw_4_qs;
  logic pad_4_slw_4_wd;
  logic pad_4_slw_4_we;
  logic pad_4_smt_4_qs;
  logic pad_4_smt_4_wd;
  logic pad_4_smt_4_we;
  logic [1:0] pad_4_drv_4_qs;
  logic [1:0] pad_4_drv_4_wd;
  logic pad_4_drv_4_we;
  logic pad_5_slw_5_qs;
  logic pad_5_slw_5_wd;
  logic pad_5_slw_5_we;
  logic pad_5_smt_5_qs;
  logic pad_5_smt_5_wd;
  logic pad_5_smt_5_we;
  logic [1:0] pad_5_drv_5_qs;
  logic [1:0] pad_5_drv_5_wd;
  logic pad_5_drv_5_we;
  logic pad_6_slw_6_qs;
  logic pad_6_slw_6_wd;
  logic pad_6_slw_6_we;
  logic pad_6_smt_6_qs;
  logic pad_6_smt_6_wd;
  logic pad_6_smt_6_we;
  logic [1:0] pad_6_drv_6_qs;
  logic [1:0] pad_6_drv_6_wd;
  logic pad_6_drv_6_we;
  logic pad_7_slw_7_qs;
  logic pad_7_slw_7_wd;
  logic pad_7_slw_7_we;
  logic pad_7_smt_7_qs;
  logic pad_7_smt_7_wd;
  logic pad_7_smt_7_we;
  logic [1:0] pad_7_drv_7_qs;
  logic [1:0] pad_7_drv_7_wd;
  logic pad_7_drv_7_we;
  logic pad_8_slw_8_qs;
  logic pad_8_slw_8_wd;
  logic pad_8_slw_8_we;
  logic pad_8_smt_8_qs;
  logic pad_8_smt_8_wd;
  logic pad_8_smt_8_we;
  logic [1:0] pad_8_drv_8_qs;
  logic [1:0] pad_8_drv_8_wd;
  logic pad_8_drv_8_we;
  logic pad_9_slw_9_qs;
  logic pad_9_slw_9_wd;
  logic pad_9_slw_9_we;
  logic pad_9_smt_9_qs;
  logic pad_9_smt_9_wd;
  logic pad_9_smt_9_we;
  logic [1:0] pad_9_drv_9_qs;
  logic [1:0] pad_9_drv_9_wd;
  logic pad_9_drv_9_we;
  logic pad_10_slw_10_qs;
  logic pad_10_slw_10_wd;
  logic pad_10_slw_10_we;
  logic pad_10_smt_10_qs;
  logic pad_10_smt_10_wd;
  logic pad_10_smt_10_we;
  logic [1:0] pad_10_drv_10_qs;
  logic [1:0] pad_10_drv_10_wd;
  logic pad_10_drv_10_we;
  logic pad_11_slw_11_qs;
  logic pad_11_slw_11_wd;
  logic pad_11_slw_11_we;
  logic pad_11_smt_11_qs;
  logic pad_11_smt_11_wd;
  logic pad_11_smt_11_we;
  logic [1:0] pad_11_drv_11_qs;
  logic [1:0] pad_11_drv_11_wd;
  logic pad_11_drv_11_we;
  logic pad_12_slw_12_qs;
  logic pad_12_slw_12_wd;
  logic pad_12_slw_12_we;
  logic pad_12_smt_12_qs;
  logic pad_12_smt_12_wd;
  logic pad_12_smt_12_we;
  logic [1:0] pad_12_drv_12_qs;
  logic [1:0] pad_12_drv_12_wd;
  logic pad_12_drv_12_we;
  logic pad_13_slw_13_qs;
  logic pad_13_slw_13_wd;
  logic pad_13_slw_13_we;
  logic pad_13_smt_13_qs;
  logic pad_13_smt_13_wd;
  logic pad_13_smt_13_we;
  logic [1:0] pad_13_drv_13_qs;
  logic [1:0] pad_13_drv_13_wd;
  logic pad_13_drv_13_we;
  logic pad_14_slw_14_qs;
  logic pad_14_slw_14_wd;
  logic pad_14_slw_14_we;
  logic pad_14_smt_14_qs;
  logic pad_14_smt_14_wd;
  logic pad_14_smt_14_we;
  logic [1:0] pad_14_drv_14_qs;
  logic [1:0] pad_14_drv_14_wd;
  logic pad_14_drv_14_we;
  logic pad_15_slw_15_qs;
  logic pad_15_slw_15_wd;
  logic pad_15_slw_15_we;
  logic pad_15_smt_15_qs;
  logic pad_15_smt_15_wd;
  logic pad_15_smt_15_we;
  logic [1:0] pad_15_drv_15_qs;
  logic [1:0] pad_15_drv_15_wd;
  logic pad_15_drv_15_we;
  logic pad_16_slw_16_qs;
  logic pad_16_slw_16_wd;
  logic pad_16_slw_16_we;
  logic pad_16_smt_16_qs;
  logic pad_16_smt_16_wd;
  logic pad_16_smt_16_we;
  logic [1:0] pad_16_drv_16_qs;
  logic [1:0] pad_16_drv_16_wd;
  logic pad_16_drv_16_we;
  logic pad_17_slw_17_qs;
  logic pad_17_slw_17_wd;
  logic pad_17_slw_17_we;
  logic pad_17_smt_17_qs;
  logic pad_17_smt_17_wd;
  logic pad_17_smt_17_we;
  logic [1:0] pad_17_drv_17_qs;
  logic [1:0] pad_17_drv_17_wd;
  logic pad_17_drv_17_we;
  logic pad_18_slw_18_qs;
  logic pad_18_slw_18_wd;
  logic pad_18_slw_18_we;
  logic pad_18_smt_18_qs;
  logic pad_18_smt_18_wd;
  logic pad_18_smt_18_we;
  logic [1:0] pad_18_drv_18_qs;
  logic [1:0] pad_18_drv_18_wd;
  logic pad_18_drv_18_we;
  logic pad_19_slw_19_qs;
  logic pad_19_slw_19_wd;
  logic pad_19_slw_19_we;
  logic pad_19_smt_19_qs;
  logic pad_19_smt_19_wd;
  logic pad_19_smt_19_we;
  logic [1:0] pad_19_drv_19_qs;
  logic [1:0] pad_19_drv_19_wd;
  logic pad_19_drv_19_we;
  logic pad_20_slw_20_qs;
  logic pad_20_slw_20_wd;
  logic pad_20_slw_20_we;
  logic pad_20_smt_20_qs;
  logic pad_20_smt_20_wd;
  logic pad_20_smt_20_we;
  logic [1:0] pad_20_drv_20_qs;
  logic [1:0] pad_20_drv_20_wd;
  logic pad_20_drv_20_we;
  logic pad_21_slw_21_qs;
  logic pad_21_slw_21_wd;
  logic pad_21_slw_21_we;
  logic pad_21_smt_21_qs;
  logic pad_21_smt_21_wd;
  logic pad_21_smt_21_we;
  logic [1:0] pad_21_drv_21_qs;
  logic [1:0] pad_21_drv_21_wd;
  logic pad_21_drv_21_we;
  logic pad_22_slw_22_qs;
  logic pad_22_slw_22_wd;
  logic pad_22_slw_22_we;
  logic pad_22_smt_22_qs;
  logic pad_22_smt_22_wd;
  logic pad_22_smt_22_we;
  logic [1:0] pad_22_drv_22_qs;
  logic [1:0] pad_22_drv_22_wd;
  logic pad_22_drv_22_we;
  logic pad_23_slw_23_qs;
  logic pad_23_slw_23_wd;
  logic pad_23_slw_23_we;
  logic pad_23_smt_23_qs;
  logic pad_23_smt_23_wd;
  logic pad_23_smt_23_we;
  logic [1:0] pad_23_drv_23_qs;
  logic [1:0] pad_23_drv_23_wd;
  logic pad_23_drv_23_we;
  logic pad_24_slw_24_qs;
  logic pad_24_slw_24_wd;
  logic pad_24_slw_24_we;
  logic pad_24_smt_24_qs;
  logic pad_24_smt_24_wd;
  logic pad_24_smt_24_we;
  logic [1:0] pad_24_drv_24_qs;
  logic [1:0] pad_24_drv_24_wd;
  logic pad_24_drv_24_we;
  logic pad_25_slw_25_qs;
  logic pad_25_slw_25_wd;
  logic pad_25_slw_25_we;
  logic pad_25_smt_25_qs;
  logic pad_25_smt_25_wd;
  logic pad_25_smt_25_we;
  logic [1:0] pad_25_drv_25_qs;
  logic [1:0] pad_25_drv_25_wd;
  logic pad_25_drv_25_we;
  logic pad_26_slw_26_qs;
  logic pad_26_slw_26_wd;
  logic pad_26_slw_26_we;
  logic pad_26_smt_26_qs;
  logic pad_26_smt_26_wd;
  logic pad_26_smt_26_we;
  logic [1:0] pad_26_drv_26_qs;
  logic [1:0] pad_26_drv_26_wd;
  logic pad_26_drv_26_we;
  logic pad_27_slw_27_qs;
  logic pad_27_slw_27_wd;
  logic pad_27_slw_27_we;
  logic pad_27_smt_27_qs;
  logic pad_27_smt_27_wd;
  logic pad_27_smt_27_we;
  logic [1:0] pad_27_drv_27_qs;
  logic [1:0] pad_27_drv_27_wd;
  logic pad_27_drv_27_we;
  logic pad_28_slw_28_qs;
  logic pad_28_slw_28_wd;
  logic pad_28_slw_28_we;
  logic pad_28_smt_28_qs;
  logic pad_28_smt_28_wd;
  logic pad_28_smt_28_we;
  logic [1:0] pad_28_drv_28_qs;
  logic [1:0] pad_28_drv_28_wd;
  logic pad_28_drv_28_we;
  logic pad_29_slw_29_qs;
  logic pad_29_slw_29_wd;
  logic pad_29_slw_29_we;
  logic pad_29_smt_29_qs;
  logic pad_29_smt_29_wd;
  logic pad_29_smt_29_we;
  logic [1:0] pad_29_drv_29_qs;
  logic [1:0] pad_29_drv_29_wd;
  logic pad_29_drv_29_we;
  logic pad_30_slw_30_qs;
  logic pad_30_slw_30_wd;
  logic pad_30_slw_30_we;
  logic pad_30_smt_30_qs;
  logic pad_30_smt_30_wd;
  logic pad_30_smt_30_we;
  logic [1:0] pad_30_drv_30_qs;
  logic [1:0] pad_30_drv_30_wd;
  logic pad_30_drv_30_we;

  // Register instances
  // R[intr_state]: V(False)

  //   F[ecc_narrow_uncorrectable]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("W1C"),
      .RESVAL  (1'h0)
  ) u_intr_state_ecc_narrow_uncorrectable (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(intr_state_ecc_narrow_uncorrectable_we),
      .wd(intr_state_ecc_narrow_uncorrectable_wd),

      // from internal hardware
      .de(hw2reg.intr_state.ecc_narrow_uncorrectable.de),
      .d (hw2reg.intr_state.ecc_narrow_uncorrectable.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.intr_state.ecc_narrow_uncorrectable.q),

      // to register interface (read)
      .qs(intr_state_ecc_narrow_uncorrectable_qs)
  );


  //   F[ecc_narrow_correctable]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("W1C"),
      .RESVAL  (1'h0)
  ) u_intr_state_ecc_narrow_correctable (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(intr_state_ecc_narrow_correctable_we),
      .wd(intr_state_ecc_narrow_correctable_wd),

      // from internal hardware
      .de(hw2reg.intr_state.ecc_narrow_correctable.de),
      .d (hw2reg.intr_state.ecc_narrow_correctable.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.intr_state.ecc_narrow_correctable.q),

      // to register interface (read)
      .qs(intr_state_ecc_narrow_correctable_qs)
  );


  //   F[ecc_wide_uncorrectable]: 2:2
  prim_subreg #(
      .DW      (1),
      .SWACCESS("W1C"),
      .RESVAL  (1'h0)
  ) u_intr_state_ecc_wide_uncorrectable (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(intr_state_ecc_wide_uncorrectable_we),
      .wd(intr_state_ecc_wide_uncorrectable_wd),

      // from internal hardware
      .de(hw2reg.intr_state.ecc_wide_uncorrectable.de),
      .d (hw2reg.intr_state.ecc_wide_uncorrectable.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.intr_state.ecc_wide_uncorrectable.q),

      // to register interface (read)
      .qs(intr_state_ecc_wide_uncorrectable_qs)
  );


  //   F[ecc_wide_correctable]: 3:3
  prim_subreg #(
      .DW      (1),
      .SWACCESS("W1C"),
      .RESVAL  (1'h0)
  ) u_intr_state_ecc_wide_correctable (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(intr_state_ecc_wide_correctable_we),
      .wd(intr_state_ecc_wide_correctable_wd),

      // from internal hardware
      .de(hw2reg.intr_state.ecc_wide_correctable.de),
      .d (hw2reg.intr_state.ecc_wide_correctable.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.intr_state.ecc_wide_correctable.q),

      // to register interface (read)
      .qs(intr_state_ecc_wide_correctable_qs)
  );


  // R[intr_enable]: V(False)

  //   F[ecc_narrow_uncorrectable]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_intr_enable_ecc_narrow_uncorrectable (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(intr_enable_ecc_narrow_uncorrectable_we),
      .wd(intr_enable_ecc_narrow_uncorrectable_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.intr_enable.ecc_narrow_uncorrectable.q),

      // to register interface (read)
      .qs(intr_enable_ecc_narrow_uncorrectable_qs)
  );


  //   F[ecc_narrow_correctable]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_intr_enable_ecc_narrow_correctable (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(intr_enable_ecc_narrow_correctable_we),
      .wd(intr_enable_ecc_narrow_correctable_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.intr_enable.ecc_narrow_correctable.q),

      // to register interface (read)
      .qs(intr_enable_ecc_narrow_correctable_qs)
  );


  //   F[ecc_wide_uncorrectable]: 2:2
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_intr_enable_ecc_wide_uncorrectable (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(intr_enable_ecc_wide_uncorrectable_we),
      .wd(intr_enable_ecc_wide_uncorrectable_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.intr_enable.ecc_wide_uncorrectable.q),

      // to register interface (read)
      .qs(intr_enable_ecc_wide_uncorrectable_qs)
  );


  //   F[ecc_wide_correctable]: 3:3
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_intr_enable_ecc_wide_correctable (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(intr_enable_ecc_wide_correctable_we),
      .wd(intr_enable_ecc_wide_correctable_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.intr_enable.ecc_wide_correctable.q),

      // to register interface (read)
      .qs(intr_enable_ecc_wide_correctable_qs)
  );


  // R[intr_test]: V(True)

  //   F[ecc_narrow_uncorrectable]: 0:0
  prim_subreg_ext #(
      .DW(1)
  ) u_intr_test_ecc_narrow_uncorrectable (
      .re (1'b0),
      .we (intr_test_ecc_narrow_uncorrectable_we),
      .wd (intr_test_ecc_narrow_uncorrectable_wd),
      .d  ('0),
      .qre(),
      .qe (reg2hw.intr_test.ecc_narrow_uncorrectable.qe),
      .q  (reg2hw.intr_test.ecc_narrow_uncorrectable.q),
      .qs ()
  );


  //   F[ecc_narrow_correctable]: 1:1
  prim_subreg_ext #(
      .DW(1)
  ) u_intr_test_ecc_narrow_correctable (
      .re (1'b0),
      .we (intr_test_ecc_narrow_correctable_we),
      .wd (intr_test_ecc_narrow_correctable_wd),
      .d  ('0),
      .qre(),
      .qe (reg2hw.intr_test.ecc_narrow_correctable.qe),
      .q  (reg2hw.intr_test.ecc_narrow_correctable.q),
      .qs ()
  );


  //   F[ecc_wide_uncorrectable]: 2:2
  prim_subreg_ext #(
      .DW(1)
  ) u_intr_test_ecc_wide_uncorrectable (
      .re (1'b0),
      .we (intr_test_ecc_wide_uncorrectable_we),
      .wd (intr_test_ecc_wide_uncorrectable_wd),
      .d  ('0),
      .qre(),
      .qe (reg2hw.intr_test.ecc_wide_uncorrectable.qe),
      .q  (reg2hw.intr_test.ecc_wide_uncorrectable.q),
      .qs ()
  );


  //   F[ecc_wide_correctable]: 3:3
  prim_subreg_ext #(
      .DW(1)
  ) u_intr_test_ecc_wide_correctable (
      .re (1'b0),
      .we (intr_test_ecc_wide_correctable_we),
      .wd (intr_test_ecc_wide_correctable_wd),
      .d  ('0),
      .qre(),
      .qe (reg2hw.intr_test.ecc_wide_correctable.qe),
      .q  (reg2hw.intr_test.ecc_wide_correctable.q),
      .qs ()
  );


  // R[version]: V(False)

  // constant-only read
  assign version_qs = 16'h1;


  // R[chip_id]: V(True)

  prim_subreg_ext #(
      .DW(2)
  ) u_chip_id (
      .re (chip_id_re),
      .we (1'b0),
      .wd ('0),
      .d  (hw2reg.chip_id.d),
      .qre(),
      .qe (),
      .q  (),
      .qs (chip_id_qs)
  );



  // Subregister 0 of Multireg scratch
  // R[scratch_0]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_scratch_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(scratch_0_we),
      .wd(scratch_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(scratch_0_qs)
  );

  // Subregister 1 of Multireg scratch
  // R[scratch_1]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_scratch_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(scratch_1_we),
      .wd(scratch_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(scratch_1_qs)
  );

  // Subregister 2 of Multireg scratch
  // R[scratch_2]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_scratch_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(scratch_2_we),
      .wd(scratch_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(scratch_2_qs)
  );

  // Subregister 3 of Multireg scratch
  // R[scratch_3]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_scratch_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(scratch_3_we),
      .wd(scratch_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(scratch_3_qs)
  );


  // R[boot_mode]: V(True)

  prim_subreg_ext #(
      .DW(2)
  ) u_boot_mode (
      .re (boot_mode_re),
      .we (1'b0),
      .wd ('0),
      .d  (hw2reg.boot_mode.d),
      .qre(),
      .qe (),
      .q  (),
      .qs (boot_mode_qs)
  );


  // R[num_quadrants]: V(True)

  prim_subreg_ext #(
      .DW(32)
  ) u_num_quadrants (
      .re (num_quadrants_re),
      .we (1'b0),
      .wd ('0),
      .d  ('0),
      .qre(),
      .qe (),
      .q  (),
      .qs (num_quadrants_qs)
  );



  // Subregister 0 of Multireg pad
  // R[pad_0]: V(False)

  // F[slw_0]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_0_slw_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_0_slw_0_we),
      .wd(pad_0_slw_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[0].slw.q),

      // to register interface (read)
      .qs(pad_0_slw_0_qs)
  );


  // F[smt_0]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_0_smt_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_0_smt_0_we),
      .wd(pad_0_smt_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[0].smt.q),

      // to register interface (read)
      .qs(pad_0_smt_0_qs)
  );


  // F[drv_0]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_0_drv_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_0_drv_0_we),
      .wd(pad_0_drv_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[0].drv.q),

      // to register interface (read)
      .qs(pad_0_drv_0_qs)
  );


  // Subregister 1 of Multireg pad
  // R[pad_1]: V(False)

  // F[slw_1]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_1_slw_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_1_slw_1_we),
      .wd(pad_1_slw_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[1].slw.q),

      // to register interface (read)
      .qs(pad_1_slw_1_qs)
  );


  // F[smt_1]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_1_smt_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_1_smt_1_we),
      .wd(pad_1_smt_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[1].smt.q),

      // to register interface (read)
      .qs(pad_1_smt_1_qs)
  );


  // F[drv_1]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_1_drv_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_1_drv_1_we),
      .wd(pad_1_drv_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[1].drv.q),

      // to register interface (read)
      .qs(pad_1_drv_1_qs)
  );


  // Subregister 2 of Multireg pad
  // R[pad_2]: V(False)

  // F[slw_2]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_2_slw_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_2_slw_2_we),
      .wd(pad_2_slw_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[2].slw.q),

      // to register interface (read)
      .qs(pad_2_slw_2_qs)
  );


  // F[smt_2]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_2_smt_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_2_smt_2_we),
      .wd(pad_2_smt_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[2].smt.q),

      // to register interface (read)
      .qs(pad_2_smt_2_qs)
  );


  // F[drv_2]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_2_drv_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_2_drv_2_we),
      .wd(pad_2_drv_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[2].drv.q),

      // to register interface (read)
      .qs(pad_2_drv_2_qs)
  );


  // Subregister 3 of Multireg pad
  // R[pad_3]: V(False)

  // F[slw_3]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_3_slw_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_3_slw_3_we),
      .wd(pad_3_slw_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[3].slw.q),

      // to register interface (read)
      .qs(pad_3_slw_3_qs)
  );


  // F[smt_3]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_3_smt_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_3_smt_3_we),
      .wd(pad_3_smt_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[3].smt.q),

      // to register interface (read)
      .qs(pad_3_smt_3_qs)
  );


  // F[drv_3]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_3_drv_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_3_drv_3_we),
      .wd(pad_3_drv_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[3].drv.q),

      // to register interface (read)
      .qs(pad_3_drv_3_qs)
  );


  // Subregister 4 of Multireg pad
  // R[pad_4]: V(False)

  // F[slw_4]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_4_slw_4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_4_slw_4_we),
      .wd(pad_4_slw_4_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[4].slw.q),

      // to register interface (read)
      .qs(pad_4_slw_4_qs)
  );


  // F[smt_4]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_4_smt_4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_4_smt_4_we),
      .wd(pad_4_smt_4_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[4].smt.q),

      // to register interface (read)
      .qs(pad_4_smt_4_qs)
  );


  // F[drv_4]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_4_drv_4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_4_drv_4_we),
      .wd(pad_4_drv_4_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[4].drv.q),

      // to register interface (read)
      .qs(pad_4_drv_4_qs)
  );


  // Subregister 5 of Multireg pad
  // R[pad_5]: V(False)

  // F[slw_5]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_5_slw_5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_5_slw_5_we),
      .wd(pad_5_slw_5_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[5].slw.q),

      // to register interface (read)
      .qs(pad_5_slw_5_qs)
  );


  // F[smt_5]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_5_smt_5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_5_smt_5_we),
      .wd(pad_5_smt_5_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[5].smt.q),

      // to register interface (read)
      .qs(pad_5_smt_5_qs)
  );


  // F[drv_5]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_5_drv_5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_5_drv_5_we),
      .wd(pad_5_drv_5_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[5].drv.q),

      // to register interface (read)
      .qs(pad_5_drv_5_qs)
  );


  // Subregister 6 of Multireg pad
  // R[pad_6]: V(False)

  // F[slw_6]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_6_slw_6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_6_slw_6_we),
      .wd(pad_6_slw_6_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[6].slw.q),

      // to register interface (read)
      .qs(pad_6_slw_6_qs)
  );


  // F[smt_6]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_6_smt_6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_6_smt_6_we),
      .wd(pad_6_smt_6_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[6].smt.q),

      // to register interface (read)
      .qs(pad_6_smt_6_qs)
  );


  // F[drv_6]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_6_drv_6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_6_drv_6_we),
      .wd(pad_6_drv_6_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[6].drv.q),

      // to register interface (read)
      .qs(pad_6_drv_6_qs)
  );


  // Subregister 7 of Multireg pad
  // R[pad_7]: V(False)

  // F[slw_7]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_7_slw_7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_7_slw_7_we),
      .wd(pad_7_slw_7_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[7].slw.q),

      // to register interface (read)
      .qs(pad_7_slw_7_qs)
  );


  // F[smt_7]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_7_smt_7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_7_smt_7_we),
      .wd(pad_7_smt_7_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[7].smt.q),

      // to register interface (read)
      .qs(pad_7_smt_7_qs)
  );


  // F[drv_7]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_7_drv_7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_7_drv_7_we),
      .wd(pad_7_drv_7_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[7].drv.q),

      // to register interface (read)
      .qs(pad_7_drv_7_qs)
  );


  // Subregister 8 of Multireg pad
  // R[pad_8]: V(False)

  // F[slw_8]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_8_slw_8 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_8_slw_8_we),
      .wd(pad_8_slw_8_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[8].slw.q),

      // to register interface (read)
      .qs(pad_8_slw_8_qs)
  );


  // F[smt_8]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_8_smt_8 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_8_smt_8_we),
      .wd(pad_8_smt_8_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[8].smt.q),

      // to register interface (read)
      .qs(pad_8_smt_8_qs)
  );


  // F[drv_8]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_8_drv_8 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_8_drv_8_we),
      .wd(pad_8_drv_8_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[8].drv.q),

      // to register interface (read)
      .qs(pad_8_drv_8_qs)
  );


  // Subregister 9 of Multireg pad
  // R[pad_9]: V(False)

  // F[slw_9]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_9_slw_9 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_9_slw_9_we),
      .wd(pad_9_slw_9_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[9].slw.q),

      // to register interface (read)
      .qs(pad_9_slw_9_qs)
  );


  // F[smt_9]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_9_smt_9 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_9_smt_9_we),
      .wd(pad_9_smt_9_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[9].smt.q),

      // to register interface (read)
      .qs(pad_9_smt_9_qs)
  );


  // F[drv_9]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_9_drv_9 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_9_drv_9_we),
      .wd(pad_9_drv_9_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[9].drv.q),

      // to register interface (read)
      .qs(pad_9_drv_9_qs)
  );


  // Subregister 10 of Multireg pad
  // R[pad_10]: V(False)

  // F[slw_10]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_10_slw_10 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_10_slw_10_we),
      .wd(pad_10_slw_10_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[10].slw.q),

      // to register interface (read)
      .qs(pad_10_slw_10_qs)
  );


  // F[smt_10]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_10_smt_10 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_10_smt_10_we),
      .wd(pad_10_smt_10_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[10].smt.q),

      // to register interface (read)
      .qs(pad_10_smt_10_qs)
  );


  // F[drv_10]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_10_drv_10 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_10_drv_10_we),
      .wd(pad_10_drv_10_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[10].drv.q),

      // to register interface (read)
      .qs(pad_10_drv_10_qs)
  );


  // Subregister 11 of Multireg pad
  // R[pad_11]: V(False)

  // F[slw_11]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_11_slw_11 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_11_slw_11_we),
      .wd(pad_11_slw_11_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[11].slw.q),

      // to register interface (read)
      .qs(pad_11_slw_11_qs)
  );


  // F[smt_11]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_11_smt_11 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_11_smt_11_we),
      .wd(pad_11_smt_11_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[11].smt.q),

      // to register interface (read)
      .qs(pad_11_smt_11_qs)
  );


  // F[drv_11]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_11_drv_11 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_11_drv_11_we),
      .wd(pad_11_drv_11_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[11].drv.q),

      // to register interface (read)
      .qs(pad_11_drv_11_qs)
  );


  // Subregister 12 of Multireg pad
  // R[pad_12]: V(False)

  // F[slw_12]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_12_slw_12 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_12_slw_12_we),
      .wd(pad_12_slw_12_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[12].slw.q),

      // to register interface (read)
      .qs(pad_12_slw_12_qs)
  );


  // F[smt_12]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_12_smt_12 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_12_smt_12_we),
      .wd(pad_12_smt_12_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[12].smt.q),

      // to register interface (read)
      .qs(pad_12_smt_12_qs)
  );


  // F[drv_12]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_12_drv_12 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_12_drv_12_we),
      .wd(pad_12_drv_12_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[12].drv.q),

      // to register interface (read)
      .qs(pad_12_drv_12_qs)
  );


  // Subregister 13 of Multireg pad
  // R[pad_13]: V(False)

  // F[slw_13]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_13_slw_13 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_13_slw_13_we),
      .wd(pad_13_slw_13_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[13].slw.q),

      // to register interface (read)
      .qs(pad_13_slw_13_qs)
  );


  // F[smt_13]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_13_smt_13 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_13_smt_13_we),
      .wd(pad_13_smt_13_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[13].smt.q),

      // to register interface (read)
      .qs(pad_13_smt_13_qs)
  );


  // F[drv_13]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_13_drv_13 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_13_drv_13_we),
      .wd(pad_13_drv_13_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[13].drv.q),

      // to register interface (read)
      .qs(pad_13_drv_13_qs)
  );


  // Subregister 14 of Multireg pad
  // R[pad_14]: V(False)

  // F[slw_14]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_14_slw_14 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_14_slw_14_we),
      .wd(pad_14_slw_14_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[14].slw.q),

      // to register interface (read)
      .qs(pad_14_slw_14_qs)
  );


  // F[smt_14]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_14_smt_14 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_14_smt_14_we),
      .wd(pad_14_smt_14_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[14].smt.q),

      // to register interface (read)
      .qs(pad_14_smt_14_qs)
  );


  // F[drv_14]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_14_drv_14 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_14_drv_14_we),
      .wd(pad_14_drv_14_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[14].drv.q),

      // to register interface (read)
      .qs(pad_14_drv_14_qs)
  );


  // Subregister 15 of Multireg pad
  // R[pad_15]: V(False)

  // F[slw_15]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_15_slw_15 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_15_slw_15_we),
      .wd(pad_15_slw_15_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[15].slw.q),

      // to register interface (read)
      .qs(pad_15_slw_15_qs)
  );


  // F[smt_15]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_15_smt_15 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_15_smt_15_we),
      .wd(pad_15_smt_15_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[15].smt.q),

      // to register interface (read)
      .qs(pad_15_smt_15_qs)
  );


  // F[drv_15]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_15_drv_15 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_15_drv_15_we),
      .wd(pad_15_drv_15_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[15].drv.q),

      // to register interface (read)
      .qs(pad_15_drv_15_qs)
  );


  // Subregister 16 of Multireg pad
  // R[pad_16]: V(False)

  // F[slw_16]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_16_slw_16 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_16_slw_16_we),
      .wd(pad_16_slw_16_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[16].slw.q),

      // to register interface (read)
      .qs(pad_16_slw_16_qs)
  );


  // F[smt_16]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_16_smt_16 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_16_smt_16_we),
      .wd(pad_16_smt_16_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[16].smt.q),

      // to register interface (read)
      .qs(pad_16_smt_16_qs)
  );


  // F[drv_16]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_16_drv_16 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_16_drv_16_we),
      .wd(pad_16_drv_16_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[16].drv.q),

      // to register interface (read)
      .qs(pad_16_drv_16_qs)
  );


  // Subregister 17 of Multireg pad
  // R[pad_17]: V(False)

  // F[slw_17]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_17_slw_17 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_17_slw_17_we),
      .wd(pad_17_slw_17_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[17].slw.q),

      // to register interface (read)
      .qs(pad_17_slw_17_qs)
  );


  // F[smt_17]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_17_smt_17 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_17_smt_17_we),
      .wd(pad_17_smt_17_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[17].smt.q),

      // to register interface (read)
      .qs(pad_17_smt_17_qs)
  );


  // F[drv_17]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_17_drv_17 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_17_drv_17_we),
      .wd(pad_17_drv_17_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[17].drv.q),

      // to register interface (read)
      .qs(pad_17_drv_17_qs)
  );


  // Subregister 18 of Multireg pad
  // R[pad_18]: V(False)

  // F[slw_18]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_18_slw_18 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_18_slw_18_we),
      .wd(pad_18_slw_18_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[18].slw.q),

      // to register interface (read)
      .qs(pad_18_slw_18_qs)
  );


  // F[smt_18]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_18_smt_18 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_18_smt_18_we),
      .wd(pad_18_smt_18_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[18].smt.q),

      // to register interface (read)
      .qs(pad_18_smt_18_qs)
  );


  // F[drv_18]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_18_drv_18 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_18_drv_18_we),
      .wd(pad_18_drv_18_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[18].drv.q),

      // to register interface (read)
      .qs(pad_18_drv_18_qs)
  );


  // Subregister 19 of Multireg pad
  // R[pad_19]: V(False)

  // F[slw_19]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_19_slw_19 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_19_slw_19_we),
      .wd(pad_19_slw_19_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[19].slw.q),

      // to register interface (read)
      .qs(pad_19_slw_19_qs)
  );


  // F[smt_19]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_19_smt_19 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_19_smt_19_we),
      .wd(pad_19_smt_19_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[19].smt.q),

      // to register interface (read)
      .qs(pad_19_smt_19_qs)
  );


  // F[drv_19]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_19_drv_19 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_19_drv_19_we),
      .wd(pad_19_drv_19_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[19].drv.q),

      // to register interface (read)
      .qs(pad_19_drv_19_qs)
  );


  // Subregister 20 of Multireg pad
  // R[pad_20]: V(False)

  // F[slw_20]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_20_slw_20 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_20_slw_20_we),
      .wd(pad_20_slw_20_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[20].slw.q),

      // to register interface (read)
      .qs(pad_20_slw_20_qs)
  );


  // F[smt_20]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_20_smt_20 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_20_smt_20_we),
      .wd(pad_20_smt_20_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[20].smt.q),

      // to register interface (read)
      .qs(pad_20_smt_20_qs)
  );


  // F[drv_20]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_20_drv_20 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_20_drv_20_we),
      .wd(pad_20_drv_20_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[20].drv.q),

      // to register interface (read)
      .qs(pad_20_drv_20_qs)
  );


  // Subregister 21 of Multireg pad
  // R[pad_21]: V(False)

  // F[slw_21]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_21_slw_21 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_21_slw_21_we),
      .wd(pad_21_slw_21_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[21].slw.q),

      // to register interface (read)
      .qs(pad_21_slw_21_qs)
  );


  // F[smt_21]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_21_smt_21 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_21_smt_21_we),
      .wd(pad_21_smt_21_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[21].smt.q),

      // to register interface (read)
      .qs(pad_21_smt_21_qs)
  );


  // F[drv_21]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_21_drv_21 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_21_drv_21_we),
      .wd(pad_21_drv_21_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[21].drv.q),

      // to register interface (read)
      .qs(pad_21_drv_21_qs)
  );


  // Subregister 22 of Multireg pad
  // R[pad_22]: V(False)

  // F[slw_22]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_22_slw_22 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_22_slw_22_we),
      .wd(pad_22_slw_22_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[22].slw.q),

      // to register interface (read)
      .qs(pad_22_slw_22_qs)
  );


  // F[smt_22]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_22_smt_22 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_22_smt_22_we),
      .wd(pad_22_smt_22_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[22].smt.q),

      // to register interface (read)
      .qs(pad_22_smt_22_qs)
  );


  // F[drv_22]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_22_drv_22 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_22_drv_22_we),
      .wd(pad_22_drv_22_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[22].drv.q),

      // to register interface (read)
      .qs(pad_22_drv_22_qs)
  );


  // Subregister 23 of Multireg pad
  // R[pad_23]: V(False)

  // F[slw_23]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_23_slw_23 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_23_slw_23_we),
      .wd(pad_23_slw_23_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[23].slw.q),

      // to register interface (read)
      .qs(pad_23_slw_23_qs)
  );


  // F[smt_23]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_23_smt_23 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_23_smt_23_we),
      .wd(pad_23_smt_23_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[23].smt.q),

      // to register interface (read)
      .qs(pad_23_smt_23_qs)
  );


  // F[drv_23]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_23_drv_23 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_23_drv_23_we),
      .wd(pad_23_drv_23_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[23].drv.q),

      // to register interface (read)
      .qs(pad_23_drv_23_qs)
  );


  // Subregister 24 of Multireg pad
  // R[pad_24]: V(False)

  // F[slw_24]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_24_slw_24 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_24_slw_24_we),
      .wd(pad_24_slw_24_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[24].slw.q),

      // to register interface (read)
      .qs(pad_24_slw_24_qs)
  );


  // F[smt_24]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_24_smt_24 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_24_smt_24_we),
      .wd(pad_24_smt_24_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[24].smt.q),

      // to register interface (read)
      .qs(pad_24_smt_24_qs)
  );


  // F[drv_24]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_24_drv_24 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_24_drv_24_we),
      .wd(pad_24_drv_24_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[24].drv.q),

      // to register interface (read)
      .qs(pad_24_drv_24_qs)
  );


  // Subregister 25 of Multireg pad
  // R[pad_25]: V(False)

  // F[slw_25]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_25_slw_25 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_25_slw_25_we),
      .wd(pad_25_slw_25_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[25].slw.q),

      // to register interface (read)
      .qs(pad_25_slw_25_qs)
  );


  // F[smt_25]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_25_smt_25 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_25_smt_25_we),
      .wd(pad_25_smt_25_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[25].smt.q),

      // to register interface (read)
      .qs(pad_25_smt_25_qs)
  );


  // F[drv_25]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_25_drv_25 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_25_drv_25_we),
      .wd(pad_25_drv_25_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[25].drv.q),

      // to register interface (read)
      .qs(pad_25_drv_25_qs)
  );


  // Subregister 26 of Multireg pad
  // R[pad_26]: V(False)

  // F[slw_26]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_26_slw_26 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_26_slw_26_we),
      .wd(pad_26_slw_26_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[26].slw.q),

      // to register interface (read)
      .qs(pad_26_slw_26_qs)
  );


  // F[smt_26]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_26_smt_26 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_26_smt_26_we),
      .wd(pad_26_smt_26_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[26].smt.q),

      // to register interface (read)
      .qs(pad_26_smt_26_qs)
  );


  // F[drv_26]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_26_drv_26 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_26_drv_26_we),
      .wd(pad_26_drv_26_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[26].drv.q),

      // to register interface (read)
      .qs(pad_26_drv_26_qs)
  );


  // Subregister 27 of Multireg pad
  // R[pad_27]: V(False)

  // F[slw_27]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_27_slw_27 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_27_slw_27_we),
      .wd(pad_27_slw_27_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[27].slw.q),

      // to register interface (read)
      .qs(pad_27_slw_27_qs)
  );


  // F[smt_27]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_27_smt_27 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_27_smt_27_we),
      .wd(pad_27_smt_27_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[27].smt.q),

      // to register interface (read)
      .qs(pad_27_smt_27_qs)
  );


  // F[drv_27]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_27_drv_27 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_27_drv_27_we),
      .wd(pad_27_drv_27_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[27].drv.q),

      // to register interface (read)
      .qs(pad_27_drv_27_qs)
  );


  // Subregister 28 of Multireg pad
  // R[pad_28]: V(False)

  // F[slw_28]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_28_slw_28 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_28_slw_28_we),
      .wd(pad_28_slw_28_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[28].slw.q),

      // to register interface (read)
      .qs(pad_28_slw_28_qs)
  );


  // F[smt_28]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_28_smt_28 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_28_smt_28_we),
      .wd(pad_28_smt_28_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[28].smt.q),

      // to register interface (read)
      .qs(pad_28_smt_28_qs)
  );


  // F[drv_28]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_28_drv_28 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_28_drv_28_we),
      .wd(pad_28_drv_28_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[28].drv.q),

      // to register interface (read)
      .qs(pad_28_drv_28_qs)
  );


  // Subregister 29 of Multireg pad
  // R[pad_29]: V(False)

  // F[slw_29]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_29_slw_29 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_29_slw_29_we),
      .wd(pad_29_slw_29_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[29].slw.q),

      // to register interface (read)
      .qs(pad_29_slw_29_qs)
  );


  // F[smt_29]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_29_smt_29 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_29_smt_29_we),
      .wd(pad_29_smt_29_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[29].smt.q),

      // to register interface (read)
      .qs(pad_29_smt_29_qs)
  );


  // F[drv_29]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_29_drv_29 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_29_drv_29_we),
      .wd(pad_29_drv_29_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[29].drv.q),

      // to register interface (read)
      .qs(pad_29_drv_29_qs)
  );


  // Subregister 30 of Multireg pad
  // R[pad_30]: V(False)

  // F[slw_30]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_30_slw_30 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_30_slw_30_we),
      .wd(pad_30_slw_30_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[30].slw.q),

      // to register interface (read)
      .qs(pad_30_slw_30_qs)
  );


  // F[smt_30]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_pad_30_smt_30 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_30_smt_30_we),
      .wd(pad_30_smt_30_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[30].smt.q),

      // to register interface (read)
      .qs(pad_30_smt_30_qs)
  );


  // F[drv_30]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h2)
  ) u_pad_30_drv_30 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pad_30_drv_30_we),
      .wd(pad_30_drv_30_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pad[30].drv.q),

      // to register interface (read)
      .qs(pad_30_drv_30_qs)
  );





  logic [41:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == OCCAMY_SOC_INTR_STATE_OFFSET);
    addr_hit[1] = (reg_addr == OCCAMY_SOC_INTR_ENABLE_OFFSET);
    addr_hit[2] = (reg_addr == OCCAMY_SOC_INTR_TEST_OFFSET);
    addr_hit[3] = (reg_addr == OCCAMY_SOC_VERSION_OFFSET);
    addr_hit[4] = (reg_addr == OCCAMY_SOC_CHIP_ID_OFFSET);
    addr_hit[5] = (reg_addr == OCCAMY_SOC_SCRATCH_0_OFFSET);
    addr_hit[6] = (reg_addr == OCCAMY_SOC_SCRATCH_1_OFFSET);
    addr_hit[7] = (reg_addr == OCCAMY_SOC_SCRATCH_2_OFFSET);
    addr_hit[8] = (reg_addr == OCCAMY_SOC_SCRATCH_3_OFFSET);
    addr_hit[9] = (reg_addr == OCCAMY_SOC_BOOT_MODE_OFFSET);
    addr_hit[10] = (reg_addr == OCCAMY_SOC_NUM_QUADRANTS_OFFSET);
    addr_hit[11] = (reg_addr == OCCAMY_SOC_PAD_0_OFFSET);
    addr_hit[12] = (reg_addr == OCCAMY_SOC_PAD_1_OFFSET);
    addr_hit[13] = (reg_addr == OCCAMY_SOC_PAD_2_OFFSET);
    addr_hit[14] = (reg_addr == OCCAMY_SOC_PAD_3_OFFSET);
    addr_hit[15] = (reg_addr == OCCAMY_SOC_PAD_4_OFFSET);
    addr_hit[16] = (reg_addr == OCCAMY_SOC_PAD_5_OFFSET);
    addr_hit[17] = (reg_addr == OCCAMY_SOC_PAD_6_OFFSET);
    addr_hit[18] = (reg_addr == OCCAMY_SOC_PAD_7_OFFSET);
    addr_hit[19] = (reg_addr == OCCAMY_SOC_PAD_8_OFFSET);
    addr_hit[20] = (reg_addr == OCCAMY_SOC_PAD_9_OFFSET);
    addr_hit[21] = (reg_addr == OCCAMY_SOC_PAD_10_OFFSET);
    addr_hit[22] = (reg_addr == OCCAMY_SOC_PAD_11_OFFSET);
    addr_hit[23] = (reg_addr == OCCAMY_SOC_PAD_12_OFFSET);
    addr_hit[24] = (reg_addr == OCCAMY_SOC_PAD_13_OFFSET);
    addr_hit[25] = (reg_addr == OCCAMY_SOC_PAD_14_OFFSET);
    addr_hit[26] = (reg_addr == OCCAMY_SOC_PAD_15_OFFSET);
    addr_hit[27] = (reg_addr == OCCAMY_SOC_PAD_16_OFFSET);
    addr_hit[28] = (reg_addr == OCCAMY_SOC_PAD_17_OFFSET);
    addr_hit[29] = (reg_addr == OCCAMY_SOC_PAD_18_OFFSET);
    addr_hit[30] = (reg_addr == OCCAMY_SOC_PAD_19_OFFSET);
    addr_hit[31] = (reg_addr == OCCAMY_SOC_PAD_20_OFFSET);
    addr_hit[32] = (reg_addr == OCCAMY_SOC_PAD_21_OFFSET);
    addr_hit[33] = (reg_addr == OCCAMY_SOC_PAD_22_OFFSET);
    addr_hit[34] = (reg_addr == OCCAMY_SOC_PAD_23_OFFSET);
    addr_hit[35] = (reg_addr == OCCAMY_SOC_PAD_24_OFFSET);
    addr_hit[36] = (reg_addr == OCCAMY_SOC_PAD_25_OFFSET);
    addr_hit[37] = (reg_addr == OCCAMY_SOC_PAD_26_OFFSET);
    addr_hit[38] = (reg_addr == OCCAMY_SOC_PAD_27_OFFSET);
    addr_hit[39] = (reg_addr == OCCAMY_SOC_PAD_28_OFFSET);
    addr_hit[40] = (reg_addr == OCCAMY_SOC_PAD_29_OFFSET);
    addr_hit[41] = (reg_addr == OCCAMY_SOC_PAD_30_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(OCCAMY_SOC_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(OCCAMY_SOC_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(OCCAMY_SOC_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(OCCAMY_SOC_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(OCCAMY_SOC_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(OCCAMY_SOC_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(OCCAMY_SOC_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(OCCAMY_SOC_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(OCCAMY_SOC_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(OCCAMY_SOC_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(OCCAMY_SOC_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(OCCAMY_SOC_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(OCCAMY_SOC_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(OCCAMY_SOC_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(OCCAMY_SOC_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(OCCAMY_SOC_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(OCCAMY_SOC_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(OCCAMY_SOC_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(OCCAMY_SOC_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(OCCAMY_SOC_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(OCCAMY_SOC_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(OCCAMY_SOC_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(OCCAMY_SOC_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(OCCAMY_SOC_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(OCCAMY_SOC_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(OCCAMY_SOC_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(OCCAMY_SOC_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(OCCAMY_SOC_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(OCCAMY_SOC_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(OCCAMY_SOC_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(OCCAMY_SOC_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(OCCAMY_SOC_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(OCCAMY_SOC_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(OCCAMY_SOC_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(OCCAMY_SOC_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(OCCAMY_SOC_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(OCCAMY_SOC_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(OCCAMY_SOC_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(OCCAMY_SOC_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(OCCAMY_SOC_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(OCCAMY_SOC_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(OCCAMY_SOC_PERMIT[41] & ~reg_be)))));
  end

  assign intr_state_ecc_narrow_uncorrectable_we = addr_hit[0] & reg_we & !reg_error;
  assign intr_state_ecc_narrow_uncorrectable_wd = reg_wdata[0];

  assign intr_state_ecc_narrow_correctable_we = addr_hit[0] & reg_we & !reg_error;
  assign intr_state_ecc_narrow_correctable_wd = reg_wdata[1];

  assign intr_state_ecc_wide_uncorrectable_we = addr_hit[0] & reg_we & !reg_error;
  assign intr_state_ecc_wide_uncorrectable_wd = reg_wdata[2];

  assign intr_state_ecc_wide_correctable_we = addr_hit[0] & reg_we & !reg_error;
  assign intr_state_ecc_wide_correctable_wd = reg_wdata[3];

  assign intr_enable_ecc_narrow_uncorrectable_we = addr_hit[1] & reg_we & !reg_error;
  assign intr_enable_ecc_narrow_uncorrectable_wd = reg_wdata[0];

  assign intr_enable_ecc_narrow_correctable_we = addr_hit[1] & reg_we & !reg_error;
  assign intr_enable_ecc_narrow_correctable_wd = reg_wdata[1];

  assign intr_enable_ecc_wide_uncorrectable_we = addr_hit[1] & reg_we & !reg_error;
  assign intr_enable_ecc_wide_uncorrectable_wd = reg_wdata[2];

  assign intr_enable_ecc_wide_correctable_we = addr_hit[1] & reg_we & !reg_error;
  assign intr_enable_ecc_wide_correctable_wd = reg_wdata[3];

  assign intr_test_ecc_narrow_uncorrectable_we = addr_hit[2] & reg_we & !reg_error;
  assign intr_test_ecc_narrow_uncorrectable_wd = reg_wdata[0];

  assign intr_test_ecc_narrow_correctable_we = addr_hit[2] & reg_we & !reg_error;
  assign intr_test_ecc_narrow_correctable_wd = reg_wdata[1];

  assign intr_test_ecc_wide_uncorrectable_we = addr_hit[2] & reg_we & !reg_error;
  assign intr_test_ecc_wide_uncorrectable_wd = reg_wdata[2];

  assign intr_test_ecc_wide_correctable_we = addr_hit[2] & reg_we & !reg_error;
  assign intr_test_ecc_wide_correctable_wd = reg_wdata[3];

  assign chip_id_re = addr_hit[4] & reg_re & !reg_error;

  assign scratch_0_we = addr_hit[5] & reg_we & !reg_error;
  assign scratch_0_wd = reg_wdata[31:0];

  assign scratch_1_we = addr_hit[6] & reg_we & !reg_error;
  assign scratch_1_wd = reg_wdata[31:0];

  assign scratch_2_we = addr_hit[7] & reg_we & !reg_error;
  assign scratch_2_wd = reg_wdata[31:0];

  assign scratch_3_we = addr_hit[8] & reg_we & !reg_error;
  assign scratch_3_wd = reg_wdata[31:0];

  assign boot_mode_re = addr_hit[9] & reg_re & !reg_error;

  assign num_quadrants_re = addr_hit[10] & reg_re & !reg_error;

  assign pad_0_slw_0_we = addr_hit[11] & reg_we & !reg_error;
  assign pad_0_slw_0_wd = reg_wdata[0];

  assign pad_0_smt_0_we = addr_hit[11] & reg_we & !reg_error;
  assign pad_0_smt_0_wd = reg_wdata[1];

  assign pad_0_drv_0_we = addr_hit[11] & reg_we & !reg_error;
  assign pad_0_drv_0_wd = reg_wdata[3:2];

  assign pad_1_slw_1_we = addr_hit[12] & reg_we & !reg_error;
  assign pad_1_slw_1_wd = reg_wdata[0];

  assign pad_1_smt_1_we = addr_hit[12] & reg_we & !reg_error;
  assign pad_1_smt_1_wd = reg_wdata[1];

  assign pad_1_drv_1_we = addr_hit[12] & reg_we & !reg_error;
  assign pad_1_drv_1_wd = reg_wdata[3:2];

  assign pad_2_slw_2_we = addr_hit[13] & reg_we & !reg_error;
  assign pad_2_slw_2_wd = reg_wdata[0];

  assign pad_2_smt_2_we = addr_hit[13] & reg_we & !reg_error;
  assign pad_2_smt_2_wd = reg_wdata[1];

  assign pad_2_drv_2_we = addr_hit[13] & reg_we & !reg_error;
  assign pad_2_drv_2_wd = reg_wdata[3:2];

  assign pad_3_slw_3_we = addr_hit[14] & reg_we & !reg_error;
  assign pad_3_slw_3_wd = reg_wdata[0];

  assign pad_3_smt_3_we = addr_hit[14] & reg_we & !reg_error;
  assign pad_3_smt_3_wd = reg_wdata[1];

  assign pad_3_drv_3_we = addr_hit[14] & reg_we & !reg_error;
  assign pad_3_drv_3_wd = reg_wdata[3:2];

  assign pad_4_slw_4_we = addr_hit[15] & reg_we & !reg_error;
  assign pad_4_slw_4_wd = reg_wdata[0];

  assign pad_4_smt_4_we = addr_hit[15] & reg_we & !reg_error;
  assign pad_4_smt_4_wd = reg_wdata[1];

  assign pad_4_drv_4_we = addr_hit[15] & reg_we & !reg_error;
  assign pad_4_drv_4_wd = reg_wdata[3:2];

  assign pad_5_slw_5_we = addr_hit[16] & reg_we & !reg_error;
  assign pad_5_slw_5_wd = reg_wdata[0];

  assign pad_5_smt_5_we = addr_hit[16] & reg_we & !reg_error;
  assign pad_5_smt_5_wd = reg_wdata[1];

  assign pad_5_drv_5_we = addr_hit[16] & reg_we & !reg_error;
  assign pad_5_drv_5_wd = reg_wdata[3:2];

  assign pad_6_slw_6_we = addr_hit[17] & reg_we & !reg_error;
  assign pad_6_slw_6_wd = reg_wdata[0];

  assign pad_6_smt_6_we = addr_hit[17] & reg_we & !reg_error;
  assign pad_6_smt_6_wd = reg_wdata[1];

  assign pad_6_drv_6_we = addr_hit[17] & reg_we & !reg_error;
  assign pad_6_drv_6_wd = reg_wdata[3:2];

  assign pad_7_slw_7_we = addr_hit[18] & reg_we & !reg_error;
  assign pad_7_slw_7_wd = reg_wdata[0];

  assign pad_7_smt_7_we = addr_hit[18] & reg_we & !reg_error;
  assign pad_7_smt_7_wd = reg_wdata[1];

  assign pad_7_drv_7_we = addr_hit[18] & reg_we & !reg_error;
  assign pad_7_drv_7_wd = reg_wdata[3:2];

  assign pad_8_slw_8_we = addr_hit[19] & reg_we & !reg_error;
  assign pad_8_slw_8_wd = reg_wdata[0];

  assign pad_8_smt_8_we = addr_hit[19] & reg_we & !reg_error;
  assign pad_8_smt_8_wd = reg_wdata[1];

  assign pad_8_drv_8_we = addr_hit[19] & reg_we & !reg_error;
  assign pad_8_drv_8_wd = reg_wdata[3:2];

  assign pad_9_slw_9_we = addr_hit[20] & reg_we & !reg_error;
  assign pad_9_slw_9_wd = reg_wdata[0];

  assign pad_9_smt_9_we = addr_hit[20] & reg_we & !reg_error;
  assign pad_9_smt_9_wd = reg_wdata[1];

  assign pad_9_drv_9_we = addr_hit[20] & reg_we & !reg_error;
  assign pad_9_drv_9_wd = reg_wdata[3:2];

  assign pad_10_slw_10_we = addr_hit[21] & reg_we & !reg_error;
  assign pad_10_slw_10_wd = reg_wdata[0];

  assign pad_10_smt_10_we = addr_hit[21] & reg_we & !reg_error;
  assign pad_10_smt_10_wd = reg_wdata[1];

  assign pad_10_drv_10_we = addr_hit[21] & reg_we & !reg_error;
  assign pad_10_drv_10_wd = reg_wdata[3:2];

  assign pad_11_slw_11_we = addr_hit[22] & reg_we & !reg_error;
  assign pad_11_slw_11_wd = reg_wdata[0];

  assign pad_11_smt_11_we = addr_hit[22] & reg_we & !reg_error;
  assign pad_11_smt_11_wd = reg_wdata[1];

  assign pad_11_drv_11_we = addr_hit[22] & reg_we & !reg_error;
  assign pad_11_drv_11_wd = reg_wdata[3:2];

  assign pad_12_slw_12_we = addr_hit[23] & reg_we & !reg_error;
  assign pad_12_slw_12_wd = reg_wdata[0];

  assign pad_12_smt_12_we = addr_hit[23] & reg_we & !reg_error;
  assign pad_12_smt_12_wd = reg_wdata[1];

  assign pad_12_drv_12_we = addr_hit[23] & reg_we & !reg_error;
  assign pad_12_drv_12_wd = reg_wdata[3:2];

  assign pad_13_slw_13_we = addr_hit[24] & reg_we & !reg_error;
  assign pad_13_slw_13_wd = reg_wdata[0];

  assign pad_13_smt_13_we = addr_hit[24] & reg_we & !reg_error;
  assign pad_13_smt_13_wd = reg_wdata[1];

  assign pad_13_drv_13_we = addr_hit[24] & reg_we & !reg_error;
  assign pad_13_drv_13_wd = reg_wdata[3:2];

  assign pad_14_slw_14_we = addr_hit[25] & reg_we & !reg_error;
  assign pad_14_slw_14_wd = reg_wdata[0];

  assign pad_14_smt_14_we = addr_hit[25] & reg_we & !reg_error;
  assign pad_14_smt_14_wd = reg_wdata[1];

  assign pad_14_drv_14_we = addr_hit[25] & reg_we & !reg_error;
  assign pad_14_drv_14_wd = reg_wdata[3:2];

  assign pad_15_slw_15_we = addr_hit[26] & reg_we & !reg_error;
  assign pad_15_slw_15_wd = reg_wdata[0];

  assign pad_15_smt_15_we = addr_hit[26] & reg_we & !reg_error;
  assign pad_15_smt_15_wd = reg_wdata[1];

  assign pad_15_drv_15_we = addr_hit[26] & reg_we & !reg_error;
  assign pad_15_drv_15_wd = reg_wdata[3:2];

  assign pad_16_slw_16_we = addr_hit[27] & reg_we & !reg_error;
  assign pad_16_slw_16_wd = reg_wdata[0];

  assign pad_16_smt_16_we = addr_hit[27] & reg_we & !reg_error;
  assign pad_16_smt_16_wd = reg_wdata[1];

  assign pad_16_drv_16_we = addr_hit[27] & reg_we & !reg_error;
  assign pad_16_drv_16_wd = reg_wdata[3:2];

  assign pad_17_slw_17_we = addr_hit[28] & reg_we & !reg_error;
  assign pad_17_slw_17_wd = reg_wdata[0];

  assign pad_17_smt_17_we = addr_hit[28] & reg_we & !reg_error;
  assign pad_17_smt_17_wd = reg_wdata[1];

  assign pad_17_drv_17_we = addr_hit[28] & reg_we & !reg_error;
  assign pad_17_drv_17_wd = reg_wdata[3:2];

  assign pad_18_slw_18_we = addr_hit[29] & reg_we & !reg_error;
  assign pad_18_slw_18_wd = reg_wdata[0];

  assign pad_18_smt_18_we = addr_hit[29] & reg_we & !reg_error;
  assign pad_18_smt_18_wd = reg_wdata[1];

  assign pad_18_drv_18_we = addr_hit[29] & reg_we & !reg_error;
  assign pad_18_drv_18_wd = reg_wdata[3:2];

  assign pad_19_slw_19_we = addr_hit[30] & reg_we & !reg_error;
  assign pad_19_slw_19_wd = reg_wdata[0];

  assign pad_19_smt_19_we = addr_hit[30] & reg_we & !reg_error;
  assign pad_19_smt_19_wd = reg_wdata[1];

  assign pad_19_drv_19_we = addr_hit[30] & reg_we & !reg_error;
  assign pad_19_drv_19_wd = reg_wdata[3:2];

  assign pad_20_slw_20_we = addr_hit[31] & reg_we & !reg_error;
  assign pad_20_slw_20_wd = reg_wdata[0];

  assign pad_20_smt_20_we = addr_hit[31] & reg_we & !reg_error;
  assign pad_20_smt_20_wd = reg_wdata[1];

  assign pad_20_drv_20_we = addr_hit[31] & reg_we & !reg_error;
  assign pad_20_drv_20_wd = reg_wdata[3:2];

  assign pad_21_slw_21_we = addr_hit[32] & reg_we & !reg_error;
  assign pad_21_slw_21_wd = reg_wdata[0];

  assign pad_21_smt_21_we = addr_hit[32] & reg_we & !reg_error;
  assign pad_21_smt_21_wd = reg_wdata[1];

  assign pad_21_drv_21_we = addr_hit[32] & reg_we & !reg_error;
  assign pad_21_drv_21_wd = reg_wdata[3:2];

  assign pad_22_slw_22_we = addr_hit[33] & reg_we & !reg_error;
  assign pad_22_slw_22_wd = reg_wdata[0];

  assign pad_22_smt_22_we = addr_hit[33] & reg_we & !reg_error;
  assign pad_22_smt_22_wd = reg_wdata[1];

  assign pad_22_drv_22_we = addr_hit[33] & reg_we & !reg_error;
  assign pad_22_drv_22_wd = reg_wdata[3:2];

  assign pad_23_slw_23_we = addr_hit[34] & reg_we & !reg_error;
  assign pad_23_slw_23_wd = reg_wdata[0];

  assign pad_23_smt_23_we = addr_hit[34] & reg_we & !reg_error;
  assign pad_23_smt_23_wd = reg_wdata[1];

  assign pad_23_drv_23_we = addr_hit[34] & reg_we & !reg_error;
  assign pad_23_drv_23_wd = reg_wdata[3:2];

  assign pad_24_slw_24_we = addr_hit[35] & reg_we & !reg_error;
  assign pad_24_slw_24_wd = reg_wdata[0];

  assign pad_24_smt_24_we = addr_hit[35] & reg_we & !reg_error;
  assign pad_24_smt_24_wd = reg_wdata[1];

  assign pad_24_drv_24_we = addr_hit[35] & reg_we & !reg_error;
  assign pad_24_drv_24_wd = reg_wdata[3:2];

  assign pad_25_slw_25_we = addr_hit[36] & reg_we & !reg_error;
  assign pad_25_slw_25_wd = reg_wdata[0];

  assign pad_25_smt_25_we = addr_hit[36] & reg_we & !reg_error;
  assign pad_25_smt_25_wd = reg_wdata[1];

  assign pad_25_drv_25_we = addr_hit[36] & reg_we & !reg_error;
  assign pad_25_drv_25_wd = reg_wdata[3:2];

  assign pad_26_slw_26_we = addr_hit[37] & reg_we & !reg_error;
  assign pad_26_slw_26_wd = reg_wdata[0];

  assign pad_26_smt_26_we = addr_hit[37] & reg_we & !reg_error;
  assign pad_26_smt_26_wd = reg_wdata[1];

  assign pad_26_drv_26_we = addr_hit[37] & reg_we & !reg_error;
  assign pad_26_drv_26_wd = reg_wdata[3:2];

  assign pad_27_slw_27_we = addr_hit[38] & reg_we & !reg_error;
  assign pad_27_slw_27_wd = reg_wdata[0];

  assign pad_27_smt_27_we = addr_hit[38] & reg_we & !reg_error;
  assign pad_27_smt_27_wd = reg_wdata[1];

  assign pad_27_drv_27_we = addr_hit[38] & reg_we & !reg_error;
  assign pad_27_drv_27_wd = reg_wdata[3:2];

  assign pad_28_slw_28_we = addr_hit[39] & reg_we & !reg_error;
  assign pad_28_slw_28_wd = reg_wdata[0];

  assign pad_28_smt_28_we = addr_hit[39] & reg_we & !reg_error;
  assign pad_28_smt_28_wd = reg_wdata[1];

  assign pad_28_drv_28_we = addr_hit[39] & reg_we & !reg_error;
  assign pad_28_drv_28_wd = reg_wdata[3:2];

  assign pad_29_slw_29_we = addr_hit[40] & reg_we & !reg_error;
  assign pad_29_slw_29_wd = reg_wdata[0];

  assign pad_29_smt_29_we = addr_hit[40] & reg_we & !reg_error;
  assign pad_29_smt_29_wd = reg_wdata[1];

  assign pad_29_drv_29_we = addr_hit[40] & reg_we & !reg_error;
  assign pad_29_drv_29_wd = reg_wdata[3:2];

  assign pad_30_slw_30_we = addr_hit[41] & reg_we & !reg_error;
  assign pad_30_slw_30_wd = reg_wdata[0];

  assign pad_30_smt_30_we = addr_hit[41] & reg_we & !reg_error;
  assign pad_30_smt_30_wd = reg_wdata[1];

  assign pad_30_drv_30_we = addr_hit[41] & reg_we & !reg_error;
  assign pad_30_drv_30_wd = reg_wdata[3:2];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_ecc_narrow_uncorrectable_qs;
        reg_rdata_next[1] = intr_state_ecc_narrow_correctable_qs;
        reg_rdata_next[2] = intr_state_ecc_wide_uncorrectable_qs;
        reg_rdata_next[3] = intr_state_ecc_wide_correctable_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_ecc_narrow_uncorrectable_qs;
        reg_rdata_next[1] = intr_enable_ecc_narrow_correctable_qs;
        reg_rdata_next[2] = intr_enable_ecc_wide_uncorrectable_qs;
        reg_rdata_next[3] = intr_enable_ecc_wide_correctable_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[15:0] = version_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[1:0] = chip_id_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = scratch_0_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = scratch_1_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = scratch_2_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = scratch_3_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[1:0] = boot_mode_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = num_quadrants_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0]   = pad_0_slw_0_qs;
        reg_rdata_next[1]   = pad_0_smt_0_qs;
        reg_rdata_next[3:2] = pad_0_drv_0_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0]   = pad_1_slw_1_qs;
        reg_rdata_next[1]   = pad_1_smt_1_qs;
        reg_rdata_next[3:2] = pad_1_drv_1_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0]   = pad_2_slw_2_qs;
        reg_rdata_next[1]   = pad_2_smt_2_qs;
        reg_rdata_next[3:2] = pad_2_drv_2_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0]   = pad_3_slw_3_qs;
        reg_rdata_next[1]   = pad_3_smt_3_qs;
        reg_rdata_next[3:2] = pad_3_drv_3_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0]   = pad_4_slw_4_qs;
        reg_rdata_next[1]   = pad_4_smt_4_qs;
        reg_rdata_next[3:2] = pad_4_drv_4_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0]   = pad_5_slw_5_qs;
        reg_rdata_next[1]   = pad_5_smt_5_qs;
        reg_rdata_next[3:2] = pad_5_drv_5_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[0]   = pad_6_slw_6_qs;
        reg_rdata_next[1]   = pad_6_smt_6_qs;
        reg_rdata_next[3:2] = pad_6_drv_6_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[0]   = pad_7_slw_7_qs;
        reg_rdata_next[1]   = pad_7_smt_7_qs;
        reg_rdata_next[3:2] = pad_7_drv_7_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[0]   = pad_8_slw_8_qs;
        reg_rdata_next[1]   = pad_8_smt_8_qs;
        reg_rdata_next[3:2] = pad_8_drv_8_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0]   = pad_9_slw_9_qs;
        reg_rdata_next[1]   = pad_9_smt_9_qs;
        reg_rdata_next[3:2] = pad_9_drv_9_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[0]   = pad_10_slw_10_qs;
        reg_rdata_next[1]   = pad_10_smt_10_qs;
        reg_rdata_next[3:2] = pad_10_drv_10_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[0]   = pad_11_slw_11_qs;
        reg_rdata_next[1]   = pad_11_smt_11_qs;
        reg_rdata_next[3:2] = pad_11_drv_11_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[0]   = pad_12_slw_12_qs;
        reg_rdata_next[1]   = pad_12_smt_12_qs;
        reg_rdata_next[3:2] = pad_12_drv_12_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0]   = pad_13_slw_13_qs;
        reg_rdata_next[1]   = pad_13_smt_13_qs;
        reg_rdata_next[3:2] = pad_13_drv_13_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[0]   = pad_14_slw_14_qs;
        reg_rdata_next[1]   = pad_14_smt_14_qs;
        reg_rdata_next[3:2] = pad_14_drv_14_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[0]   = pad_15_slw_15_qs;
        reg_rdata_next[1]   = pad_15_smt_15_qs;
        reg_rdata_next[3:2] = pad_15_drv_15_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[0]   = pad_16_slw_16_qs;
        reg_rdata_next[1]   = pad_16_smt_16_qs;
        reg_rdata_next[3:2] = pad_16_drv_16_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0]   = pad_17_slw_17_qs;
        reg_rdata_next[1]   = pad_17_smt_17_qs;
        reg_rdata_next[3:2] = pad_17_drv_17_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[0]   = pad_18_slw_18_qs;
        reg_rdata_next[1]   = pad_18_smt_18_qs;
        reg_rdata_next[3:2] = pad_18_drv_18_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[0]   = pad_19_slw_19_qs;
        reg_rdata_next[1]   = pad_19_smt_19_qs;
        reg_rdata_next[3:2] = pad_19_drv_19_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[0]   = pad_20_slw_20_qs;
        reg_rdata_next[1]   = pad_20_smt_20_qs;
        reg_rdata_next[3:2] = pad_20_drv_20_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[0]   = pad_21_slw_21_qs;
        reg_rdata_next[1]   = pad_21_smt_21_qs;
        reg_rdata_next[3:2] = pad_21_drv_21_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[0]   = pad_22_slw_22_qs;
        reg_rdata_next[1]   = pad_22_smt_22_qs;
        reg_rdata_next[3:2] = pad_22_drv_22_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[0]   = pad_23_slw_23_qs;
        reg_rdata_next[1]   = pad_23_smt_23_qs;
        reg_rdata_next[3:2] = pad_23_drv_23_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[0]   = pad_24_slw_24_qs;
        reg_rdata_next[1]   = pad_24_smt_24_qs;
        reg_rdata_next[3:2] = pad_24_drv_24_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[0]   = pad_25_slw_25_qs;
        reg_rdata_next[1]   = pad_25_smt_25_qs;
        reg_rdata_next[3:2] = pad_25_drv_25_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[0]   = pad_26_slw_26_qs;
        reg_rdata_next[1]   = pad_26_smt_26_qs;
        reg_rdata_next[3:2] = pad_26_drv_26_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[0]   = pad_27_slw_27_qs;
        reg_rdata_next[1]   = pad_27_smt_27_qs;
        reg_rdata_next[3:2] = pad_27_drv_27_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[0]   = pad_28_slw_28_qs;
        reg_rdata_next[1]   = pad_28_smt_28_qs;
        reg_rdata_next[3:2] = pad_28_drv_28_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[0]   = pad_29_slw_29_qs;
        reg_rdata_next[1]   = pad_29_smt_29_qs;
        reg_rdata_next[3:2] = pad_29_drv_29_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[0]   = pad_30_slw_30_qs;
        reg_rdata_next[1]   = pad_30_smt_30_qs;
        reg_rdata_next[3:2] = pad_30_drv_30_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module occamy_soc_reg_top_intf #(
    parameter  int AW = 8,
    localparam int DW = 32
) (
    input logic clk_i,
    input logic rst_ni,
    REG_BUS.in regbus_slave,
    // To HW
    output occamy_soc_reg_pkg::occamy_soc_reg2hw_t reg2hw,  // Write
    input occamy_soc_reg_pkg::occamy_soc_hw2reg_t hw2reg,  // Read
    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);
  localparam int unsigned STRB_WIDTH = DW / 8;

  `include "register_interface/typedef.svh"
  `include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;

  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)



  occamy_soc_reg_top #(
      .reg_req_t(reg_bus_req_t),
      .reg_rsp_t(reg_bus_rsp_t),
      .AW(AW)
  ) i_regs (
      .clk_i,
      .rst_ni,
      .reg_req_i(s_reg_req),
      .reg_rsp_o(s_reg_rsp),
      .reg2hw,  // Write
      .hw2reg,  // Read
      .devmode_i
  );

endmodule


