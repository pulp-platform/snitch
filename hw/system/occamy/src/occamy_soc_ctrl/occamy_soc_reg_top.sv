// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module occamy_soc_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 10
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output occamy_soc_reg_pkg::occamy_soc_reg2hw_t reg2hw, // Write
  input  occamy_soc_reg_pkg::occamy_soc_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import occamy_soc_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_ecc_uncorrectable_qs;
  logic intr_state_ecc_uncorrectable_wd;
  logic intr_state_ecc_uncorrectable_we;
  logic intr_state_ecc_correctable_qs;
  logic intr_state_ecc_correctable_wd;
  logic intr_state_ecc_correctable_we;
  logic intr_enable_ecc_uncorrectable_qs;
  logic intr_enable_ecc_uncorrectable_wd;
  logic intr_enable_ecc_uncorrectable_we;
  logic intr_enable_ecc_correctable_qs;
  logic intr_enable_ecc_correctable_wd;
  logic intr_enable_ecc_correctable_we;
  logic intr_test_ecc_uncorrectable_wd;
  logic intr_test_ecc_uncorrectable_we;
  logic intr_test_ecc_correctable_wd;
  logic intr_test_ecc_correctable_we;
  logic [15:0] version_qs;
  logic [1:0] chip_id_qs;
  logic chip_id_re;
  logic [31:0] scratch_0_qs;
  logic [31:0] scratch_0_wd;
  logic scratch_0_we;
  logic [31:0] scratch_1_qs;
  logic [31:0] scratch_1_wd;
  logic scratch_1_we;
  logic [31:0] scratch_2_qs;
  logic [31:0] scratch_2_wd;
  logic scratch_2_we;
  logic [31:0] scratch_3_qs;
  logic [31:0] scratch_3_wd;
  logic scratch_3_we;
  logic [1:0] boot_mode_qs;
  logic boot_mode_re;
  logic pad_0_slw_0_qs;
  logic pad_0_slw_0_wd;
  logic pad_0_slw_0_we;
  logic pad_0_smt_0_qs;
  logic pad_0_smt_0_wd;
  logic pad_0_smt_0_we;
  logic [1:0] pad_0_drv_0_qs;
  logic [1:0] pad_0_drv_0_wd;
  logic pad_0_drv_0_we;
  logic pad_1_slw_1_qs;
  logic pad_1_slw_1_wd;
  logic pad_1_slw_1_we;
  logic pad_1_smt_1_qs;
  logic pad_1_smt_1_wd;
  logic pad_1_smt_1_we;
  logic [1:0] pad_1_drv_1_qs;
  logic [1:0] pad_1_drv_1_wd;
  logic pad_1_drv_1_we;
  logic pad_2_slw_2_qs;
  logic pad_2_slw_2_wd;
  logic pad_2_slw_2_we;
  logic pad_2_smt_2_qs;
  logic pad_2_smt_2_wd;
  logic pad_2_smt_2_we;
  logic [1:0] pad_2_drv_2_qs;
  logic [1:0] pad_2_drv_2_wd;
  logic pad_2_drv_2_we;
  logic pad_3_slw_3_qs;
  logic pad_3_slw_3_wd;
  logic pad_3_slw_3_we;
  logic pad_3_smt_3_qs;
  logic pad_3_smt_3_wd;
  logic pad_3_smt_3_we;
  logic [1:0] pad_3_drv_3_qs;
  logic [1:0] pad_3_drv_3_wd;
  logic pad_3_drv_3_we;
  logic pad_4_slw_4_qs;
  logic pad_4_slw_4_wd;
  logic pad_4_slw_4_we;
  logic pad_4_smt_4_qs;
  logic pad_4_smt_4_wd;
  logic pad_4_smt_4_we;
  logic [1:0] pad_4_drv_4_qs;
  logic [1:0] pad_4_drv_4_wd;
  logic pad_4_drv_4_we;
  logic pad_5_slw_5_qs;
  logic pad_5_slw_5_wd;
  logic pad_5_slw_5_we;
  logic pad_5_smt_5_qs;
  logic pad_5_smt_5_wd;
  logic pad_5_smt_5_we;
  logic [1:0] pad_5_drv_5_qs;
  logic [1:0] pad_5_drv_5_wd;
  logic pad_5_drv_5_we;
  logic pad_6_slw_6_qs;
  logic pad_6_slw_6_wd;
  logic pad_6_slw_6_we;
  logic pad_6_smt_6_qs;
  logic pad_6_smt_6_wd;
  logic pad_6_smt_6_we;
  logic [1:0] pad_6_drv_6_qs;
  logic [1:0] pad_6_drv_6_wd;
  logic pad_6_drv_6_we;
  logic pad_7_slw_7_qs;
  logic pad_7_slw_7_wd;
  logic pad_7_slw_7_we;
  logic pad_7_smt_7_qs;
  logic pad_7_smt_7_wd;
  logic pad_7_smt_7_we;
  logic [1:0] pad_7_drv_7_qs;
  logic [1:0] pad_7_drv_7_wd;
  logic pad_7_drv_7_we;
  logic pad_8_slw_8_qs;
  logic pad_8_slw_8_wd;
  logic pad_8_slw_8_we;
  logic pad_8_smt_8_qs;
  logic pad_8_smt_8_wd;
  logic pad_8_smt_8_we;
  logic [1:0] pad_8_drv_8_qs;
  logic [1:0] pad_8_drv_8_wd;
  logic pad_8_drv_8_we;
  logic pad_9_slw_9_qs;
  logic pad_9_slw_9_wd;
  logic pad_9_slw_9_we;
  logic pad_9_smt_9_qs;
  logic pad_9_smt_9_wd;
  logic pad_9_smt_9_we;
  logic [1:0] pad_9_drv_9_qs;
  logic [1:0] pad_9_drv_9_wd;
  logic pad_9_drv_9_we;
  logic pad_10_slw_10_qs;
  logic pad_10_slw_10_wd;
  logic pad_10_slw_10_we;
  logic pad_10_smt_10_qs;
  logic pad_10_smt_10_wd;
  logic pad_10_smt_10_we;
  logic [1:0] pad_10_drv_10_qs;
  logic [1:0] pad_10_drv_10_wd;
  logic pad_10_drv_10_we;
  logic pad_11_slw_11_qs;
  logic pad_11_slw_11_wd;
  logic pad_11_slw_11_we;
  logic pad_11_smt_11_qs;
  logic pad_11_smt_11_wd;
  logic pad_11_smt_11_we;
  logic [1:0] pad_11_drv_11_qs;
  logic [1:0] pad_11_drv_11_wd;
  logic pad_11_drv_11_we;
  logic pad_12_slw_12_qs;
  logic pad_12_slw_12_wd;
  logic pad_12_slw_12_we;
  logic pad_12_smt_12_qs;
  logic pad_12_smt_12_wd;
  logic pad_12_smt_12_we;
  logic [1:0] pad_12_drv_12_qs;
  logic [1:0] pad_12_drv_12_wd;
  logic pad_12_drv_12_we;
  logic pad_13_slw_13_qs;
  logic pad_13_slw_13_wd;
  logic pad_13_slw_13_we;
  logic pad_13_smt_13_qs;
  logic pad_13_smt_13_wd;
  logic pad_13_smt_13_we;
  logic [1:0] pad_13_drv_13_qs;
  logic [1:0] pad_13_drv_13_wd;
  logic pad_13_drv_13_we;
  logic pad_14_slw_14_qs;
  logic pad_14_slw_14_wd;
  logic pad_14_slw_14_we;
  logic pad_14_smt_14_qs;
  logic pad_14_smt_14_wd;
  logic pad_14_smt_14_we;
  logic [1:0] pad_14_drv_14_qs;
  logic [1:0] pad_14_drv_14_wd;
  logic pad_14_drv_14_we;
  logic pad_15_slw_15_qs;
  logic pad_15_slw_15_wd;
  logic pad_15_slw_15_we;
  logic pad_15_smt_15_qs;
  logic pad_15_smt_15_wd;
  logic pad_15_smt_15_we;
  logic [1:0] pad_15_drv_15_qs;
  logic [1:0] pad_15_drv_15_wd;
  logic pad_15_drv_15_we;
  logic pad_16_slw_16_qs;
  logic pad_16_slw_16_wd;
  logic pad_16_slw_16_we;
  logic pad_16_smt_16_qs;
  logic pad_16_smt_16_wd;
  logic pad_16_smt_16_we;
  logic [1:0] pad_16_drv_16_qs;
  logic [1:0] pad_16_drv_16_wd;
  logic pad_16_drv_16_we;
  logic pad_17_slw_17_qs;
  logic pad_17_slw_17_wd;
  logic pad_17_slw_17_we;
  logic pad_17_smt_17_qs;
  logic pad_17_smt_17_wd;
  logic pad_17_smt_17_we;
  logic [1:0] pad_17_drv_17_qs;
  logic [1:0] pad_17_drv_17_wd;
  logic pad_17_drv_17_we;
  logic pad_18_slw_18_qs;
  logic pad_18_slw_18_wd;
  logic pad_18_slw_18_we;
  logic pad_18_smt_18_qs;
  logic pad_18_smt_18_wd;
  logic pad_18_smt_18_we;
  logic [1:0] pad_18_drv_18_qs;
  logic [1:0] pad_18_drv_18_wd;
  logic pad_18_drv_18_we;
  logic pad_19_slw_19_qs;
  logic pad_19_slw_19_wd;
  logic pad_19_slw_19_we;
  logic pad_19_smt_19_qs;
  logic pad_19_smt_19_wd;
  logic pad_19_smt_19_we;
  logic [1:0] pad_19_drv_19_qs;
  logic [1:0] pad_19_drv_19_wd;
  logic pad_19_drv_19_we;
  logic pad_20_slw_20_qs;
  logic pad_20_slw_20_wd;
  logic pad_20_slw_20_we;
  logic pad_20_smt_20_qs;
  logic pad_20_smt_20_wd;
  logic pad_20_smt_20_we;
  logic [1:0] pad_20_drv_20_qs;
  logic [1:0] pad_20_drv_20_wd;
  logic pad_20_drv_20_we;
  logic pad_21_slw_21_qs;
  logic pad_21_slw_21_wd;
  logic pad_21_slw_21_we;
  logic pad_21_smt_21_qs;
  logic pad_21_smt_21_wd;
  logic pad_21_smt_21_we;
  logic [1:0] pad_21_drv_21_qs;
  logic [1:0] pad_21_drv_21_wd;
  logic pad_21_drv_21_we;
  logic pad_22_slw_22_qs;
  logic pad_22_slw_22_wd;
  logic pad_22_slw_22_we;
  logic pad_22_smt_22_qs;
  logic pad_22_smt_22_wd;
  logic pad_22_smt_22_we;
  logic [1:0] pad_22_drv_22_qs;
  logic [1:0] pad_22_drv_22_wd;
  logic pad_22_drv_22_we;
  logic pad_23_slw_23_qs;
  logic pad_23_slw_23_wd;
  logic pad_23_slw_23_we;
  logic pad_23_smt_23_qs;
  logic pad_23_smt_23_wd;
  logic pad_23_smt_23_we;
  logic [1:0] pad_23_drv_23_qs;
  logic [1:0] pad_23_drv_23_wd;
  logic pad_23_drv_23_we;
  logic pad_24_slw_24_qs;
  logic pad_24_slw_24_wd;
  logic pad_24_slw_24_we;
  logic pad_24_smt_24_qs;
  logic pad_24_smt_24_wd;
  logic pad_24_smt_24_we;
  logic [1:0] pad_24_drv_24_qs;
  logic [1:0] pad_24_drv_24_wd;
  logic pad_24_drv_24_we;
  logic pad_25_slw_25_qs;
  logic pad_25_slw_25_wd;
  logic pad_25_slw_25_we;
  logic pad_25_smt_25_qs;
  logic pad_25_smt_25_wd;
  logic pad_25_smt_25_we;
  logic [1:0] pad_25_drv_25_qs;
  logic [1:0] pad_25_drv_25_wd;
  logic pad_25_drv_25_we;
  logic pad_26_slw_26_qs;
  logic pad_26_slw_26_wd;
  logic pad_26_slw_26_we;
  logic pad_26_smt_26_qs;
  logic pad_26_smt_26_wd;
  logic pad_26_smt_26_we;
  logic [1:0] pad_26_drv_26_qs;
  logic [1:0] pad_26_drv_26_wd;
  logic pad_26_drv_26_we;
  logic pad_27_slw_27_qs;
  logic pad_27_slw_27_wd;
  logic pad_27_slw_27_we;
  logic pad_27_smt_27_qs;
  logic pad_27_smt_27_wd;
  logic pad_27_smt_27_we;
  logic [1:0] pad_27_drv_27_qs;
  logic [1:0] pad_27_drv_27_wd;
  logic pad_27_drv_27_we;
  logic pad_28_slw_28_qs;
  logic pad_28_slw_28_wd;
  logic pad_28_slw_28_we;
  logic pad_28_smt_28_qs;
  logic pad_28_smt_28_wd;
  logic pad_28_smt_28_we;
  logic [1:0] pad_28_drv_28_qs;
  logic [1:0] pad_28_drv_28_wd;
  logic pad_28_drv_28_we;
  logic pad_29_slw_29_qs;
  logic pad_29_slw_29_wd;
  logic pad_29_slw_29_we;
  logic pad_29_smt_29_qs;
  logic pad_29_smt_29_wd;
  logic pad_29_smt_29_we;
  logic [1:0] pad_29_drv_29_qs;
  logic [1:0] pad_29_drv_29_wd;
  logic pad_29_drv_29_we;
  logic pad_30_slw_30_qs;
  logic pad_30_slw_30_wd;
  logic pad_30_slw_30_we;
  logic pad_30_smt_30_qs;
  logic pad_30_smt_30_wd;
  logic pad_30_smt_30_we;
  logic [1:0] pad_30_drv_30_qs;
  logic [1:0] pad_30_drv_30_wd;
  logic pad_30_drv_30_we;
  logic [4:0] isolate_0_isolate_0_qs;
  logic [4:0] isolate_0_isolate_0_wd;
  logic isolate_0_isolate_0_we;
  logic [4:0] isolate_0_isolate_1_qs;
  logic [4:0] isolate_0_isolate_1_wd;
  logic isolate_0_isolate_1_we;
  logic [4:0] isolate_0_isolate_2_qs;
  logic [4:0] isolate_0_isolate_2_wd;
  logic isolate_0_isolate_2_we;
  logic [4:0] isolate_0_isolate_3_qs;
  logic [4:0] isolate_0_isolate_3_wd;
  logic isolate_0_isolate_3_we;
  logic [4:0] isolate_0_isolate_4_qs;
  logic [4:0] isolate_0_isolate_4_wd;
  logic isolate_0_isolate_4_we;
  logic [4:0] isolate_0_isolate_5_qs;
  logic [4:0] isolate_0_isolate_5_wd;
  logic isolate_0_isolate_5_we;
  logic [4:0] isolate_1_isolate_6_qs;
  logic [4:0] isolate_1_isolate_6_wd;
  logic isolate_1_isolate_6_we;
  logic [4:0] isolate_1_isolate_7_qs;
  logic [4:0] isolate_1_isolate_7_wd;
  logic isolate_1_isolate_7_we;
  logic [4:0] isolated_0_isolated_0_qs;
  logic isolated_0_isolated_0_re;
  logic [4:0] isolated_0_isolated_1_qs;
  logic isolated_0_isolated_1_re;
  logic [4:0] isolated_0_isolated_2_qs;
  logic isolated_0_isolated_2_re;
  logic [4:0] isolated_0_isolated_3_qs;
  logic isolated_0_isolated_3_re;
  logic [4:0] isolated_0_isolated_4_qs;
  logic isolated_0_isolated_4_re;
  logic [4:0] isolated_0_isolated_5_qs;
  logic isolated_0_isolated_5_re;
  logic [4:0] isolated_1_isolated_6_qs;
  logic isolated_1_isolated_6_re;
  logic [4:0] isolated_1_isolated_7_qs;
  logic isolated_1_isolated_7_re;
  logic ro_cache_enable_enable_0_qs;
  logic ro_cache_enable_enable_0_wd;
  logic ro_cache_enable_enable_0_we;
  logic ro_cache_enable_enable_1_qs;
  logic ro_cache_enable_enable_1_wd;
  logic ro_cache_enable_enable_1_we;
  logic ro_cache_enable_enable_2_qs;
  logic ro_cache_enable_enable_2_wd;
  logic ro_cache_enable_enable_2_we;
  logic ro_cache_enable_enable_3_qs;
  logic ro_cache_enable_enable_3_wd;
  logic ro_cache_enable_enable_3_we;
  logic ro_cache_enable_enable_4_qs;
  logic ro_cache_enable_enable_4_wd;
  logic ro_cache_enable_enable_4_we;
  logic ro_cache_enable_enable_5_qs;
  logic ro_cache_enable_enable_5_wd;
  logic ro_cache_enable_enable_5_we;
  logic ro_cache_enable_enable_6_qs;
  logic ro_cache_enable_enable_6_wd;
  logic ro_cache_enable_enable_6_we;
  logic ro_cache_enable_enable_7_qs;
  logic ro_cache_enable_enable_7_wd;
  logic ro_cache_enable_enable_7_we;
  logic ro_cache_flush_flush_0_qs;
  logic ro_cache_flush_flush_0_wd;
  logic ro_cache_flush_flush_0_we;
  logic ro_cache_flush_flush_1_qs;
  logic ro_cache_flush_flush_1_wd;
  logic ro_cache_flush_flush_1_we;
  logic ro_cache_flush_flush_2_qs;
  logic ro_cache_flush_flush_2_wd;
  logic ro_cache_flush_flush_2_we;
  logic ro_cache_flush_flush_3_qs;
  logic ro_cache_flush_flush_3_wd;
  logic ro_cache_flush_flush_3_we;
  logic ro_cache_flush_flush_4_qs;
  logic ro_cache_flush_flush_4_wd;
  logic ro_cache_flush_flush_4_we;
  logic ro_cache_flush_flush_5_qs;
  logic ro_cache_flush_flush_5_wd;
  logic ro_cache_flush_flush_5_we;
  logic ro_cache_flush_flush_6_qs;
  logic ro_cache_flush_flush_6_wd;
  logic ro_cache_flush_flush_6_we;
  logic ro_cache_flush_flush_7_qs;
  logic ro_cache_flush_flush_7_wd;
  logic ro_cache_flush_flush_7_we;
  logic [31:0] ro_start_addr_low_0_quadrant_0_qs;
  logic [31:0] ro_start_addr_low_0_quadrant_0_wd;
  logic ro_start_addr_low_0_quadrant_0_we;
  logic [15:0] ro_start_addr_high_0_quadrant_0_qs;
  logic [15:0] ro_start_addr_high_0_quadrant_0_wd;
  logic ro_start_addr_high_0_quadrant_0_we;
  logic [31:0] ro_end_addr_low_0_quadrant_0_qs;
  logic [31:0] ro_end_addr_low_0_quadrant_0_wd;
  logic ro_end_addr_low_0_quadrant_0_we;
  logic [15:0] ro_end_addr_high_0_quadrant_0_qs;
  logic [15:0] ro_end_addr_high_0_quadrant_0_wd;
  logic ro_end_addr_high_0_quadrant_0_we;
  logic [31:0] ro_start_addr_low_1_quadrant_0_qs;
  logic [31:0] ro_start_addr_low_1_quadrant_0_wd;
  logic ro_start_addr_low_1_quadrant_0_we;
  logic [15:0] ro_start_addr_high_1_quadrant_0_qs;
  logic [15:0] ro_start_addr_high_1_quadrant_0_wd;
  logic ro_start_addr_high_1_quadrant_0_we;
  logic [31:0] ro_end_addr_low_1_quadrant_0_qs;
  logic [31:0] ro_end_addr_low_1_quadrant_0_wd;
  logic ro_end_addr_low_1_quadrant_0_we;
  logic [15:0] ro_end_addr_high_1_quadrant_0_qs;
  logic [15:0] ro_end_addr_high_1_quadrant_0_wd;
  logic ro_end_addr_high_1_quadrant_0_we;
  logic [31:0] ro_start_addr_low_2_quadrant_0_qs;
  logic [31:0] ro_start_addr_low_2_quadrant_0_wd;
  logic ro_start_addr_low_2_quadrant_0_we;
  logic [15:0] ro_start_addr_high_2_quadrant_0_qs;
  logic [15:0] ro_start_addr_high_2_quadrant_0_wd;
  logic ro_start_addr_high_2_quadrant_0_we;
  logic [31:0] ro_end_addr_low_2_quadrant_0_qs;
  logic [31:0] ro_end_addr_low_2_quadrant_0_wd;
  logic ro_end_addr_low_2_quadrant_0_we;
  logic [15:0] ro_end_addr_high_2_quadrant_0_qs;
  logic [15:0] ro_end_addr_high_2_quadrant_0_wd;
  logic ro_end_addr_high_2_quadrant_0_we;
  logic [31:0] ro_start_addr_low_3_quadrant_0_qs;
  logic [31:0] ro_start_addr_low_3_quadrant_0_wd;
  logic ro_start_addr_low_3_quadrant_0_we;
  logic [15:0] ro_start_addr_high_3_quadrant_0_qs;
  logic [15:0] ro_start_addr_high_3_quadrant_0_wd;
  logic ro_start_addr_high_3_quadrant_0_we;
  logic [31:0] ro_end_addr_low_3_quadrant_0_qs;
  logic [31:0] ro_end_addr_low_3_quadrant_0_wd;
  logic ro_end_addr_low_3_quadrant_0_we;
  logic [15:0] ro_end_addr_high_3_quadrant_0_qs;
  logic [15:0] ro_end_addr_high_3_quadrant_0_wd;
  logic ro_end_addr_high_3_quadrant_0_we;
  logic [31:0] ro_start_addr_low_0_quadrant_1_qs;
  logic [31:0] ro_start_addr_low_0_quadrant_1_wd;
  logic ro_start_addr_low_0_quadrant_1_we;
  logic [15:0] ro_start_addr_high_0_quadrant_1_qs;
  logic [15:0] ro_start_addr_high_0_quadrant_1_wd;
  logic ro_start_addr_high_0_quadrant_1_we;
  logic [31:0] ro_end_addr_low_0_quadrant_1_qs;
  logic [31:0] ro_end_addr_low_0_quadrant_1_wd;
  logic ro_end_addr_low_0_quadrant_1_we;
  logic [15:0] ro_end_addr_high_0_quadrant_1_qs;
  logic [15:0] ro_end_addr_high_0_quadrant_1_wd;
  logic ro_end_addr_high_0_quadrant_1_we;
  logic [31:0] ro_start_addr_low_1_quadrant_1_qs;
  logic [31:0] ro_start_addr_low_1_quadrant_1_wd;
  logic ro_start_addr_low_1_quadrant_1_we;
  logic [15:0] ro_start_addr_high_1_quadrant_1_qs;
  logic [15:0] ro_start_addr_high_1_quadrant_1_wd;
  logic ro_start_addr_high_1_quadrant_1_we;
  logic [31:0] ro_end_addr_low_1_quadrant_1_qs;
  logic [31:0] ro_end_addr_low_1_quadrant_1_wd;
  logic ro_end_addr_low_1_quadrant_1_we;
  logic [15:0] ro_end_addr_high_1_quadrant_1_qs;
  logic [15:0] ro_end_addr_high_1_quadrant_1_wd;
  logic ro_end_addr_high_1_quadrant_1_we;
  logic [31:0] ro_start_addr_low_2_quadrant_1_qs;
  logic [31:0] ro_start_addr_low_2_quadrant_1_wd;
  logic ro_start_addr_low_2_quadrant_1_we;
  logic [15:0] ro_start_addr_high_2_quadrant_1_qs;
  logic [15:0] ro_start_addr_high_2_quadrant_1_wd;
  logic ro_start_addr_high_2_quadrant_1_we;
  logic [31:0] ro_end_addr_low_2_quadrant_1_qs;
  logic [31:0] ro_end_addr_low_2_quadrant_1_wd;
  logic ro_end_addr_low_2_quadrant_1_we;
  logic [15:0] ro_end_addr_high_2_quadrant_1_qs;
  logic [15:0] ro_end_addr_high_2_quadrant_1_wd;
  logic ro_end_addr_high_2_quadrant_1_we;
  logic [31:0] ro_start_addr_low_3_quadrant_1_qs;
  logic [31:0] ro_start_addr_low_3_quadrant_1_wd;
  logic ro_start_addr_low_3_quadrant_1_we;
  logic [15:0] ro_start_addr_high_3_quadrant_1_qs;
  logic [15:0] ro_start_addr_high_3_quadrant_1_wd;
  logic ro_start_addr_high_3_quadrant_1_we;
  logic [31:0] ro_end_addr_low_3_quadrant_1_qs;
  logic [31:0] ro_end_addr_low_3_quadrant_1_wd;
  logic ro_end_addr_low_3_quadrant_1_we;
  logic [15:0] ro_end_addr_high_3_quadrant_1_qs;
  logic [15:0] ro_end_addr_high_3_quadrant_1_wd;
  logic ro_end_addr_high_3_quadrant_1_we;
  logic [31:0] ro_start_addr_low_0_quadrant_2_qs;
  logic [31:0] ro_start_addr_low_0_quadrant_2_wd;
  logic ro_start_addr_low_0_quadrant_2_we;
  logic [15:0] ro_start_addr_high_0_quadrant_2_qs;
  logic [15:0] ro_start_addr_high_0_quadrant_2_wd;
  logic ro_start_addr_high_0_quadrant_2_we;
  logic [31:0] ro_end_addr_low_0_quadrant_2_qs;
  logic [31:0] ro_end_addr_low_0_quadrant_2_wd;
  logic ro_end_addr_low_0_quadrant_2_we;
  logic [15:0] ro_end_addr_high_0_quadrant_2_qs;
  logic [15:0] ro_end_addr_high_0_quadrant_2_wd;
  logic ro_end_addr_high_0_quadrant_2_we;
  logic [31:0] ro_start_addr_low_1_quadrant_2_qs;
  logic [31:0] ro_start_addr_low_1_quadrant_2_wd;
  logic ro_start_addr_low_1_quadrant_2_we;
  logic [15:0] ro_start_addr_high_1_quadrant_2_qs;
  logic [15:0] ro_start_addr_high_1_quadrant_2_wd;
  logic ro_start_addr_high_1_quadrant_2_we;
  logic [31:0] ro_end_addr_low_1_quadrant_2_qs;
  logic [31:0] ro_end_addr_low_1_quadrant_2_wd;
  logic ro_end_addr_low_1_quadrant_2_we;
  logic [15:0] ro_end_addr_high_1_quadrant_2_qs;
  logic [15:0] ro_end_addr_high_1_quadrant_2_wd;
  logic ro_end_addr_high_1_quadrant_2_we;
  logic [31:0] ro_start_addr_low_2_quadrant_2_qs;
  logic [31:0] ro_start_addr_low_2_quadrant_2_wd;
  logic ro_start_addr_low_2_quadrant_2_we;
  logic [15:0] ro_start_addr_high_2_quadrant_2_qs;
  logic [15:0] ro_start_addr_high_2_quadrant_2_wd;
  logic ro_start_addr_high_2_quadrant_2_we;
  logic [31:0] ro_end_addr_low_2_quadrant_2_qs;
  logic [31:0] ro_end_addr_low_2_quadrant_2_wd;
  logic ro_end_addr_low_2_quadrant_2_we;
  logic [15:0] ro_end_addr_high_2_quadrant_2_qs;
  logic [15:0] ro_end_addr_high_2_quadrant_2_wd;
  logic ro_end_addr_high_2_quadrant_2_we;
  logic [31:0] ro_start_addr_low_3_quadrant_2_qs;
  logic [31:0] ro_start_addr_low_3_quadrant_2_wd;
  logic ro_start_addr_low_3_quadrant_2_we;
  logic [15:0] ro_start_addr_high_3_quadrant_2_qs;
  logic [15:0] ro_start_addr_high_3_quadrant_2_wd;
  logic ro_start_addr_high_3_quadrant_2_we;
  logic [31:0] ro_end_addr_low_3_quadrant_2_qs;
  logic [31:0] ro_end_addr_low_3_quadrant_2_wd;
  logic ro_end_addr_low_3_quadrant_2_we;
  logic [15:0] ro_end_addr_high_3_quadrant_2_qs;
  logic [15:0] ro_end_addr_high_3_quadrant_2_wd;
  logic ro_end_addr_high_3_quadrant_2_we;
  logic [31:0] ro_start_addr_low_0_quadrant_3_qs;
  logic [31:0] ro_start_addr_low_0_quadrant_3_wd;
  logic ro_start_addr_low_0_quadrant_3_we;
  logic [15:0] ro_start_addr_high_0_quadrant_3_qs;
  logic [15:0] ro_start_addr_high_0_quadrant_3_wd;
  logic ro_start_addr_high_0_quadrant_3_we;
  logic [31:0] ro_end_addr_low_0_quadrant_3_qs;
  logic [31:0] ro_end_addr_low_0_quadrant_3_wd;
  logic ro_end_addr_low_0_quadrant_3_we;
  logic [15:0] ro_end_addr_high_0_quadrant_3_qs;
  logic [15:0] ro_end_addr_high_0_quadrant_3_wd;
  logic ro_end_addr_high_0_quadrant_3_we;
  logic [31:0] ro_start_addr_low_1_quadrant_3_qs;
  logic [31:0] ro_start_addr_low_1_quadrant_3_wd;
  logic ro_start_addr_low_1_quadrant_3_we;
  logic [15:0] ro_start_addr_high_1_quadrant_3_qs;
  logic [15:0] ro_start_addr_high_1_quadrant_3_wd;
  logic ro_start_addr_high_1_quadrant_3_we;
  logic [31:0] ro_end_addr_low_1_quadrant_3_qs;
  logic [31:0] ro_end_addr_low_1_quadrant_3_wd;
  logic ro_end_addr_low_1_quadrant_3_we;
  logic [15:0] ro_end_addr_high_1_quadrant_3_qs;
  logic [15:0] ro_end_addr_high_1_quadrant_3_wd;
  logic ro_end_addr_high_1_quadrant_3_we;
  logic [31:0] ro_start_addr_low_2_quadrant_3_qs;
  logic [31:0] ro_start_addr_low_2_quadrant_3_wd;
  logic ro_start_addr_low_2_quadrant_3_we;
  logic [15:0] ro_start_addr_high_2_quadrant_3_qs;
  logic [15:0] ro_start_addr_high_2_quadrant_3_wd;
  logic ro_start_addr_high_2_quadrant_3_we;
  logic [31:0] ro_end_addr_low_2_quadrant_3_qs;
  logic [31:0] ro_end_addr_low_2_quadrant_3_wd;
  logic ro_end_addr_low_2_quadrant_3_we;
  logic [15:0] ro_end_addr_high_2_quadrant_3_qs;
  logic [15:0] ro_end_addr_high_2_quadrant_3_wd;
  logic ro_end_addr_high_2_quadrant_3_we;
  logic [31:0] ro_start_addr_low_3_quadrant_3_qs;
  logic [31:0] ro_start_addr_low_3_quadrant_3_wd;
  logic ro_start_addr_low_3_quadrant_3_we;
  logic [15:0] ro_start_addr_high_3_quadrant_3_qs;
  logic [15:0] ro_start_addr_high_3_quadrant_3_wd;
  logic ro_start_addr_high_3_quadrant_3_we;
  logic [31:0] ro_end_addr_low_3_quadrant_3_qs;
  logic [31:0] ro_end_addr_low_3_quadrant_3_wd;
  logic ro_end_addr_low_3_quadrant_3_we;
  logic [15:0] ro_end_addr_high_3_quadrant_3_qs;
  logic [15:0] ro_end_addr_high_3_quadrant_3_wd;
  logic ro_end_addr_high_3_quadrant_3_we;
  logic [31:0] ro_start_addr_low_0_quadrant_4_qs;
  logic [31:0] ro_start_addr_low_0_quadrant_4_wd;
  logic ro_start_addr_low_0_quadrant_4_we;
  logic [15:0] ro_start_addr_high_0_quadrant_4_qs;
  logic [15:0] ro_start_addr_high_0_quadrant_4_wd;
  logic ro_start_addr_high_0_quadrant_4_we;
  logic [31:0] ro_end_addr_low_0_quadrant_4_qs;
  logic [31:0] ro_end_addr_low_0_quadrant_4_wd;
  logic ro_end_addr_low_0_quadrant_4_we;
  logic [15:0] ro_end_addr_high_0_quadrant_4_qs;
  logic [15:0] ro_end_addr_high_0_quadrant_4_wd;
  logic ro_end_addr_high_0_quadrant_4_we;
  logic [31:0] ro_start_addr_low_1_quadrant_4_qs;
  logic [31:0] ro_start_addr_low_1_quadrant_4_wd;
  logic ro_start_addr_low_1_quadrant_4_we;
  logic [15:0] ro_start_addr_high_1_quadrant_4_qs;
  logic [15:0] ro_start_addr_high_1_quadrant_4_wd;
  logic ro_start_addr_high_1_quadrant_4_we;
  logic [31:0] ro_end_addr_low_1_quadrant_4_qs;
  logic [31:0] ro_end_addr_low_1_quadrant_4_wd;
  logic ro_end_addr_low_1_quadrant_4_we;
  logic [15:0] ro_end_addr_high_1_quadrant_4_qs;
  logic [15:0] ro_end_addr_high_1_quadrant_4_wd;
  logic ro_end_addr_high_1_quadrant_4_we;
  logic [31:0] ro_start_addr_low_2_quadrant_4_qs;
  logic [31:0] ro_start_addr_low_2_quadrant_4_wd;
  logic ro_start_addr_low_2_quadrant_4_we;
  logic [15:0] ro_start_addr_high_2_quadrant_4_qs;
  logic [15:0] ro_start_addr_high_2_quadrant_4_wd;
  logic ro_start_addr_high_2_quadrant_4_we;
  logic [31:0] ro_end_addr_low_2_quadrant_4_qs;
  logic [31:0] ro_end_addr_low_2_quadrant_4_wd;
  logic ro_end_addr_low_2_quadrant_4_we;
  logic [15:0] ro_end_addr_high_2_quadrant_4_qs;
  logic [15:0] ro_end_addr_high_2_quadrant_4_wd;
  logic ro_end_addr_high_2_quadrant_4_we;
  logic [31:0] ro_start_addr_low_3_quadrant_4_qs;
  logic [31:0] ro_start_addr_low_3_quadrant_4_wd;
  logic ro_start_addr_low_3_quadrant_4_we;
  logic [15:0] ro_start_addr_high_3_quadrant_4_qs;
  logic [15:0] ro_start_addr_high_3_quadrant_4_wd;
  logic ro_start_addr_high_3_quadrant_4_we;
  logic [31:0] ro_end_addr_low_3_quadrant_4_qs;
  logic [31:0] ro_end_addr_low_3_quadrant_4_wd;
  logic ro_end_addr_low_3_quadrant_4_we;
  logic [15:0] ro_end_addr_high_3_quadrant_4_qs;
  logic [15:0] ro_end_addr_high_3_quadrant_4_wd;
  logic ro_end_addr_high_3_quadrant_4_we;
  logic [31:0] ro_start_addr_low_0_quadrant_5_qs;
  logic [31:0] ro_start_addr_low_0_quadrant_5_wd;
  logic ro_start_addr_low_0_quadrant_5_we;
  logic [15:0] ro_start_addr_high_0_quadrant_5_qs;
  logic [15:0] ro_start_addr_high_0_quadrant_5_wd;
  logic ro_start_addr_high_0_quadrant_5_we;
  logic [31:0] ro_end_addr_low_0_quadrant_5_qs;
  logic [31:0] ro_end_addr_low_0_quadrant_5_wd;
  logic ro_end_addr_low_0_quadrant_5_we;
  logic [15:0] ro_end_addr_high_0_quadrant_5_qs;
  logic [15:0] ro_end_addr_high_0_quadrant_5_wd;
  logic ro_end_addr_high_0_quadrant_5_we;
  logic [31:0] ro_start_addr_low_1_quadrant_5_qs;
  logic [31:0] ro_start_addr_low_1_quadrant_5_wd;
  logic ro_start_addr_low_1_quadrant_5_we;
  logic [15:0] ro_start_addr_high_1_quadrant_5_qs;
  logic [15:0] ro_start_addr_high_1_quadrant_5_wd;
  logic ro_start_addr_high_1_quadrant_5_we;
  logic [31:0] ro_end_addr_low_1_quadrant_5_qs;
  logic [31:0] ro_end_addr_low_1_quadrant_5_wd;
  logic ro_end_addr_low_1_quadrant_5_we;
  logic [15:0] ro_end_addr_high_1_quadrant_5_qs;
  logic [15:0] ro_end_addr_high_1_quadrant_5_wd;
  logic ro_end_addr_high_1_quadrant_5_we;
  logic [31:0] ro_start_addr_low_2_quadrant_5_qs;
  logic [31:0] ro_start_addr_low_2_quadrant_5_wd;
  logic ro_start_addr_low_2_quadrant_5_we;
  logic [15:0] ro_start_addr_high_2_quadrant_5_qs;
  logic [15:0] ro_start_addr_high_2_quadrant_5_wd;
  logic ro_start_addr_high_2_quadrant_5_we;
  logic [31:0] ro_end_addr_low_2_quadrant_5_qs;
  logic [31:0] ro_end_addr_low_2_quadrant_5_wd;
  logic ro_end_addr_low_2_quadrant_5_we;
  logic [15:0] ro_end_addr_high_2_quadrant_5_qs;
  logic [15:0] ro_end_addr_high_2_quadrant_5_wd;
  logic ro_end_addr_high_2_quadrant_5_we;
  logic [31:0] ro_start_addr_low_3_quadrant_5_qs;
  logic [31:0] ro_start_addr_low_3_quadrant_5_wd;
  logic ro_start_addr_low_3_quadrant_5_we;
  logic [15:0] ro_start_addr_high_3_quadrant_5_qs;
  logic [15:0] ro_start_addr_high_3_quadrant_5_wd;
  logic ro_start_addr_high_3_quadrant_5_we;
  logic [31:0] ro_end_addr_low_3_quadrant_5_qs;
  logic [31:0] ro_end_addr_low_3_quadrant_5_wd;
  logic ro_end_addr_low_3_quadrant_5_we;
  logic [15:0] ro_end_addr_high_3_quadrant_5_qs;
  logic [15:0] ro_end_addr_high_3_quadrant_5_wd;
  logic ro_end_addr_high_3_quadrant_5_we;
  logic [31:0] ro_start_addr_low_0_quadrant_6_qs;
  logic [31:0] ro_start_addr_low_0_quadrant_6_wd;
  logic ro_start_addr_low_0_quadrant_6_we;
  logic [15:0] ro_start_addr_high_0_quadrant_6_qs;
  logic [15:0] ro_start_addr_high_0_quadrant_6_wd;
  logic ro_start_addr_high_0_quadrant_6_we;
  logic [31:0] ro_end_addr_low_0_quadrant_6_qs;
  logic [31:0] ro_end_addr_low_0_quadrant_6_wd;
  logic ro_end_addr_low_0_quadrant_6_we;
  logic [15:0] ro_end_addr_high_0_quadrant_6_qs;
  logic [15:0] ro_end_addr_high_0_quadrant_6_wd;
  logic ro_end_addr_high_0_quadrant_6_we;
  logic [31:0] ro_start_addr_low_1_quadrant_6_qs;
  logic [31:0] ro_start_addr_low_1_quadrant_6_wd;
  logic ro_start_addr_low_1_quadrant_6_we;
  logic [15:0] ro_start_addr_high_1_quadrant_6_qs;
  logic [15:0] ro_start_addr_high_1_quadrant_6_wd;
  logic ro_start_addr_high_1_quadrant_6_we;
  logic [31:0] ro_end_addr_low_1_quadrant_6_qs;
  logic [31:0] ro_end_addr_low_1_quadrant_6_wd;
  logic ro_end_addr_low_1_quadrant_6_we;
  logic [15:0] ro_end_addr_high_1_quadrant_6_qs;
  logic [15:0] ro_end_addr_high_1_quadrant_6_wd;
  logic ro_end_addr_high_1_quadrant_6_we;
  logic [31:0] ro_start_addr_low_2_quadrant_6_qs;
  logic [31:0] ro_start_addr_low_2_quadrant_6_wd;
  logic ro_start_addr_low_2_quadrant_6_we;
  logic [15:0] ro_start_addr_high_2_quadrant_6_qs;
  logic [15:0] ro_start_addr_high_2_quadrant_6_wd;
  logic ro_start_addr_high_2_quadrant_6_we;
  logic [31:0] ro_end_addr_low_2_quadrant_6_qs;
  logic [31:0] ro_end_addr_low_2_quadrant_6_wd;
  logic ro_end_addr_low_2_quadrant_6_we;
  logic [15:0] ro_end_addr_high_2_quadrant_6_qs;
  logic [15:0] ro_end_addr_high_2_quadrant_6_wd;
  logic ro_end_addr_high_2_quadrant_6_we;
  logic [31:0] ro_start_addr_low_3_quadrant_6_qs;
  logic [31:0] ro_start_addr_low_3_quadrant_6_wd;
  logic ro_start_addr_low_3_quadrant_6_we;
  logic [15:0] ro_start_addr_high_3_quadrant_6_qs;
  logic [15:0] ro_start_addr_high_3_quadrant_6_wd;
  logic ro_start_addr_high_3_quadrant_6_we;
  logic [31:0] ro_end_addr_low_3_quadrant_6_qs;
  logic [31:0] ro_end_addr_low_3_quadrant_6_wd;
  logic ro_end_addr_low_3_quadrant_6_we;
  logic [15:0] ro_end_addr_high_3_quadrant_6_qs;
  logic [15:0] ro_end_addr_high_3_quadrant_6_wd;
  logic ro_end_addr_high_3_quadrant_6_we;
  logic [31:0] ro_start_addr_low_0_quadrant_7_qs;
  logic [31:0] ro_start_addr_low_0_quadrant_7_wd;
  logic ro_start_addr_low_0_quadrant_7_we;
  logic [15:0] ro_start_addr_high_0_quadrant_7_qs;
  logic [15:0] ro_start_addr_high_0_quadrant_7_wd;
  logic ro_start_addr_high_0_quadrant_7_we;
  logic [31:0] ro_end_addr_low_0_quadrant_7_qs;
  logic [31:0] ro_end_addr_low_0_quadrant_7_wd;
  logic ro_end_addr_low_0_quadrant_7_we;
  logic [15:0] ro_end_addr_high_0_quadrant_7_qs;
  logic [15:0] ro_end_addr_high_0_quadrant_7_wd;
  logic ro_end_addr_high_0_quadrant_7_we;
  logic [31:0] ro_start_addr_low_1_quadrant_7_qs;
  logic [31:0] ro_start_addr_low_1_quadrant_7_wd;
  logic ro_start_addr_low_1_quadrant_7_we;
  logic [15:0] ro_start_addr_high_1_quadrant_7_qs;
  logic [15:0] ro_start_addr_high_1_quadrant_7_wd;
  logic ro_start_addr_high_1_quadrant_7_we;
  logic [31:0] ro_end_addr_low_1_quadrant_7_qs;
  logic [31:0] ro_end_addr_low_1_quadrant_7_wd;
  logic ro_end_addr_low_1_quadrant_7_we;
  logic [15:0] ro_end_addr_high_1_quadrant_7_qs;
  logic [15:0] ro_end_addr_high_1_quadrant_7_wd;
  logic ro_end_addr_high_1_quadrant_7_we;
  logic [31:0] ro_start_addr_low_2_quadrant_7_qs;
  logic [31:0] ro_start_addr_low_2_quadrant_7_wd;
  logic ro_start_addr_low_2_quadrant_7_we;
  logic [15:0] ro_start_addr_high_2_quadrant_7_qs;
  logic [15:0] ro_start_addr_high_2_quadrant_7_wd;
  logic ro_start_addr_high_2_quadrant_7_we;
  logic [31:0] ro_end_addr_low_2_quadrant_7_qs;
  logic [31:0] ro_end_addr_low_2_quadrant_7_wd;
  logic ro_end_addr_low_2_quadrant_7_we;
  logic [15:0] ro_end_addr_high_2_quadrant_7_qs;
  logic [15:0] ro_end_addr_high_2_quadrant_7_wd;
  logic ro_end_addr_high_2_quadrant_7_we;
  logic [31:0] ro_start_addr_low_3_quadrant_7_qs;
  logic [31:0] ro_start_addr_low_3_quadrant_7_wd;
  logic ro_start_addr_low_3_quadrant_7_we;
  logic [15:0] ro_start_addr_high_3_quadrant_7_qs;
  logic [15:0] ro_start_addr_high_3_quadrant_7_wd;
  logic ro_start_addr_high_3_quadrant_7_we;
  logic [31:0] ro_end_addr_low_3_quadrant_7_qs;
  logic [31:0] ro_end_addr_low_3_quadrant_7_wd;
  logic ro_end_addr_low_3_quadrant_7_we;
  logic [15:0] ro_end_addr_high_3_quadrant_7_qs;
  logic [15:0] ro_end_addr_high_3_quadrant_7_wd;
  logic ro_end_addr_high_3_quadrant_7_we;

  // Register instances
  // R[intr_state]: V(False)

  //   F[ecc_uncorrectable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_ecc_uncorrectable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_ecc_uncorrectable_we),
    .wd     (intr_state_ecc_uncorrectable_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.ecc_uncorrectable.de),
    .d      (hw2reg.intr_state.ecc_uncorrectable.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.ecc_uncorrectable.q ),

    // to register interface (read)
    .qs     (intr_state_ecc_uncorrectable_qs)
  );


  //   F[ecc_correctable]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_ecc_correctable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_ecc_correctable_we),
    .wd     (intr_state_ecc_correctable_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.ecc_correctable.de),
    .d      (hw2reg.intr_state.ecc_correctable.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.ecc_correctable.q ),

    // to register interface (read)
    .qs     (intr_state_ecc_correctable_qs)
  );


  // R[intr_enable]: V(False)

  //   F[ecc_uncorrectable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_ecc_uncorrectable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_ecc_uncorrectable_we),
    .wd     (intr_enable_ecc_uncorrectable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.ecc_uncorrectable.q ),

    // to register interface (read)
    .qs     (intr_enable_ecc_uncorrectable_qs)
  );


  //   F[ecc_correctable]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_ecc_correctable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_ecc_correctable_we),
    .wd     (intr_enable_ecc_correctable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.ecc_correctable.q ),

    // to register interface (read)
    .qs     (intr_enable_ecc_correctable_qs)
  );


  // R[intr_test]: V(True)

  //   F[ecc_uncorrectable]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_ecc_uncorrectable (
    .re     (1'b0),
    .we     (intr_test_ecc_uncorrectable_we),
    .wd     (intr_test_ecc_uncorrectable_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.ecc_uncorrectable.qe),
    .q      (reg2hw.intr_test.ecc_uncorrectable.q ),
    .qs     ()
  );


  //   F[ecc_correctable]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_ecc_correctable (
    .re     (1'b0),
    .we     (intr_test_ecc_correctable_we),
    .wd     (intr_test_ecc_correctable_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.ecc_correctable.qe),
    .q      (reg2hw.intr_test.ecc_correctable.q ),
    .qs     ()
  );


  // R[version]: V(False)

  // constant-only read
  assign version_qs = 16'h1;


  // R[chip_id]: V(True)

  prim_subreg_ext #(
    .DW    (2)
  ) u_chip_id (
    .re     (chip_id_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.chip_id.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (chip_id_qs)
  );



  // Subregister 0 of Multireg scratch
  // R[scratch_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_scratch_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (scratch_0_we),
    .wd     (scratch_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (scratch_0_qs)
  );

  // Subregister 1 of Multireg scratch
  // R[scratch_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_scratch_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (scratch_1_we),
    .wd     (scratch_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (scratch_1_qs)
  );

  // Subregister 2 of Multireg scratch
  // R[scratch_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_scratch_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (scratch_2_we),
    .wd     (scratch_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (scratch_2_qs)
  );

  // Subregister 3 of Multireg scratch
  // R[scratch_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_scratch_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (scratch_3_we),
    .wd     (scratch_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (scratch_3_qs)
  );


  // R[boot_mode]: V(True)

  prim_subreg_ext #(
    .DW    (2)
  ) u_boot_mode (
    .re     (boot_mode_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.boot_mode.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (boot_mode_qs)
  );



  // Subregister 0 of Multireg pad
  // R[pad_0]: V(False)

  // F[slw_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_0_slw_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_0_slw_0_we),
    .wd     (pad_0_slw_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[0].slw.q ),

    // to register interface (read)
    .qs     (pad_0_slw_0_qs)
  );


  // F[smt_0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_0_smt_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_0_smt_0_we),
    .wd     (pad_0_smt_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[0].smt.q ),

    // to register interface (read)
    .qs     (pad_0_smt_0_qs)
  );


  // F[drv_0]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_0_drv_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_0_drv_0_we),
    .wd     (pad_0_drv_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[0].drv.q ),

    // to register interface (read)
    .qs     (pad_0_drv_0_qs)
  );


  // Subregister 1 of Multireg pad
  // R[pad_1]: V(False)

  // F[slw_1]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_1_slw_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_1_slw_1_we),
    .wd     (pad_1_slw_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[1].slw.q ),

    // to register interface (read)
    .qs     (pad_1_slw_1_qs)
  );


  // F[smt_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_1_smt_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_1_smt_1_we),
    .wd     (pad_1_smt_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[1].smt.q ),

    // to register interface (read)
    .qs     (pad_1_smt_1_qs)
  );


  // F[drv_1]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_1_drv_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_1_drv_1_we),
    .wd     (pad_1_drv_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[1].drv.q ),

    // to register interface (read)
    .qs     (pad_1_drv_1_qs)
  );


  // Subregister 2 of Multireg pad
  // R[pad_2]: V(False)

  // F[slw_2]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_2_slw_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_2_slw_2_we),
    .wd     (pad_2_slw_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[2].slw.q ),

    // to register interface (read)
    .qs     (pad_2_slw_2_qs)
  );


  // F[smt_2]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_2_smt_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_2_smt_2_we),
    .wd     (pad_2_smt_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[2].smt.q ),

    // to register interface (read)
    .qs     (pad_2_smt_2_qs)
  );


  // F[drv_2]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_2_drv_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_2_drv_2_we),
    .wd     (pad_2_drv_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[2].drv.q ),

    // to register interface (read)
    .qs     (pad_2_drv_2_qs)
  );


  // Subregister 3 of Multireg pad
  // R[pad_3]: V(False)

  // F[slw_3]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_3_slw_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_3_slw_3_we),
    .wd     (pad_3_slw_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[3].slw.q ),

    // to register interface (read)
    .qs     (pad_3_slw_3_qs)
  );


  // F[smt_3]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_3_smt_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_3_smt_3_we),
    .wd     (pad_3_smt_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[3].smt.q ),

    // to register interface (read)
    .qs     (pad_3_smt_3_qs)
  );


  // F[drv_3]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_3_drv_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_3_drv_3_we),
    .wd     (pad_3_drv_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[3].drv.q ),

    // to register interface (read)
    .qs     (pad_3_drv_3_qs)
  );


  // Subregister 4 of Multireg pad
  // R[pad_4]: V(False)

  // F[slw_4]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_4_slw_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_4_slw_4_we),
    .wd     (pad_4_slw_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[4].slw.q ),

    // to register interface (read)
    .qs     (pad_4_slw_4_qs)
  );


  // F[smt_4]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_4_smt_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_4_smt_4_we),
    .wd     (pad_4_smt_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[4].smt.q ),

    // to register interface (read)
    .qs     (pad_4_smt_4_qs)
  );


  // F[drv_4]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_4_drv_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_4_drv_4_we),
    .wd     (pad_4_drv_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[4].drv.q ),

    // to register interface (read)
    .qs     (pad_4_drv_4_qs)
  );


  // Subregister 5 of Multireg pad
  // R[pad_5]: V(False)

  // F[slw_5]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_5_slw_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_5_slw_5_we),
    .wd     (pad_5_slw_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[5].slw.q ),

    // to register interface (read)
    .qs     (pad_5_slw_5_qs)
  );


  // F[smt_5]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_5_smt_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_5_smt_5_we),
    .wd     (pad_5_smt_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[5].smt.q ),

    // to register interface (read)
    .qs     (pad_5_smt_5_qs)
  );


  // F[drv_5]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_5_drv_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_5_drv_5_we),
    .wd     (pad_5_drv_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[5].drv.q ),

    // to register interface (read)
    .qs     (pad_5_drv_5_qs)
  );


  // Subregister 6 of Multireg pad
  // R[pad_6]: V(False)

  // F[slw_6]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_6_slw_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_6_slw_6_we),
    .wd     (pad_6_slw_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[6].slw.q ),

    // to register interface (read)
    .qs     (pad_6_slw_6_qs)
  );


  // F[smt_6]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_6_smt_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_6_smt_6_we),
    .wd     (pad_6_smt_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[6].smt.q ),

    // to register interface (read)
    .qs     (pad_6_smt_6_qs)
  );


  // F[drv_6]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_6_drv_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_6_drv_6_we),
    .wd     (pad_6_drv_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[6].drv.q ),

    // to register interface (read)
    .qs     (pad_6_drv_6_qs)
  );


  // Subregister 7 of Multireg pad
  // R[pad_7]: V(False)

  // F[slw_7]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_7_slw_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_7_slw_7_we),
    .wd     (pad_7_slw_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[7].slw.q ),

    // to register interface (read)
    .qs     (pad_7_slw_7_qs)
  );


  // F[smt_7]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_7_smt_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_7_smt_7_we),
    .wd     (pad_7_smt_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[7].smt.q ),

    // to register interface (read)
    .qs     (pad_7_smt_7_qs)
  );


  // F[drv_7]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_7_drv_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_7_drv_7_we),
    .wd     (pad_7_drv_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[7].drv.q ),

    // to register interface (read)
    .qs     (pad_7_drv_7_qs)
  );


  // Subregister 8 of Multireg pad
  // R[pad_8]: V(False)

  // F[slw_8]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_8_slw_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_8_slw_8_we),
    .wd     (pad_8_slw_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[8].slw.q ),

    // to register interface (read)
    .qs     (pad_8_slw_8_qs)
  );


  // F[smt_8]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_8_smt_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_8_smt_8_we),
    .wd     (pad_8_smt_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[8].smt.q ),

    // to register interface (read)
    .qs     (pad_8_smt_8_qs)
  );


  // F[drv_8]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_8_drv_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_8_drv_8_we),
    .wd     (pad_8_drv_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[8].drv.q ),

    // to register interface (read)
    .qs     (pad_8_drv_8_qs)
  );


  // Subregister 9 of Multireg pad
  // R[pad_9]: V(False)

  // F[slw_9]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_9_slw_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_9_slw_9_we),
    .wd     (pad_9_slw_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[9].slw.q ),

    // to register interface (read)
    .qs     (pad_9_slw_9_qs)
  );


  // F[smt_9]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_9_smt_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_9_smt_9_we),
    .wd     (pad_9_smt_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[9].smt.q ),

    // to register interface (read)
    .qs     (pad_9_smt_9_qs)
  );


  // F[drv_9]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_9_drv_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_9_drv_9_we),
    .wd     (pad_9_drv_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[9].drv.q ),

    // to register interface (read)
    .qs     (pad_9_drv_9_qs)
  );


  // Subregister 10 of Multireg pad
  // R[pad_10]: V(False)

  // F[slw_10]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_10_slw_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_10_slw_10_we),
    .wd     (pad_10_slw_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[10].slw.q ),

    // to register interface (read)
    .qs     (pad_10_slw_10_qs)
  );


  // F[smt_10]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_10_smt_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_10_smt_10_we),
    .wd     (pad_10_smt_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[10].smt.q ),

    // to register interface (read)
    .qs     (pad_10_smt_10_qs)
  );


  // F[drv_10]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_10_drv_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_10_drv_10_we),
    .wd     (pad_10_drv_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[10].drv.q ),

    // to register interface (read)
    .qs     (pad_10_drv_10_qs)
  );


  // Subregister 11 of Multireg pad
  // R[pad_11]: V(False)

  // F[slw_11]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_11_slw_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_11_slw_11_we),
    .wd     (pad_11_slw_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[11].slw.q ),

    // to register interface (read)
    .qs     (pad_11_slw_11_qs)
  );


  // F[smt_11]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_11_smt_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_11_smt_11_we),
    .wd     (pad_11_smt_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[11].smt.q ),

    // to register interface (read)
    .qs     (pad_11_smt_11_qs)
  );


  // F[drv_11]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_11_drv_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_11_drv_11_we),
    .wd     (pad_11_drv_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[11].drv.q ),

    // to register interface (read)
    .qs     (pad_11_drv_11_qs)
  );


  // Subregister 12 of Multireg pad
  // R[pad_12]: V(False)

  // F[slw_12]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_12_slw_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_12_slw_12_we),
    .wd     (pad_12_slw_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[12].slw.q ),

    // to register interface (read)
    .qs     (pad_12_slw_12_qs)
  );


  // F[smt_12]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_12_smt_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_12_smt_12_we),
    .wd     (pad_12_smt_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[12].smt.q ),

    // to register interface (read)
    .qs     (pad_12_smt_12_qs)
  );


  // F[drv_12]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_12_drv_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_12_drv_12_we),
    .wd     (pad_12_drv_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[12].drv.q ),

    // to register interface (read)
    .qs     (pad_12_drv_12_qs)
  );


  // Subregister 13 of Multireg pad
  // R[pad_13]: V(False)

  // F[slw_13]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_13_slw_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_13_slw_13_we),
    .wd     (pad_13_slw_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[13].slw.q ),

    // to register interface (read)
    .qs     (pad_13_slw_13_qs)
  );


  // F[smt_13]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_13_smt_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_13_smt_13_we),
    .wd     (pad_13_smt_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[13].smt.q ),

    // to register interface (read)
    .qs     (pad_13_smt_13_qs)
  );


  // F[drv_13]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_13_drv_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_13_drv_13_we),
    .wd     (pad_13_drv_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[13].drv.q ),

    // to register interface (read)
    .qs     (pad_13_drv_13_qs)
  );


  // Subregister 14 of Multireg pad
  // R[pad_14]: V(False)

  // F[slw_14]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_14_slw_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_14_slw_14_we),
    .wd     (pad_14_slw_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[14].slw.q ),

    // to register interface (read)
    .qs     (pad_14_slw_14_qs)
  );


  // F[smt_14]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_14_smt_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_14_smt_14_we),
    .wd     (pad_14_smt_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[14].smt.q ),

    // to register interface (read)
    .qs     (pad_14_smt_14_qs)
  );


  // F[drv_14]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_14_drv_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_14_drv_14_we),
    .wd     (pad_14_drv_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[14].drv.q ),

    // to register interface (read)
    .qs     (pad_14_drv_14_qs)
  );


  // Subregister 15 of Multireg pad
  // R[pad_15]: V(False)

  // F[slw_15]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_15_slw_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_15_slw_15_we),
    .wd     (pad_15_slw_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[15].slw.q ),

    // to register interface (read)
    .qs     (pad_15_slw_15_qs)
  );


  // F[smt_15]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_15_smt_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_15_smt_15_we),
    .wd     (pad_15_smt_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[15].smt.q ),

    // to register interface (read)
    .qs     (pad_15_smt_15_qs)
  );


  // F[drv_15]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_15_drv_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_15_drv_15_we),
    .wd     (pad_15_drv_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[15].drv.q ),

    // to register interface (read)
    .qs     (pad_15_drv_15_qs)
  );


  // Subregister 16 of Multireg pad
  // R[pad_16]: V(False)

  // F[slw_16]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_16_slw_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_16_slw_16_we),
    .wd     (pad_16_slw_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[16].slw.q ),

    // to register interface (read)
    .qs     (pad_16_slw_16_qs)
  );


  // F[smt_16]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_16_smt_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_16_smt_16_we),
    .wd     (pad_16_smt_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[16].smt.q ),

    // to register interface (read)
    .qs     (pad_16_smt_16_qs)
  );


  // F[drv_16]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_16_drv_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_16_drv_16_we),
    .wd     (pad_16_drv_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[16].drv.q ),

    // to register interface (read)
    .qs     (pad_16_drv_16_qs)
  );


  // Subregister 17 of Multireg pad
  // R[pad_17]: V(False)

  // F[slw_17]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_17_slw_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_17_slw_17_we),
    .wd     (pad_17_slw_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[17].slw.q ),

    // to register interface (read)
    .qs     (pad_17_slw_17_qs)
  );


  // F[smt_17]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_17_smt_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_17_smt_17_we),
    .wd     (pad_17_smt_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[17].smt.q ),

    // to register interface (read)
    .qs     (pad_17_smt_17_qs)
  );


  // F[drv_17]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_17_drv_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_17_drv_17_we),
    .wd     (pad_17_drv_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[17].drv.q ),

    // to register interface (read)
    .qs     (pad_17_drv_17_qs)
  );


  // Subregister 18 of Multireg pad
  // R[pad_18]: V(False)

  // F[slw_18]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_18_slw_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_18_slw_18_we),
    .wd     (pad_18_slw_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[18].slw.q ),

    // to register interface (read)
    .qs     (pad_18_slw_18_qs)
  );


  // F[smt_18]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_18_smt_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_18_smt_18_we),
    .wd     (pad_18_smt_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[18].smt.q ),

    // to register interface (read)
    .qs     (pad_18_smt_18_qs)
  );


  // F[drv_18]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_18_drv_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_18_drv_18_we),
    .wd     (pad_18_drv_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[18].drv.q ),

    // to register interface (read)
    .qs     (pad_18_drv_18_qs)
  );


  // Subregister 19 of Multireg pad
  // R[pad_19]: V(False)

  // F[slw_19]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_19_slw_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_19_slw_19_we),
    .wd     (pad_19_slw_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[19].slw.q ),

    // to register interface (read)
    .qs     (pad_19_slw_19_qs)
  );


  // F[smt_19]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_19_smt_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_19_smt_19_we),
    .wd     (pad_19_smt_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[19].smt.q ),

    // to register interface (read)
    .qs     (pad_19_smt_19_qs)
  );


  // F[drv_19]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_19_drv_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_19_drv_19_we),
    .wd     (pad_19_drv_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[19].drv.q ),

    // to register interface (read)
    .qs     (pad_19_drv_19_qs)
  );


  // Subregister 20 of Multireg pad
  // R[pad_20]: V(False)

  // F[slw_20]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_20_slw_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_20_slw_20_we),
    .wd     (pad_20_slw_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[20].slw.q ),

    // to register interface (read)
    .qs     (pad_20_slw_20_qs)
  );


  // F[smt_20]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_20_smt_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_20_smt_20_we),
    .wd     (pad_20_smt_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[20].smt.q ),

    // to register interface (read)
    .qs     (pad_20_smt_20_qs)
  );


  // F[drv_20]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_20_drv_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_20_drv_20_we),
    .wd     (pad_20_drv_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[20].drv.q ),

    // to register interface (read)
    .qs     (pad_20_drv_20_qs)
  );


  // Subregister 21 of Multireg pad
  // R[pad_21]: V(False)

  // F[slw_21]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_21_slw_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_21_slw_21_we),
    .wd     (pad_21_slw_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[21].slw.q ),

    // to register interface (read)
    .qs     (pad_21_slw_21_qs)
  );


  // F[smt_21]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_21_smt_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_21_smt_21_we),
    .wd     (pad_21_smt_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[21].smt.q ),

    // to register interface (read)
    .qs     (pad_21_smt_21_qs)
  );


  // F[drv_21]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_21_drv_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_21_drv_21_we),
    .wd     (pad_21_drv_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[21].drv.q ),

    // to register interface (read)
    .qs     (pad_21_drv_21_qs)
  );


  // Subregister 22 of Multireg pad
  // R[pad_22]: V(False)

  // F[slw_22]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_22_slw_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_22_slw_22_we),
    .wd     (pad_22_slw_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[22].slw.q ),

    // to register interface (read)
    .qs     (pad_22_slw_22_qs)
  );


  // F[smt_22]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_22_smt_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_22_smt_22_we),
    .wd     (pad_22_smt_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[22].smt.q ),

    // to register interface (read)
    .qs     (pad_22_smt_22_qs)
  );


  // F[drv_22]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_22_drv_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_22_drv_22_we),
    .wd     (pad_22_drv_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[22].drv.q ),

    // to register interface (read)
    .qs     (pad_22_drv_22_qs)
  );


  // Subregister 23 of Multireg pad
  // R[pad_23]: V(False)

  // F[slw_23]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_23_slw_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_23_slw_23_we),
    .wd     (pad_23_slw_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[23].slw.q ),

    // to register interface (read)
    .qs     (pad_23_slw_23_qs)
  );


  // F[smt_23]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_23_smt_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_23_smt_23_we),
    .wd     (pad_23_smt_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[23].smt.q ),

    // to register interface (read)
    .qs     (pad_23_smt_23_qs)
  );


  // F[drv_23]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_23_drv_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_23_drv_23_we),
    .wd     (pad_23_drv_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[23].drv.q ),

    // to register interface (read)
    .qs     (pad_23_drv_23_qs)
  );


  // Subregister 24 of Multireg pad
  // R[pad_24]: V(False)

  // F[slw_24]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_24_slw_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_24_slw_24_we),
    .wd     (pad_24_slw_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[24].slw.q ),

    // to register interface (read)
    .qs     (pad_24_slw_24_qs)
  );


  // F[smt_24]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_24_smt_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_24_smt_24_we),
    .wd     (pad_24_smt_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[24].smt.q ),

    // to register interface (read)
    .qs     (pad_24_smt_24_qs)
  );


  // F[drv_24]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_24_drv_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_24_drv_24_we),
    .wd     (pad_24_drv_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[24].drv.q ),

    // to register interface (read)
    .qs     (pad_24_drv_24_qs)
  );


  // Subregister 25 of Multireg pad
  // R[pad_25]: V(False)

  // F[slw_25]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_25_slw_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_25_slw_25_we),
    .wd     (pad_25_slw_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[25].slw.q ),

    // to register interface (read)
    .qs     (pad_25_slw_25_qs)
  );


  // F[smt_25]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_25_smt_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_25_smt_25_we),
    .wd     (pad_25_smt_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[25].smt.q ),

    // to register interface (read)
    .qs     (pad_25_smt_25_qs)
  );


  // F[drv_25]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_25_drv_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_25_drv_25_we),
    .wd     (pad_25_drv_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[25].drv.q ),

    // to register interface (read)
    .qs     (pad_25_drv_25_qs)
  );


  // Subregister 26 of Multireg pad
  // R[pad_26]: V(False)

  // F[slw_26]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_26_slw_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_26_slw_26_we),
    .wd     (pad_26_slw_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[26].slw.q ),

    // to register interface (read)
    .qs     (pad_26_slw_26_qs)
  );


  // F[smt_26]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_26_smt_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_26_smt_26_we),
    .wd     (pad_26_smt_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[26].smt.q ),

    // to register interface (read)
    .qs     (pad_26_smt_26_qs)
  );


  // F[drv_26]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_26_drv_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_26_drv_26_we),
    .wd     (pad_26_drv_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[26].drv.q ),

    // to register interface (read)
    .qs     (pad_26_drv_26_qs)
  );


  // Subregister 27 of Multireg pad
  // R[pad_27]: V(False)

  // F[slw_27]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_27_slw_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_27_slw_27_we),
    .wd     (pad_27_slw_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[27].slw.q ),

    // to register interface (read)
    .qs     (pad_27_slw_27_qs)
  );


  // F[smt_27]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_27_smt_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_27_smt_27_we),
    .wd     (pad_27_smt_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[27].smt.q ),

    // to register interface (read)
    .qs     (pad_27_smt_27_qs)
  );


  // F[drv_27]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_27_drv_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_27_drv_27_we),
    .wd     (pad_27_drv_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[27].drv.q ),

    // to register interface (read)
    .qs     (pad_27_drv_27_qs)
  );


  // Subregister 28 of Multireg pad
  // R[pad_28]: V(False)

  // F[slw_28]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_28_slw_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_28_slw_28_we),
    .wd     (pad_28_slw_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[28].slw.q ),

    // to register interface (read)
    .qs     (pad_28_slw_28_qs)
  );


  // F[smt_28]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_28_smt_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_28_smt_28_we),
    .wd     (pad_28_smt_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[28].smt.q ),

    // to register interface (read)
    .qs     (pad_28_smt_28_qs)
  );


  // F[drv_28]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_28_drv_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_28_drv_28_we),
    .wd     (pad_28_drv_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[28].drv.q ),

    // to register interface (read)
    .qs     (pad_28_drv_28_qs)
  );


  // Subregister 29 of Multireg pad
  // R[pad_29]: V(False)

  // F[slw_29]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_29_slw_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_29_slw_29_we),
    .wd     (pad_29_slw_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[29].slw.q ),

    // to register interface (read)
    .qs     (pad_29_slw_29_qs)
  );


  // F[smt_29]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_29_smt_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_29_smt_29_we),
    .wd     (pad_29_smt_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[29].smt.q ),

    // to register interface (read)
    .qs     (pad_29_smt_29_qs)
  );


  // F[drv_29]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_29_drv_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_29_drv_29_we),
    .wd     (pad_29_drv_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[29].drv.q ),

    // to register interface (read)
    .qs     (pad_29_drv_29_qs)
  );


  // Subregister 30 of Multireg pad
  // R[pad_30]: V(False)

  // F[slw_30]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_30_slw_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_30_slw_30_we),
    .wd     (pad_30_slw_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[30].slw.q ),

    // to register interface (read)
    .qs     (pad_30_slw_30_qs)
  );


  // F[smt_30]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pad_30_smt_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_30_smt_30_we),
    .wd     (pad_30_smt_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[30].smt.q ),

    // to register interface (read)
    .qs     (pad_30_smt_30_qs)
  );


  // F[drv_30]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_pad_30_drv_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pad_30_drv_30_we),
    .wd     (pad_30_drv_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pad[30].drv.q ),

    // to register interface (read)
    .qs     (pad_30_drv_30_qs)
  );




  // Subregister 0 of Multireg isolate
  // R[isolate_0]: V(False)

  // F[isolate_0]: 4:0
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h1f)
  ) u_isolate_0_isolate_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (isolate_0_isolate_0_we),
    .wd     (isolate_0_isolate_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.isolate[0].q ),

    // to register interface (read)
    .qs     (isolate_0_isolate_0_qs)
  );


  // F[isolate_1]: 9:5
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h1f)
  ) u_isolate_0_isolate_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (isolate_0_isolate_1_we),
    .wd     (isolate_0_isolate_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.isolate[1].q ),

    // to register interface (read)
    .qs     (isolate_0_isolate_1_qs)
  );


  // F[isolate_2]: 14:10
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h1f)
  ) u_isolate_0_isolate_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (isolate_0_isolate_2_we),
    .wd     (isolate_0_isolate_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.isolate[2].q ),

    // to register interface (read)
    .qs     (isolate_0_isolate_2_qs)
  );


  // F[isolate_3]: 19:15
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h1f)
  ) u_isolate_0_isolate_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (isolate_0_isolate_3_we),
    .wd     (isolate_0_isolate_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.isolate[3].q ),

    // to register interface (read)
    .qs     (isolate_0_isolate_3_qs)
  );


  // F[isolate_4]: 24:20
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h1f)
  ) u_isolate_0_isolate_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (isolate_0_isolate_4_we),
    .wd     (isolate_0_isolate_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.isolate[4].q ),

    // to register interface (read)
    .qs     (isolate_0_isolate_4_qs)
  );


  // F[isolate_5]: 29:25
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h1f)
  ) u_isolate_0_isolate_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (isolate_0_isolate_5_we),
    .wd     (isolate_0_isolate_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.isolate[5].q ),

    // to register interface (read)
    .qs     (isolate_0_isolate_5_qs)
  );


  // Subregister 6 of Multireg isolate
  // R[isolate_1]: V(False)

  // F[isolate_6]: 4:0
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h1f)
  ) u_isolate_1_isolate_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (isolate_1_isolate_6_we),
    .wd     (isolate_1_isolate_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.isolate[6].q ),

    // to register interface (read)
    .qs     (isolate_1_isolate_6_qs)
  );


  // F[isolate_7]: 9:5
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h1f)
  ) u_isolate_1_isolate_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (isolate_1_isolate_7_we),
    .wd     (isolate_1_isolate_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.isolate[7].q ),

    // to register interface (read)
    .qs     (isolate_1_isolate_7_qs)
  );




  // Subregister 0 of Multireg isolated
  // R[isolated_0]: V(True)

  // F[isolated_0]: 4:0
  prim_subreg_ext #(
    .DW    (5)
  ) u_isolated_0_isolated_0 (
    .re     (isolated_0_isolated_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_0_isolated_0_qs)
  );


  // F[isolated_1]: 9:5
  prim_subreg_ext #(
    .DW    (5)
  ) u_isolated_0_isolated_1 (
    .re     (isolated_0_isolated_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_0_isolated_1_qs)
  );


  // F[isolated_2]: 14:10
  prim_subreg_ext #(
    .DW    (5)
  ) u_isolated_0_isolated_2 (
    .re     (isolated_0_isolated_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_0_isolated_2_qs)
  );


  // F[isolated_3]: 19:15
  prim_subreg_ext #(
    .DW    (5)
  ) u_isolated_0_isolated_3 (
    .re     (isolated_0_isolated_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_0_isolated_3_qs)
  );


  // F[isolated_4]: 24:20
  prim_subreg_ext #(
    .DW    (5)
  ) u_isolated_0_isolated_4 (
    .re     (isolated_0_isolated_4_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[4].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_0_isolated_4_qs)
  );


  // F[isolated_5]: 29:25
  prim_subreg_ext #(
    .DW    (5)
  ) u_isolated_0_isolated_5 (
    .re     (isolated_0_isolated_5_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[5].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_0_isolated_5_qs)
  );


  // Subregister 6 of Multireg isolated
  // R[isolated_1]: V(True)

  // F[isolated_6]: 4:0
  prim_subreg_ext #(
    .DW    (5)
  ) u_isolated_1_isolated_6 (
    .re     (isolated_1_isolated_6_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[6].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_1_isolated_6_qs)
  );


  // F[isolated_7]: 9:5
  prim_subreg_ext #(
    .DW    (5)
  ) u_isolated_1_isolated_7 (
    .re     (isolated_1_isolated_7_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated[7].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_1_isolated_7_qs)
  );




  // Subregister 0 of Multireg ro_cache_enable
  // R[ro_cache_enable]: V(False)

  // F[enable_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_enable_enable_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_enable_enable_0_we),
    .wd     (ro_cache_enable_enable_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_enable[0].q ),

    // to register interface (read)
    .qs     (ro_cache_enable_enable_0_qs)
  );


  // F[enable_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_enable_enable_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_enable_enable_1_we),
    .wd     (ro_cache_enable_enable_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_enable[1].q ),

    // to register interface (read)
    .qs     (ro_cache_enable_enable_1_qs)
  );


  // F[enable_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_enable_enable_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_enable_enable_2_we),
    .wd     (ro_cache_enable_enable_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_enable[2].q ),

    // to register interface (read)
    .qs     (ro_cache_enable_enable_2_qs)
  );


  // F[enable_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_enable_enable_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_enable_enable_3_we),
    .wd     (ro_cache_enable_enable_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_enable[3].q ),

    // to register interface (read)
    .qs     (ro_cache_enable_enable_3_qs)
  );


  // F[enable_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_enable_enable_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_enable_enable_4_we),
    .wd     (ro_cache_enable_enable_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_enable[4].q ),

    // to register interface (read)
    .qs     (ro_cache_enable_enable_4_qs)
  );


  // F[enable_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_enable_enable_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_enable_enable_5_we),
    .wd     (ro_cache_enable_enable_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_enable[5].q ),

    // to register interface (read)
    .qs     (ro_cache_enable_enable_5_qs)
  );


  // F[enable_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_enable_enable_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_enable_enable_6_we),
    .wd     (ro_cache_enable_enable_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_enable[6].q ),

    // to register interface (read)
    .qs     (ro_cache_enable_enable_6_qs)
  );


  // F[enable_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_enable_enable_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_enable_enable_7_we),
    .wd     (ro_cache_enable_enable_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_enable[7].q ),

    // to register interface (read)
    .qs     (ro_cache_enable_enable_7_qs)
  );




  // Subregister 0 of Multireg ro_cache_flush
  // R[ro_cache_flush]: V(False)

  // F[flush_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_flush_flush_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_flush_flush_0_we),
    .wd     (ro_cache_flush_flush_0_wd),

    // from internal hardware
    .de     (hw2reg.ro_cache_flush[0].de),
    .d      (hw2reg.ro_cache_flush[0].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_flush[0].q ),

    // to register interface (read)
    .qs     (ro_cache_flush_flush_0_qs)
  );


  // F[flush_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_flush_flush_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_flush_flush_1_we),
    .wd     (ro_cache_flush_flush_1_wd),

    // from internal hardware
    .de     (hw2reg.ro_cache_flush[1].de),
    .d      (hw2reg.ro_cache_flush[1].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_flush[1].q ),

    // to register interface (read)
    .qs     (ro_cache_flush_flush_1_qs)
  );


  // F[flush_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_flush_flush_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_flush_flush_2_we),
    .wd     (ro_cache_flush_flush_2_wd),

    // from internal hardware
    .de     (hw2reg.ro_cache_flush[2].de),
    .d      (hw2reg.ro_cache_flush[2].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_flush[2].q ),

    // to register interface (read)
    .qs     (ro_cache_flush_flush_2_qs)
  );


  // F[flush_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_flush_flush_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_flush_flush_3_we),
    .wd     (ro_cache_flush_flush_3_wd),

    // from internal hardware
    .de     (hw2reg.ro_cache_flush[3].de),
    .d      (hw2reg.ro_cache_flush[3].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_flush[3].q ),

    // to register interface (read)
    .qs     (ro_cache_flush_flush_3_qs)
  );


  // F[flush_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_flush_flush_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_flush_flush_4_we),
    .wd     (ro_cache_flush_flush_4_wd),

    // from internal hardware
    .de     (hw2reg.ro_cache_flush[4].de),
    .d      (hw2reg.ro_cache_flush[4].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_flush[4].q ),

    // to register interface (read)
    .qs     (ro_cache_flush_flush_4_qs)
  );


  // F[flush_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_flush_flush_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_flush_flush_5_we),
    .wd     (ro_cache_flush_flush_5_wd),

    // from internal hardware
    .de     (hw2reg.ro_cache_flush[5].de),
    .d      (hw2reg.ro_cache_flush[5].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_flush[5].q ),

    // to register interface (read)
    .qs     (ro_cache_flush_flush_5_qs)
  );


  // F[flush_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_flush_flush_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_flush_flush_6_we),
    .wd     (ro_cache_flush_flush_6_wd),

    // from internal hardware
    .de     (hw2reg.ro_cache_flush[6].de),
    .d      (hw2reg.ro_cache_flush[6].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_flush[6].q ),

    // to register interface (read)
    .qs     (ro_cache_flush_flush_6_qs)
  );


  // F[flush_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_flush_flush_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_flush_flush_7_we),
    .wd     (ro_cache_flush_flush_7_wd),

    // from internal hardware
    .de     (hw2reg.ro_cache_flush[7].de),
    .d      (hw2reg.ro_cache_flush[7].d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_flush[7].q ),

    // to register interface (read)
    .qs     (ro_cache_flush_flush_7_qs)
  );



  // R[ro_start_addr_low_0_quadrant_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_0_quadrant_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_0_quadrant_0_we),
    .wd     (ro_start_addr_low_0_quadrant_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_0_quadrant_0.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_0_quadrant_0_qs)
  );


  // R[ro_start_addr_high_0_quadrant_0]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ro_start_addr_high_0_quadrant_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_0_quadrant_0_we),
    .wd     (ro_start_addr_high_0_quadrant_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_0_quadrant_0.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_0_quadrant_0_qs)
  );


  // R[ro_end_addr_low_0_quadrant_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_0_quadrant_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_0_quadrant_0_we),
    .wd     (ro_end_addr_low_0_quadrant_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_0_quadrant_0.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_0_quadrant_0_qs)
  );


  // R[ro_end_addr_high_0_quadrant_0]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_end_addr_high_0_quadrant_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_0_quadrant_0_we),
    .wd     (ro_end_addr_high_0_quadrant_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_0_quadrant_0.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_0_quadrant_0_qs)
  );


  // R[ro_start_addr_low_1_quadrant_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_1_quadrant_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_1_quadrant_0_we),
    .wd     (ro_start_addr_low_1_quadrant_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_1_quadrant_0.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_1_quadrant_0_qs)
  );


  // R[ro_start_addr_high_1_quadrant_0]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_start_addr_high_1_quadrant_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_1_quadrant_0_we),
    .wd     (ro_start_addr_high_1_quadrant_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_1_quadrant_0.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_1_quadrant_0_qs)
  );


  // R[ro_end_addr_low_1_quadrant_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_1_quadrant_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_1_quadrant_0_we),
    .wd     (ro_end_addr_low_1_quadrant_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_1_quadrant_0.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_1_quadrant_0_qs)
  );


  // R[ro_end_addr_high_1_quadrant_0]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_end_addr_high_1_quadrant_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_1_quadrant_0_we),
    .wd     (ro_end_addr_high_1_quadrant_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_1_quadrant_0.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_1_quadrant_0_qs)
  );


  // R[ro_start_addr_low_2_quadrant_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_2_quadrant_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_2_quadrant_0_we),
    .wd     (ro_start_addr_low_2_quadrant_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_2_quadrant_0.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_2_quadrant_0_qs)
  );


  // R[ro_start_addr_high_2_quadrant_0]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_start_addr_high_2_quadrant_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_2_quadrant_0_we),
    .wd     (ro_start_addr_high_2_quadrant_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_2_quadrant_0.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_2_quadrant_0_qs)
  );


  // R[ro_end_addr_low_2_quadrant_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_2_quadrant_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_2_quadrant_0_we),
    .wd     (ro_end_addr_low_2_quadrant_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_2_quadrant_0.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_2_quadrant_0_qs)
  );


  // R[ro_end_addr_high_2_quadrant_0]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_end_addr_high_2_quadrant_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_2_quadrant_0_we),
    .wd     (ro_end_addr_high_2_quadrant_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_2_quadrant_0.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_2_quadrant_0_qs)
  );


  // R[ro_start_addr_low_3_quadrant_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_3_quadrant_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_3_quadrant_0_we),
    .wd     (ro_start_addr_low_3_quadrant_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_3_quadrant_0.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_3_quadrant_0_qs)
  );


  // R[ro_start_addr_high_3_quadrant_0]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_start_addr_high_3_quadrant_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_3_quadrant_0_we),
    .wd     (ro_start_addr_high_3_quadrant_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_3_quadrant_0.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_3_quadrant_0_qs)
  );


  // R[ro_end_addr_low_3_quadrant_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_3_quadrant_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_3_quadrant_0_we),
    .wd     (ro_end_addr_low_3_quadrant_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_3_quadrant_0.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_3_quadrant_0_qs)
  );


  // R[ro_end_addr_high_3_quadrant_0]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h4)
  ) u_ro_end_addr_high_3_quadrant_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_3_quadrant_0_we),
    .wd     (ro_end_addr_high_3_quadrant_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_3_quadrant_0.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_3_quadrant_0_qs)
  );


  // R[ro_start_addr_low_0_quadrant_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_0_quadrant_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_0_quadrant_1_we),
    .wd     (ro_start_addr_low_0_quadrant_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_0_quadrant_1.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_0_quadrant_1_qs)
  );


  // R[ro_start_addr_high_0_quadrant_1]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ro_start_addr_high_0_quadrant_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_0_quadrant_1_we),
    .wd     (ro_start_addr_high_0_quadrant_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_0_quadrant_1.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_0_quadrant_1_qs)
  );


  // R[ro_end_addr_low_0_quadrant_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_0_quadrant_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_0_quadrant_1_we),
    .wd     (ro_end_addr_low_0_quadrant_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_0_quadrant_1.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_0_quadrant_1_qs)
  );


  // R[ro_end_addr_high_0_quadrant_1]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_end_addr_high_0_quadrant_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_0_quadrant_1_we),
    .wd     (ro_end_addr_high_0_quadrant_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_0_quadrant_1.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_0_quadrant_1_qs)
  );


  // R[ro_start_addr_low_1_quadrant_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_1_quadrant_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_1_quadrant_1_we),
    .wd     (ro_start_addr_low_1_quadrant_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_1_quadrant_1.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_1_quadrant_1_qs)
  );


  // R[ro_start_addr_high_1_quadrant_1]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_start_addr_high_1_quadrant_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_1_quadrant_1_we),
    .wd     (ro_start_addr_high_1_quadrant_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_1_quadrant_1.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_1_quadrant_1_qs)
  );


  // R[ro_end_addr_low_1_quadrant_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_1_quadrant_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_1_quadrant_1_we),
    .wd     (ro_end_addr_low_1_quadrant_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_1_quadrant_1.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_1_quadrant_1_qs)
  );


  // R[ro_end_addr_high_1_quadrant_1]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_end_addr_high_1_quadrant_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_1_quadrant_1_we),
    .wd     (ro_end_addr_high_1_quadrant_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_1_quadrant_1.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_1_quadrant_1_qs)
  );


  // R[ro_start_addr_low_2_quadrant_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_2_quadrant_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_2_quadrant_1_we),
    .wd     (ro_start_addr_low_2_quadrant_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_2_quadrant_1.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_2_quadrant_1_qs)
  );


  // R[ro_start_addr_high_2_quadrant_1]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_start_addr_high_2_quadrant_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_2_quadrant_1_we),
    .wd     (ro_start_addr_high_2_quadrant_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_2_quadrant_1.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_2_quadrant_1_qs)
  );


  // R[ro_end_addr_low_2_quadrant_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_2_quadrant_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_2_quadrant_1_we),
    .wd     (ro_end_addr_low_2_quadrant_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_2_quadrant_1.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_2_quadrant_1_qs)
  );


  // R[ro_end_addr_high_2_quadrant_1]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_end_addr_high_2_quadrant_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_2_quadrant_1_we),
    .wd     (ro_end_addr_high_2_quadrant_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_2_quadrant_1.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_2_quadrant_1_qs)
  );


  // R[ro_start_addr_low_3_quadrant_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_3_quadrant_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_3_quadrant_1_we),
    .wd     (ro_start_addr_low_3_quadrant_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_3_quadrant_1.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_3_quadrant_1_qs)
  );


  // R[ro_start_addr_high_3_quadrant_1]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_start_addr_high_3_quadrant_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_3_quadrant_1_we),
    .wd     (ro_start_addr_high_3_quadrant_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_3_quadrant_1.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_3_quadrant_1_qs)
  );


  // R[ro_end_addr_low_3_quadrant_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_3_quadrant_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_3_quadrant_1_we),
    .wd     (ro_end_addr_low_3_quadrant_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_3_quadrant_1.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_3_quadrant_1_qs)
  );


  // R[ro_end_addr_high_3_quadrant_1]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h4)
  ) u_ro_end_addr_high_3_quadrant_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_3_quadrant_1_we),
    .wd     (ro_end_addr_high_3_quadrant_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_3_quadrant_1.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_3_quadrant_1_qs)
  );


  // R[ro_start_addr_low_0_quadrant_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_0_quadrant_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_0_quadrant_2_we),
    .wd     (ro_start_addr_low_0_quadrant_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_0_quadrant_2.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_0_quadrant_2_qs)
  );


  // R[ro_start_addr_high_0_quadrant_2]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ro_start_addr_high_0_quadrant_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_0_quadrant_2_we),
    .wd     (ro_start_addr_high_0_quadrant_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_0_quadrant_2.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_0_quadrant_2_qs)
  );


  // R[ro_end_addr_low_0_quadrant_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_0_quadrant_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_0_quadrant_2_we),
    .wd     (ro_end_addr_low_0_quadrant_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_0_quadrant_2.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_0_quadrant_2_qs)
  );


  // R[ro_end_addr_high_0_quadrant_2]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_end_addr_high_0_quadrant_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_0_quadrant_2_we),
    .wd     (ro_end_addr_high_0_quadrant_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_0_quadrant_2.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_0_quadrant_2_qs)
  );


  // R[ro_start_addr_low_1_quadrant_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_1_quadrant_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_1_quadrant_2_we),
    .wd     (ro_start_addr_low_1_quadrant_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_1_quadrant_2.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_1_quadrant_2_qs)
  );


  // R[ro_start_addr_high_1_quadrant_2]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_start_addr_high_1_quadrant_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_1_quadrant_2_we),
    .wd     (ro_start_addr_high_1_quadrant_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_1_quadrant_2.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_1_quadrant_2_qs)
  );


  // R[ro_end_addr_low_1_quadrant_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_1_quadrant_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_1_quadrant_2_we),
    .wd     (ro_end_addr_low_1_quadrant_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_1_quadrant_2.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_1_quadrant_2_qs)
  );


  // R[ro_end_addr_high_1_quadrant_2]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_end_addr_high_1_quadrant_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_1_quadrant_2_we),
    .wd     (ro_end_addr_high_1_quadrant_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_1_quadrant_2.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_1_quadrant_2_qs)
  );


  // R[ro_start_addr_low_2_quadrant_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_2_quadrant_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_2_quadrant_2_we),
    .wd     (ro_start_addr_low_2_quadrant_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_2_quadrant_2.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_2_quadrant_2_qs)
  );


  // R[ro_start_addr_high_2_quadrant_2]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_start_addr_high_2_quadrant_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_2_quadrant_2_we),
    .wd     (ro_start_addr_high_2_quadrant_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_2_quadrant_2.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_2_quadrant_2_qs)
  );


  // R[ro_end_addr_low_2_quadrant_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_2_quadrant_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_2_quadrant_2_we),
    .wd     (ro_end_addr_low_2_quadrant_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_2_quadrant_2.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_2_quadrant_2_qs)
  );


  // R[ro_end_addr_high_2_quadrant_2]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_end_addr_high_2_quadrant_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_2_quadrant_2_we),
    .wd     (ro_end_addr_high_2_quadrant_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_2_quadrant_2.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_2_quadrant_2_qs)
  );


  // R[ro_start_addr_low_3_quadrant_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_3_quadrant_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_3_quadrant_2_we),
    .wd     (ro_start_addr_low_3_quadrant_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_3_quadrant_2.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_3_quadrant_2_qs)
  );


  // R[ro_start_addr_high_3_quadrant_2]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_start_addr_high_3_quadrant_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_3_quadrant_2_we),
    .wd     (ro_start_addr_high_3_quadrant_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_3_quadrant_2.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_3_quadrant_2_qs)
  );


  // R[ro_end_addr_low_3_quadrant_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_3_quadrant_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_3_quadrant_2_we),
    .wd     (ro_end_addr_low_3_quadrant_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_3_quadrant_2.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_3_quadrant_2_qs)
  );


  // R[ro_end_addr_high_3_quadrant_2]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h4)
  ) u_ro_end_addr_high_3_quadrant_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_3_quadrant_2_we),
    .wd     (ro_end_addr_high_3_quadrant_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_3_quadrant_2.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_3_quadrant_2_qs)
  );


  // R[ro_start_addr_low_0_quadrant_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_0_quadrant_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_0_quadrant_3_we),
    .wd     (ro_start_addr_low_0_quadrant_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_0_quadrant_3.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_0_quadrant_3_qs)
  );


  // R[ro_start_addr_high_0_quadrant_3]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ro_start_addr_high_0_quadrant_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_0_quadrant_3_we),
    .wd     (ro_start_addr_high_0_quadrant_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_0_quadrant_3.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_0_quadrant_3_qs)
  );


  // R[ro_end_addr_low_0_quadrant_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_0_quadrant_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_0_quadrant_3_we),
    .wd     (ro_end_addr_low_0_quadrant_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_0_quadrant_3.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_0_quadrant_3_qs)
  );


  // R[ro_end_addr_high_0_quadrant_3]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_end_addr_high_0_quadrant_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_0_quadrant_3_we),
    .wd     (ro_end_addr_high_0_quadrant_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_0_quadrant_3.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_0_quadrant_3_qs)
  );


  // R[ro_start_addr_low_1_quadrant_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_1_quadrant_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_1_quadrant_3_we),
    .wd     (ro_start_addr_low_1_quadrant_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_1_quadrant_3.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_1_quadrant_3_qs)
  );


  // R[ro_start_addr_high_1_quadrant_3]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_start_addr_high_1_quadrant_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_1_quadrant_3_we),
    .wd     (ro_start_addr_high_1_quadrant_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_1_quadrant_3.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_1_quadrant_3_qs)
  );


  // R[ro_end_addr_low_1_quadrant_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_1_quadrant_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_1_quadrant_3_we),
    .wd     (ro_end_addr_low_1_quadrant_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_1_quadrant_3.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_1_quadrant_3_qs)
  );


  // R[ro_end_addr_high_1_quadrant_3]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_end_addr_high_1_quadrant_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_1_quadrant_3_we),
    .wd     (ro_end_addr_high_1_quadrant_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_1_quadrant_3.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_1_quadrant_3_qs)
  );


  // R[ro_start_addr_low_2_quadrant_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_2_quadrant_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_2_quadrant_3_we),
    .wd     (ro_start_addr_low_2_quadrant_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_2_quadrant_3.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_2_quadrant_3_qs)
  );


  // R[ro_start_addr_high_2_quadrant_3]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_start_addr_high_2_quadrant_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_2_quadrant_3_we),
    .wd     (ro_start_addr_high_2_quadrant_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_2_quadrant_3.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_2_quadrant_3_qs)
  );


  // R[ro_end_addr_low_2_quadrant_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_2_quadrant_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_2_quadrant_3_we),
    .wd     (ro_end_addr_low_2_quadrant_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_2_quadrant_3.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_2_quadrant_3_qs)
  );


  // R[ro_end_addr_high_2_quadrant_3]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_end_addr_high_2_quadrant_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_2_quadrant_3_we),
    .wd     (ro_end_addr_high_2_quadrant_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_2_quadrant_3.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_2_quadrant_3_qs)
  );


  // R[ro_start_addr_low_3_quadrant_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_3_quadrant_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_3_quadrant_3_we),
    .wd     (ro_start_addr_low_3_quadrant_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_3_quadrant_3.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_3_quadrant_3_qs)
  );


  // R[ro_start_addr_high_3_quadrant_3]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_start_addr_high_3_quadrant_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_3_quadrant_3_we),
    .wd     (ro_start_addr_high_3_quadrant_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_3_quadrant_3.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_3_quadrant_3_qs)
  );


  // R[ro_end_addr_low_3_quadrant_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_3_quadrant_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_3_quadrant_3_we),
    .wd     (ro_end_addr_low_3_quadrant_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_3_quadrant_3.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_3_quadrant_3_qs)
  );


  // R[ro_end_addr_high_3_quadrant_3]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h4)
  ) u_ro_end_addr_high_3_quadrant_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_3_quadrant_3_we),
    .wd     (ro_end_addr_high_3_quadrant_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_3_quadrant_3.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_3_quadrant_3_qs)
  );


  // R[ro_start_addr_low_0_quadrant_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_0_quadrant_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_0_quadrant_4_we),
    .wd     (ro_start_addr_low_0_quadrant_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_0_quadrant_4.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_0_quadrant_4_qs)
  );


  // R[ro_start_addr_high_0_quadrant_4]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ro_start_addr_high_0_quadrant_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_0_quadrant_4_we),
    .wd     (ro_start_addr_high_0_quadrant_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_0_quadrant_4.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_0_quadrant_4_qs)
  );


  // R[ro_end_addr_low_0_quadrant_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_0_quadrant_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_0_quadrant_4_we),
    .wd     (ro_end_addr_low_0_quadrant_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_0_quadrant_4.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_0_quadrant_4_qs)
  );


  // R[ro_end_addr_high_0_quadrant_4]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_end_addr_high_0_quadrant_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_0_quadrant_4_we),
    .wd     (ro_end_addr_high_0_quadrant_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_0_quadrant_4.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_0_quadrant_4_qs)
  );


  // R[ro_start_addr_low_1_quadrant_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_1_quadrant_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_1_quadrant_4_we),
    .wd     (ro_start_addr_low_1_quadrant_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_1_quadrant_4.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_1_quadrant_4_qs)
  );


  // R[ro_start_addr_high_1_quadrant_4]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_start_addr_high_1_quadrant_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_1_quadrant_4_we),
    .wd     (ro_start_addr_high_1_quadrant_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_1_quadrant_4.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_1_quadrant_4_qs)
  );


  // R[ro_end_addr_low_1_quadrant_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_1_quadrant_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_1_quadrant_4_we),
    .wd     (ro_end_addr_low_1_quadrant_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_1_quadrant_4.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_1_quadrant_4_qs)
  );


  // R[ro_end_addr_high_1_quadrant_4]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_end_addr_high_1_quadrant_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_1_quadrant_4_we),
    .wd     (ro_end_addr_high_1_quadrant_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_1_quadrant_4.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_1_quadrant_4_qs)
  );


  // R[ro_start_addr_low_2_quadrant_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_2_quadrant_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_2_quadrant_4_we),
    .wd     (ro_start_addr_low_2_quadrant_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_2_quadrant_4.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_2_quadrant_4_qs)
  );


  // R[ro_start_addr_high_2_quadrant_4]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_start_addr_high_2_quadrant_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_2_quadrant_4_we),
    .wd     (ro_start_addr_high_2_quadrant_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_2_quadrant_4.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_2_quadrant_4_qs)
  );


  // R[ro_end_addr_low_2_quadrant_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_2_quadrant_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_2_quadrant_4_we),
    .wd     (ro_end_addr_low_2_quadrant_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_2_quadrant_4.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_2_quadrant_4_qs)
  );


  // R[ro_end_addr_high_2_quadrant_4]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_end_addr_high_2_quadrant_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_2_quadrant_4_we),
    .wd     (ro_end_addr_high_2_quadrant_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_2_quadrant_4.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_2_quadrant_4_qs)
  );


  // R[ro_start_addr_low_3_quadrant_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_3_quadrant_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_3_quadrant_4_we),
    .wd     (ro_start_addr_low_3_quadrant_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_3_quadrant_4.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_3_quadrant_4_qs)
  );


  // R[ro_start_addr_high_3_quadrant_4]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_start_addr_high_3_quadrant_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_3_quadrant_4_we),
    .wd     (ro_start_addr_high_3_quadrant_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_3_quadrant_4.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_3_quadrant_4_qs)
  );


  // R[ro_end_addr_low_3_quadrant_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_3_quadrant_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_3_quadrant_4_we),
    .wd     (ro_end_addr_low_3_quadrant_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_3_quadrant_4.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_3_quadrant_4_qs)
  );


  // R[ro_end_addr_high_3_quadrant_4]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h4)
  ) u_ro_end_addr_high_3_quadrant_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_3_quadrant_4_we),
    .wd     (ro_end_addr_high_3_quadrant_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_3_quadrant_4.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_3_quadrant_4_qs)
  );


  // R[ro_start_addr_low_0_quadrant_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_0_quadrant_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_0_quadrant_5_we),
    .wd     (ro_start_addr_low_0_quadrant_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_0_quadrant_5.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_0_quadrant_5_qs)
  );


  // R[ro_start_addr_high_0_quadrant_5]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ro_start_addr_high_0_quadrant_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_0_quadrant_5_we),
    .wd     (ro_start_addr_high_0_quadrant_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_0_quadrant_5.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_0_quadrant_5_qs)
  );


  // R[ro_end_addr_low_0_quadrant_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_0_quadrant_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_0_quadrant_5_we),
    .wd     (ro_end_addr_low_0_quadrant_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_0_quadrant_5.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_0_quadrant_5_qs)
  );


  // R[ro_end_addr_high_0_quadrant_5]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_end_addr_high_0_quadrant_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_0_quadrant_5_we),
    .wd     (ro_end_addr_high_0_quadrant_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_0_quadrant_5.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_0_quadrant_5_qs)
  );


  // R[ro_start_addr_low_1_quadrant_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_1_quadrant_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_1_quadrant_5_we),
    .wd     (ro_start_addr_low_1_quadrant_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_1_quadrant_5.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_1_quadrant_5_qs)
  );


  // R[ro_start_addr_high_1_quadrant_5]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_start_addr_high_1_quadrant_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_1_quadrant_5_we),
    .wd     (ro_start_addr_high_1_quadrant_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_1_quadrant_5.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_1_quadrant_5_qs)
  );


  // R[ro_end_addr_low_1_quadrant_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_1_quadrant_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_1_quadrant_5_we),
    .wd     (ro_end_addr_low_1_quadrant_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_1_quadrant_5.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_1_quadrant_5_qs)
  );


  // R[ro_end_addr_high_1_quadrant_5]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_end_addr_high_1_quadrant_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_1_quadrant_5_we),
    .wd     (ro_end_addr_high_1_quadrant_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_1_quadrant_5.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_1_quadrant_5_qs)
  );


  // R[ro_start_addr_low_2_quadrant_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_2_quadrant_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_2_quadrant_5_we),
    .wd     (ro_start_addr_low_2_quadrant_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_2_quadrant_5.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_2_quadrant_5_qs)
  );


  // R[ro_start_addr_high_2_quadrant_5]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_start_addr_high_2_quadrant_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_2_quadrant_5_we),
    .wd     (ro_start_addr_high_2_quadrant_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_2_quadrant_5.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_2_quadrant_5_qs)
  );


  // R[ro_end_addr_low_2_quadrant_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_2_quadrant_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_2_quadrant_5_we),
    .wd     (ro_end_addr_low_2_quadrant_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_2_quadrant_5.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_2_quadrant_5_qs)
  );


  // R[ro_end_addr_high_2_quadrant_5]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_end_addr_high_2_quadrant_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_2_quadrant_5_we),
    .wd     (ro_end_addr_high_2_quadrant_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_2_quadrant_5.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_2_quadrant_5_qs)
  );


  // R[ro_start_addr_low_3_quadrant_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_3_quadrant_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_3_quadrant_5_we),
    .wd     (ro_start_addr_low_3_quadrant_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_3_quadrant_5.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_3_quadrant_5_qs)
  );


  // R[ro_start_addr_high_3_quadrant_5]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_start_addr_high_3_quadrant_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_3_quadrant_5_we),
    .wd     (ro_start_addr_high_3_quadrant_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_3_quadrant_5.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_3_quadrant_5_qs)
  );


  // R[ro_end_addr_low_3_quadrant_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_3_quadrant_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_3_quadrant_5_we),
    .wd     (ro_end_addr_low_3_quadrant_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_3_quadrant_5.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_3_quadrant_5_qs)
  );


  // R[ro_end_addr_high_3_quadrant_5]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h4)
  ) u_ro_end_addr_high_3_quadrant_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_3_quadrant_5_we),
    .wd     (ro_end_addr_high_3_quadrant_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_3_quadrant_5.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_3_quadrant_5_qs)
  );


  // R[ro_start_addr_low_0_quadrant_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_0_quadrant_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_0_quadrant_6_we),
    .wd     (ro_start_addr_low_0_quadrant_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_0_quadrant_6.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_0_quadrant_6_qs)
  );


  // R[ro_start_addr_high_0_quadrant_6]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ro_start_addr_high_0_quadrant_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_0_quadrant_6_we),
    .wd     (ro_start_addr_high_0_quadrant_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_0_quadrant_6.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_0_quadrant_6_qs)
  );


  // R[ro_end_addr_low_0_quadrant_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_0_quadrant_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_0_quadrant_6_we),
    .wd     (ro_end_addr_low_0_quadrant_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_0_quadrant_6.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_0_quadrant_6_qs)
  );


  // R[ro_end_addr_high_0_quadrant_6]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_end_addr_high_0_quadrant_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_0_quadrant_6_we),
    .wd     (ro_end_addr_high_0_quadrant_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_0_quadrant_6.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_0_quadrant_6_qs)
  );


  // R[ro_start_addr_low_1_quadrant_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_1_quadrant_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_1_quadrant_6_we),
    .wd     (ro_start_addr_low_1_quadrant_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_1_quadrant_6.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_1_quadrant_6_qs)
  );


  // R[ro_start_addr_high_1_quadrant_6]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_start_addr_high_1_quadrant_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_1_quadrant_6_we),
    .wd     (ro_start_addr_high_1_quadrant_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_1_quadrant_6.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_1_quadrant_6_qs)
  );


  // R[ro_end_addr_low_1_quadrant_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_1_quadrant_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_1_quadrant_6_we),
    .wd     (ro_end_addr_low_1_quadrant_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_1_quadrant_6.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_1_quadrant_6_qs)
  );


  // R[ro_end_addr_high_1_quadrant_6]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_end_addr_high_1_quadrant_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_1_quadrant_6_we),
    .wd     (ro_end_addr_high_1_quadrant_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_1_quadrant_6.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_1_quadrant_6_qs)
  );


  // R[ro_start_addr_low_2_quadrant_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_2_quadrant_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_2_quadrant_6_we),
    .wd     (ro_start_addr_low_2_quadrant_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_2_quadrant_6.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_2_quadrant_6_qs)
  );


  // R[ro_start_addr_high_2_quadrant_6]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_start_addr_high_2_quadrant_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_2_quadrant_6_we),
    .wd     (ro_start_addr_high_2_quadrant_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_2_quadrant_6.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_2_quadrant_6_qs)
  );


  // R[ro_end_addr_low_2_quadrant_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_2_quadrant_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_2_quadrant_6_we),
    .wd     (ro_end_addr_low_2_quadrant_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_2_quadrant_6.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_2_quadrant_6_qs)
  );


  // R[ro_end_addr_high_2_quadrant_6]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_end_addr_high_2_quadrant_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_2_quadrant_6_we),
    .wd     (ro_end_addr_high_2_quadrant_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_2_quadrant_6.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_2_quadrant_6_qs)
  );


  // R[ro_start_addr_low_3_quadrant_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_3_quadrant_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_3_quadrant_6_we),
    .wd     (ro_start_addr_low_3_quadrant_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_3_quadrant_6.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_3_quadrant_6_qs)
  );


  // R[ro_start_addr_high_3_quadrant_6]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_start_addr_high_3_quadrant_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_3_quadrant_6_we),
    .wd     (ro_start_addr_high_3_quadrant_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_3_quadrant_6.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_3_quadrant_6_qs)
  );


  // R[ro_end_addr_low_3_quadrant_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_3_quadrant_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_3_quadrant_6_we),
    .wd     (ro_end_addr_low_3_quadrant_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_3_quadrant_6.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_3_quadrant_6_qs)
  );


  // R[ro_end_addr_high_3_quadrant_6]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h4)
  ) u_ro_end_addr_high_3_quadrant_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_3_quadrant_6_we),
    .wd     (ro_end_addr_high_3_quadrant_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_3_quadrant_6.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_3_quadrant_6_qs)
  );


  // R[ro_start_addr_low_0_quadrant_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_0_quadrant_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_0_quadrant_7_we),
    .wd     (ro_start_addr_low_0_quadrant_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_0_quadrant_7.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_0_quadrant_7_qs)
  );


  // R[ro_start_addr_high_0_quadrant_7]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ro_start_addr_high_0_quadrant_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_0_quadrant_7_we),
    .wd     (ro_start_addr_high_0_quadrant_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_0_quadrant_7.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_0_quadrant_7_qs)
  );


  // R[ro_end_addr_low_0_quadrant_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_0_quadrant_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_0_quadrant_7_we),
    .wd     (ro_end_addr_low_0_quadrant_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_0_quadrant_7.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_0_quadrant_7_qs)
  );


  // R[ro_end_addr_high_0_quadrant_7]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_end_addr_high_0_quadrant_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_0_quadrant_7_we),
    .wd     (ro_end_addr_high_0_quadrant_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_0_quadrant_7.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_0_quadrant_7_qs)
  );


  // R[ro_start_addr_low_1_quadrant_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_1_quadrant_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_1_quadrant_7_we),
    .wd     (ro_start_addr_low_1_quadrant_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_1_quadrant_7.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_1_quadrant_7_qs)
  );


  // R[ro_start_addr_high_1_quadrant_7]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_start_addr_high_1_quadrant_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_1_quadrant_7_we),
    .wd     (ro_start_addr_high_1_quadrant_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_1_quadrant_7.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_1_quadrant_7_qs)
  );


  // R[ro_end_addr_low_1_quadrant_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_1_quadrant_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_1_quadrant_7_we),
    .wd     (ro_end_addr_low_1_quadrant_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_1_quadrant_7.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_1_quadrant_7_qs)
  );


  // R[ro_end_addr_high_1_quadrant_7]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_end_addr_high_1_quadrant_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_1_quadrant_7_we),
    .wd     (ro_end_addr_high_1_quadrant_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_1_quadrant_7.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_1_quadrant_7_qs)
  );


  // R[ro_start_addr_low_2_quadrant_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_2_quadrant_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_2_quadrant_7_we),
    .wd     (ro_start_addr_low_2_quadrant_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_2_quadrant_7.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_2_quadrant_7_qs)
  );


  // R[ro_start_addr_high_2_quadrant_7]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_start_addr_high_2_quadrant_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_2_quadrant_7_we),
    .wd     (ro_start_addr_high_2_quadrant_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_2_quadrant_7.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_2_quadrant_7_qs)
  );


  // R[ro_end_addr_low_2_quadrant_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_2_quadrant_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_2_quadrant_7_we),
    .wd     (ro_end_addr_low_2_quadrant_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_2_quadrant_7.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_2_quadrant_7_qs)
  );


  // R[ro_end_addr_high_2_quadrant_7]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_end_addr_high_2_quadrant_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_2_quadrant_7_we),
    .wd     (ro_end_addr_high_2_quadrant_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_2_quadrant_7.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_2_quadrant_7_qs)
  );


  // R[ro_start_addr_low_3_quadrant_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_3_quadrant_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_3_quadrant_7_we),
    .wd     (ro_start_addr_low_3_quadrant_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_3_quadrant_7.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_3_quadrant_7_qs)
  );


  // R[ro_start_addr_high_3_quadrant_7]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_start_addr_high_3_quadrant_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_3_quadrant_7_we),
    .wd     (ro_start_addr_high_3_quadrant_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_3_quadrant_7.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_3_quadrant_7_qs)
  );


  // R[ro_end_addr_low_3_quadrant_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_3_quadrant_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_3_quadrant_7_we),
    .wd     (ro_end_addr_low_3_quadrant_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_3_quadrant_7.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_3_quadrant_7_qs)
  );


  // R[ro_end_addr_high_3_quadrant_7]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h4)
  ) u_ro_end_addr_high_3_quadrant_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_3_quadrant_7_we),
    .wd     (ro_end_addr_high_3_quadrant_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_3_quadrant_7.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_3_quadrant_7_qs)
  );




  logic [174:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[  0] = (reg_addr == OCCAMY_SOC_INTR_STATE_OFFSET);
    addr_hit[  1] = (reg_addr == OCCAMY_SOC_INTR_ENABLE_OFFSET);
    addr_hit[  2] = (reg_addr == OCCAMY_SOC_INTR_TEST_OFFSET);
    addr_hit[  3] = (reg_addr == OCCAMY_SOC_VERSION_OFFSET);
    addr_hit[  4] = (reg_addr == OCCAMY_SOC_CHIP_ID_OFFSET);
    addr_hit[  5] = (reg_addr == OCCAMY_SOC_SCRATCH_0_OFFSET);
    addr_hit[  6] = (reg_addr == OCCAMY_SOC_SCRATCH_1_OFFSET);
    addr_hit[  7] = (reg_addr == OCCAMY_SOC_SCRATCH_2_OFFSET);
    addr_hit[  8] = (reg_addr == OCCAMY_SOC_SCRATCH_3_OFFSET);
    addr_hit[  9] = (reg_addr == OCCAMY_SOC_BOOT_MODE_OFFSET);
    addr_hit[ 10] = (reg_addr == OCCAMY_SOC_PAD_0_OFFSET);
    addr_hit[ 11] = (reg_addr == OCCAMY_SOC_PAD_1_OFFSET);
    addr_hit[ 12] = (reg_addr == OCCAMY_SOC_PAD_2_OFFSET);
    addr_hit[ 13] = (reg_addr == OCCAMY_SOC_PAD_3_OFFSET);
    addr_hit[ 14] = (reg_addr == OCCAMY_SOC_PAD_4_OFFSET);
    addr_hit[ 15] = (reg_addr == OCCAMY_SOC_PAD_5_OFFSET);
    addr_hit[ 16] = (reg_addr == OCCAMY_SOC_PAD_6_OFFSET);
    addr_hit[ 17] = (reg_addr == OCCAMY_SOC_PAD_7_OFFSET);
    addr_hit[ 18] = (reg_addr == OCCAMY_SOC_PAD_8_OFFSET);
    addr_hit[ 19] = (reg_addr == OCCAMY_SOC_PAD_9_OFFSET);
    addr_hit[ 20] = (reg_addr == OCCAMY_SOC_PAD_10_OFFSET);
    addr_hit[ 21] = (reg_addr == OCCAMY_SOC_PAD_11_OFFSET);
    addr_hit[ 22] = (reg_addr == OCCAMY_SOC_PAD_12_OFFSET);
    addr_hit[ 23] = (reg_addr == OCCAMY_SOC_PAD_13_OFFSET);
    addr_hit[ 24] = (reg_addr == OCCAMY_SOC_PAD_14_OFFSET);
    addr_hit[ 25] = (reg_addr == OCCAMY_SOC_PAD_15_OFFSET);
    addr_hit[ 26] = (reg_addr == OCCAMY_SOC_PAD_16_OFFSET);
    addr_hit[ 27] = (reg_addr == OCCAMY_SOC_PAD_17_OFFSET);
    addr_hit[ 28] = (reg_addr == OCCAMY_SOC_PAD_18_OFFSET);
    addr_hit[ 29] = (reg_addr == OCCAMY_SOC_PAD_19_OFFSET);
    addr_hit[ 30] = (reg_addr == OCCAMY_SOC_PAD_20_OFFSET);
    addr_hit[ 31] = (reg_addr == OCCAMY_SOC_PAD_21_OFFSET);
    addr_hit[ 32] = (reg_addr == OCCAMY_SOC_PAD_22_OFFSET);
    addr_hit[ 33] = (reg_addr == OCCAMY_SOC_PAD_23_OFFSET);
    addr_hit[ 34] = (reg_addr == OCCAMY_SOC_PAD_24_OFFSET);
    addr_hit[ 35] = (reg_addr == OCCAMY_SOC_PAD_25_OFFSET);
    addr_hit[ 36] = (reg_addr == OCCAMY_SOC_PAD_26_OFFSET);
    addr_hit[ 37] = (reg_addr == OCCAMY_SOC_PAD_27_OFFSET);
    addr_hit[ 38] = (reg_addr == OCCAMY_SOC_PAD_28_OFFSET);
    addr_hit[ 39] = (reg_addr == OCCAMY_SOC_PAD_29_OFFSET);
    addr_hit[ 40] = (reg_addr == OCCAMY_SOC_PAD_30_OFFSET);
    addr_hit[ 41] = (reg_addr == OCCAMY_SOC_ISOLATE_0_OFFSET);
    addr_hit[ 42] = (reg_addr == OCCAMY_SOC_ISOLATE_1_OFFSET);
    addr_hit[ 43] = (reg_addr == OCCAMY_SOC_ISOLATED_0_OFFSET);
    addr_hit[ 44] = (reg_addr == OCCAMY_SOC_ISOLATED_1_OFFSET);
    addr_hit[ 45] = (reg_addr == OCCAMY_SOC_RO_CACHE_ENABLE_OFFSET);
    addr_hit[ 46] = (reg_addr == OCCAMY_SOC_RO_CACHE_FLUSH_OFFSET);
    addr_hit[ 47] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_0_QUADRANT_0_OFFSET);
    addr_hit[ 48] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_0_QUADRANT_0_OFFSET);
    addr_hit[ 49] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_0_QUADRANT_0_OFFSET);
    addr_hit[ 50] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_0_QUADRANT_0_OFFSET);
    addr_hit[ 51] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_1_QUADRANT_0_OFFSET);
    addr_hit[ 52] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_1_QUADRANT_0_OFFSET);
    addr_hit[ 53] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_1_QUADRANT_0_OFFSET);
    addr_hit[ 54] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_1_QUADRANT_0_OFFSET);
    addr_hit[ 55] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_2_QUADRANT_0_OFFSET);
    addr_hit[ 56] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_2_QUADRANT_0_OFFSET);
    addr_hit[ 57] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_2_QUADRANT_0_OFFSET);
    addr_hit[ 58] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_2_QUADRANT_0_OFFSET);
    addr_hit[ 59] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_3_QUADRANT_0_OFFSET);
    addr_hit[ 60] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_3_QUADRANT_0_OFFSET);
    addr_hit[ 61] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_3_QUADRANT_0_OFFSET);
    addr_hit[ 62] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_3_QUADRANT_0_OFFSET);
    addr_hit[ 63] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_0_QUADRANT_1_OFFSET);
    addr_hit[ 64] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_0_QUADRANT_1_OFFSET);
    addr_hit[ 65] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_0_QUADRANT_1_OFFSET);
    addr_hit[ 66] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_0_QUADRANT_1_OFFSET);
    addr_hit[ 67] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_1_QUADRANT_1_OFFSET);
    addr_hit[ 68] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_1_QUADRANT_1_OFFSET);
    addr_hit[ 69] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_1_QUADRANT_1_OFFSET);
    addr_hit[ 70] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_1_QUADRANT_1_OFFSET);
    addr_hit[ 71] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_2_QUADRANT_1_OFFSET);
    addr_hit[ 72] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_2_QUADRANT_1_OFFSET);
    addr_hit[ 73] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_2_QUADRANT_1_OFFSET);
    addr_hit[ 74] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_2_QUADRANT_1_OFFSET);
    addr_hit[ 75] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_3_QUADRANT_1_OFFSET);
    addr_hit[ 76] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_3_QUADRANT_1_OFFSET);
    addr_hit[ 77] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_3_QUADRANT_1_OFFSET);
    addr_hit[ 78] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_3_QUADRANT_1_OFFSET);
    addr_hit[ 79] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_0_QUADRANT_2_OFFSET);
    addr_hit[ 80] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_0_QUADRANT_2_OFFSET);
    addr_hit[ 81] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_0_QUADRANT_2_OFFSET);
    addr_hit[ 82] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_0_QUADRANT_2_OFFSET);
    addr_hit[ 83] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_1_QUADRANT_2_OFFSET);
    addr_hit[ 84] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_1_QUADRANT_2_OFFSET);
    addr_hit[ 85] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_1_QUADRANT_2_OFFSET);
    addr_hit[ 86] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_1_QUADRANT_2_OFFSET);
    addr_hit[ 87] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_2_QUADRANT_2_OFFSET);
    addr_hit[ 88] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_2_QUADRANT_2_OFFSET);
    addr_hit[ 89] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_2_QUADRANT_2_OFFSET);
    addr_hit[ 90] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_2_QUADRANT_2_OFFSET);
    addr_hit[ 91] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_3_QUADRANT_2_OFFSET);
    addr_hit[ 92] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_3_QUADRANT_2_OFFSET);
    addr_hit[ 93] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_3_QUADRANT_2_OFFSET);
    addr_hit[ 94] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_3_QUADRANT_2_OFFSET);
    addr_hit[ 95] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_0_QUADRANT_3_OFFSET);
    addr_hit[ 96] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_0_QUADRANT_3_OFFSET);
    addr_hit[ 97] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_0_QUADRANT_3_OFFSET);
    addr_hit[ 98] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_0_QUADRANT_3_OFFSET);
    addr_hit[ 99] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_1_QUADRANT_3_OFFSET);
    addr_hit[100] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_1_QUADRANT_3_OFFSET);
    addr_hit[101] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_1_QUADRANT_3_OFFSET);
    addr_hit[102] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_1_QUADRANT_3_OFFSET);
    addr_hit[103] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_2_QUADRANT_3_OFFSET);
    addr_hit[104] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_2_QUADRANT_3_OFFSET);
    addr_hit[105] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_2_QUADRANT_3_OFFSET);
    addr_hit[106] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_2_QUADRANT_3_OFFSET);
    addr_hit[107] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_3_QUADRANT_3_OFFSET);
    addr_hit[108] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_3_QUADRANT_3_OFFSET);
    addr_hit[109] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_3_QUADRANT_3_OFFSET);
    addr_hit[110] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_3_QUADRANT_3_OFFSET);
    addr_hit[111] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_0_QUADRANT_4_OFFSET);
    addr_hit[112] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_0_QUADRANT_4_OFFSET);
    addr_hit[113] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_0_QUADRANT_4_OFFSET);
    addr_hit[114] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_0_QUADRANT_4_OFFSET);
    addr_hit[115] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_1_QUADRANT_4_OFFSET);
    addr_hit[116] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_1_QUADRANT_4_OFFSET);
    addr_hit[117] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_1_QUADRANT_4_OFFSET);
    addr_hit[118] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_1_QUADRANT_4_OFFSET);
    addr_hit[119] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_2_QUADRANT_4_OFFSET);
    addr_hit[120] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_2_QUADRANT_4_OFFSET);
    addr_hit[121] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_2_QUADRANT_4_OFFSET);
    addr_hit[122] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_2_QUADRANT_4_OFFSET);
    addr_hit[123] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_3_QUADRANT_4_OFFSET);
    addr_hit[124] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_3_QUADRANT_4_OFFSET);
    addr_hit[125] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_3_QUADRANT_4_OFFSET);
    addr_hit[126] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_3_QUADRANT_4_OFFSET);
    addr_hit[127] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_0_QUADRANT_5_OFFSET);
    addr_hit[128] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_0_QUADRANT_5_OFFSET);
    addr_hit[129] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_0_QUADRANT_5_OFFSET);
    addr_hit[130] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_0_QUADRANT_5_OFFSET);
    addr_hit[131] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_1_QUADRANT_5_OFFSET);
    addr_hit[132] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_1_QUADRANT_5_OFFSET);
    addr_hit[133] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_1_QUADRANT_5_OFFSET);
    addr_hit[134] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_1_QUADRANT_5_OFFSET);
    addr_hit[135] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_2_QUADRANT_5_OFFSET);
    addr_hit[136] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_2_QUADRANT_5_OFFSET);
    addr_hit[137] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_2_QUADRANT_5_OFFSET);
    addr_hit[138] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_2_QUADRANT_5_OFFSET);
    addr_hit[139] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_3_QUADRANT_5_OFFSET);
    addr_hit[140] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_3_QUADRANT_5_OFFSET);
    addr_hit[141] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_3_QUADRANT_5_OFFSET);
    addr_hit[142] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_3_QUADRANT_5_OFFSET);
    addr_hit[143] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_0_QUADRANT_6_OFFSET);
    addr_hit[144] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_0_QUADRANT_6_OFFSET);
    addr_hit[145] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_0_QUADRANT_6_OFFSET);
    addr_hit[146] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_0_QUADRANT_6_OFFSET);
    addr_hit[147] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_1_QUADRANT_6_OFFSET);
    addr_hit[148] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_1_QUADRANT_6_OFFSET);
    addr_hit[149] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_1_QUADRANT_6_OFFSET);
    addr_hit[150] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_1_QUADRANT_6_OFFSET);
    addr_hit[151] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_2_QUADRANT_6_OFFSET);
    addr_hit[152] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_2_QUADRANT_6_OFFSET);
    addr_hit[153] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_2_QUADRANT_6_OFFSET);
    addr_hit[154] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_2_QUADRANT_6_OFFSET);
    addr_hit[155] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_3_QUADRANT_6_OFFSET);
    addr_hit[156] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_3_QUADRANT_6_OFFSET);
    addr_hit[157] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_3_QUADRANT_6_OFFSET);
    addr_hit[158] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_3_QUADRANT_6_OFFSET);
    addr_hit[159] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_0_QUADRANT_7_OFFSET);
    addr_hit[160] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_0_QUADRANT_7_OFFSET);
    addr_hit[161] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_0_QUADRANT_7_OFFSET);
    addr_hit[162] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_0_QUADRANT_7_OFFSET);
    addr_hit[163] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_1_QUADRANT_7_OFFSET);
    addr_hit[164] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_1_QUADRANT_7_OFFSET);
    addr_hit[165] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_1_QUADRANT_7_OFFSET);
    addr_hit[166] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_1_QUADRANT_7_OFFSET);
    addr_hit[167] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_2_QUADRANT_7_OFFSET);
    addr_hit[168] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_2_QUADRANT_7_OFFSET);
    addr_hit[169] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_2_QUADRANT_7_OFFSET);
    addr_hit[170] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_2_QUADRANT_7_OFFSET);
    addr_hit[171] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_LOW_3_QUADRANT_7_OFFSET);
    addr_hit[172] = (reg_addr == OCCAMY_SOC_RO_START_ADDR_HIGH_3_QUADRANT_7_OFFSET);
    addr_hit[173] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_LOW_3_QUADRANT_7_OFFSET);
    addr_hit[174] = (reg_addr == OCCAMY_SOC_RO_END_ADDR_HIGH_3_QUADRANT_7_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[  0] & (|(OCCAMY_SOC_PERMIT[  0] & ~reg_be))) |
               (addr_hit[  1] & (|(OCCAMY_SOC_PERMIT[  1] & ~reg_be))) |
               (addr_hit[  2] & (|(OCCAMY_SOC_PERMIT[  2] & ~reg_be))) |
               (addr_hit[  3] & (|(OCCAMY_SOC_PERMIT[  3] & ~reg_be))) |
               (addr_hit[  4] & (|(OCCAMY_SOC_PERMIT[  4] & ~reg_be))) |
               (addr_hit[  5] & (|(OCCAMY_SOC_PERMIT[  5] & ~reg_be))) |
               (addr_hit[  6] & (|(OCCAMY_SOC_PERMIT[  6] & ~reg_be))) |
               (addr_hit[  7] & (|(OCCAMY_SOC_PERMIT[  7] & ~reg_be))) |
               (addr_hit[  8] & (|(OCCAMY_SOC_PERMIT[  8] & ~reg_be))) |
               (addr_hit[  9] & (|(OCCAMY_SOC_PERMIT[  9] & ~reg_be))) |
               (addr_hit[ 10] & (|(OCCAMY_SOC_PERMIT[ 10] & ~reg_be))) |
               (addr_hit[ 11] & (|(OCCAMY_SOC_PERMIT[ 11] & ~reg_be))) |
               (addr_hit[ 12] & (|(OCCAMY_SOC_PERMIT[ 12] & ~reg_be))) |
               (addr_hit[ 13] & (|(OCCAMY_SOC_PERMIT[ 13] & ~reg_be))) |
               (addr_hit[ 14] & (|(OCCAMY_SOC_PERMIT[ 14] & ~reg_be))) |
               (addr_hit[ 15] & (|(OCCAMY_SOC_PERMIT[ 15] & ~reg_be))) |
               (addr_hit[ 16] & (|(OCCAMY_SOC_PERMIT[ 16] & ~reg_be))) |
               (addr_hit[ 17] & (|(OCCAMY_SOC_PERMIT[ 17] & ~reg_be))) |
               (addr_hit[ 18] & (|(OCCAMY_SOC_PERMIT[ 18] & ~reg_be))) |
               (addr_hit[ 19] & (|(OCCAMY_SOC_PERMIT[ 19] & ~reg_be))) |
               (addr_hit[ 20] & (|(OCCAMY_SOC_PERMIT[ 20] & ~reg_be))) |
               (addr_hit[ 21] & (|(OCCAMY_SOC_PERMIT[ 21] & ~reg_be))) |
               (addr_hit[ 22] & (|(OCCAMY_SOC_PERMIT[ 22] & ~reg_be))) |
               (addr_hit[ 23] & (|(OCCAMY_SOC_PERMIT[ 23] & ~reg_be))) |
               (addr_hit[ 24] & (|(OCCAMY_SOC_PERMIT[ 24] & ~reg_be))) |
               (addr_hit[ 25] & (|(OCCAMY_SOC_PERMIT[ 25] & ~reg_be))) |
               (addr_hit[ 26] & (|(OCCAMY_SOC_PERMIT[ 26] & ~reg_be))) |
               (addr_hit[ 27] & (|(OCCAMY_SOC_PERMIT[ 27] & ~reg_be))) |
               (addr_hit[ 28] & (|(OCCAMY_SOC_PERMIT[ 28] & ~reg_be))) |
               (addr_hit[ 29] & (|(OCCAMY_SOC_PERMIT[ 29] & ~reg_be))) |
               (addr_hit[ 30] & (|(OCCAMY_SOC_PERMIT[ 30] & ~reg_be))) |
               (addr_hit[ 31] & (|(OCCAMY_SOC_PERMIT[ 31] & ~reg_be))) |
               (addr_hit[ 32] & (|(OCCAMY_SOC_PERMIT[ 32] & ~reg_be))) |
               (addr_hit[ 33] & (|(OCCAMY_SOC_PERMIT[ 33] & ~reg_be))) |
               (addr_hit[ 34] & (|(OCCAMY_SOC_PERMIT[ 34] & ~reg_be))) |
               (addr_hit[ 35] & (|(OCCAMY_SOC_PERMIT[ 35] & ~reg_be))) |
               (addr_hit[ 36] & (|(OCCAMY_SOC_PERMIT[ 36] & ~reg_be))) |
               (addr_hit[ 37] & (|(OCCAMY_SOC_PERMIT[ 37] & ~reg_be))) |
               (addr_hit[ 38] & (|(OCCAMY_SOC_PERMIT[ 38] & ~reg_be))) |
               (addr_hit[ 39] & (|(OCCAMY_SOC_PERMIT[ 39] & ~reg_be))) |
               (addr_hit[ 40] & (|(OCCAMY_SOC_PERMIT[ 40] & ~reg_be))) |
               (addr_hit[ 41] & (|(OCCAMY_SOC_PERMIT[ 41] & ~reg_be))) |
               (addr_hit[ 42] & (|(OCCAMY_SOC_PERMIT[ 42] & ~reg_be))) |
               (addr_hit[ 43] & (|(OCCAMY_SOC_PERMIT[ 43] & ~reg_be))) |
               (addr_hit[ 44] & (|(OCCAMY_SOC_PERMIT[ 44] & ~reg_be))) |
               (addr_hit[ 45] & (|(OCCAMY_SOC_PERMIT[ 45] & ~reg_be))) |
               (addr_hit[ 46] & (|(OCCAMY_SOC_PERMIT[ 46] & ~reg_be))) |
               (addr_hit[ 47] & (|(OCCAMY_SOC_PERMIT[ 47] & ~reg_be))) |
               (addr_hit[ 48] & (|(OCCAMY_SOC_PERMIT[ 48] & ~reg_be))) |
               (addr_hit[ 49] & (|(OCCAMY_SOC_PERMIT[ 49] & ~reg_be))) |
               (addr_hit[ 50] & (|(OCCAMY_SOC_PERMIT[ 50] & ~reg_be))) |
               (addr_hit[ 51] & (|(OCCAMY_SOC_PERMIT[ 51] & ~reg_be))) |
               (addr_hit[ 52] & (|(OCCAMY_SOC_PERMIT[ 52] & ~reg_be))) |
               (addr_hit[ 53] & (|(OCCAMY_SOC_PERMIT[ 53] & ~reg_be))) |
               (addr_hit[ 54] & (|(OCCAMY_SOC_PERMIT[ 54] & ~reg_be))) |
               (addr_hit[ 55] & (|(OCCAMY_SOC_PERMIT[ 55] & ~reg_be))) |
               (addr_hit[ 56] & (|(OCCAMY_SOC_PERMIT[ 56] & ~reg_be))) |
               (addr_hit[ 57] & (|(OCCAMY_SOC_PERMIT[ 57] & ~reg_be))) |
               (addr_hit[ 58] & (|(OCCAMY_SOC_PERMIT[ 58] & ~reg_be))) |
               (addr_hit[ 59] & (|(OCCAMY_SOC_PERMIT[ 59] & ~reg_be))) |
               (addr_hit[ 60] & (|(OCCAMY_SOC_PERMIT[ 60] & ~reg_be))) |
               (addr_hit[ 61] & (|(OCCAMY_SOC_PERMIT[ 61] & ~reg_be))) |
               (addr_hit[ 62] & (|(OCCAMY_SOC_PERMIT[ 62] & ~reg_be))) |
               (addr_hit[ 63] & (|(OCCAMY_SOC_PERMIT[ 63] & ~reg_be))) |
               (addr_hit[ 64] & (|(OCCAMY_SOC_PERMIT[ 64] & ~reg_be))) |
               (addr_hit[ 65] & (|(OCCAMY_SOC_PERMIT[ 65] & ~reg_be))) |
               (addr_hit[ 66] & (|(OCCAMY_SOC_PERMIT[ 66] & ~reg_be))) |
               (addr_hit[ 67] & (|(OCCAMY_SOC_PERMIT[ 67] & ~reg_be))) |
               (addr_hit[ 68] & (|(OCCAMY_SOC_PERMIT[ 68] & ~reg_be))) |
               (addr_hit[ 69] & (|(OCCAMY_SOC_PERMIT[ 69] & ~reg_be))) |
               (addr_hit[ 70] & (|(OCCAMY_SOC_PERMIT[ 70] & ~reg_be))) |
               (addr_hit[ 71] & (|(OCCAMY_SOC_PERMIT[ 71] & ~reg_be))) |
               (addr_hit[ 72] & (|(OCCAMY_SOC_PERMIT[ 72] & ~reg_be))) |
               (addr_hit[ 73] & (|(OCCAMY_SOC_PERMIT[ 73] & ~reg_be))) |
               (addr_hit[ 74] & (|(OCCAMY_SOC_PERMIT[ 74] & ~reg_be))) |
               (addr_hit[ 75] & (|(OCCAMY_SOC_PERMIT[ 75] & ~reg_be))) |
               (addr_hit[ 76] & (|(OCCAMY_SOC_PERMIT[ 76] & ~reg_be))) |
               (addr_hit[ 77] & (|(OCCAMY_SOC_PERMIT[ 77] & ~reg_be))) |
               (addr_hit[ 78] & (|(OCCAMY_SOC_PERMIT[ 78] & ~reg_be))) |
               (addr_hit[ 79] & (|(OCCAMY_SOC_PERMIT[ 79] & ~reg_be))) |
               (addr_hit[ 80] & (|(OCCAMY_SOC_PERMIT[ 80] & ~reg_be))) |
               (addr_hit[ 81] & (|(OCCAMY_SOC_PERMIT[ 81] & ~reg_be))) |
               (addr_hit[ 82] & (|(OCCAMY_SOC_PERMIT[ 82] & ~reg_be))) |
               (addr_hit[ 83] & (|(OCCAMY_SOC_PERMIT[ 83] & ~reg_be))) |
               (addr_hit[ 84] & (|(OCCAMY_SOC_PERMIT[ 84] & ~reg_be))) |
               (addr_hit[ 85] & (|(OCCAMY_SOC_PERMIT[ 85] & ~reg_be))) |
               (addr_hit[ 86] & (|(OCCAMY_SOC_PERMIT[ 86] & ~reg_be))) |
               (addr_hit[ 87] & (|(OCCAMY_SOC_PERMIT[ 87] & ~reg_be))) |
               (addr_hit[ 88] & (|(OCCAMY_SOC_PERMIT[ 88] & ~reg_be))) |
               (addr_hit[ 89] & (|(OCCAMY_SOC_PERMIT[ 89] & ~reg_be))) |
               (addr_hit[ 90] & (|(OCCAMY_SOC_PERMIT[ 90] & ~reg_be))) |
               (addr_hit[ 91] & (|(OCCAMY_SOC_PERMIT[ 91] & ~reg_be))) |
               (addr_hit[ 92] & (|(OCCAMY_SOC_PERMIT[ 92] & ~reg_be))) |
               (addr_hit[ 93] & (|(OCCAMY_SOC_PERMIT[ 93] & ~reg_be))) |
               (addr_hit[ 94] & (|(OCCAMY_SOC_PERMIT[ 94] & ~reg_be))) |
               (addr_hit[ 95] & (|(OCCAMY_SOC_PERMIT[ 95] & ~reg_be))) |
               (addr_hit[ 96] & (|(OCCAMY_SOC_PERMIT[ 96] & ~reg_be))) |
               (addr_hit[ 97] & (|(OCCAMY_SOC_PERMIT[ 97] & ~reg_be))) |
               (addr_hit[ 98] & (|(OCCAMY_SOC_PERMIT[ 98] & ~reg_be))) |
               (addr_hit[ 99] & (|(OCCAMY_SOC_PERMIT[ 99] & ~reg_be))) |
               (addr_hit[100] & (|(OCCAMY_SOC_PERMIT[100] & ~reg_be))) |
               (addr_hit[101] & (|(OCCAMY_SOC_PERMIT[101] & ~reg_be))) |
               (addr_hit[102] & (|(OCCAMY_SOC_PERMIT[102] & ~reg_be))) |
               (addr_hit[103] & (|(OCCAMY_SOC_PERMIT[103] & ~reg_be))) |
               (addr_hit[104] & (|(OCCAMY_SOC_PERMIT[104] & ~reg_be))) |
               (addr_hit[105] & (|(OCCAMY_SOC_PERMIT[105] & ~reg_be))) |
               (addr_hit[106] & (|(OCCAMY_SOC_PERMIT[106] & ~reg_be))) |
               (addr_hit[107] & (|(OCCAMY_SOC_PERMIT[107] & ~reg_be))) |
               (addr_hit[108] & (|(OCCAMY_SOC_PERMIT[108] & ~reg_be))) |
               (addr_hit[109] & (|(OCCAMY_SOC_PERMIT[109] & ~reg_be))) |
               (addr_hit[110] & (|(OCCAMY_SOC_PERMIT[110] & ~reg_be))) |
               (addr_hit[111] & (|(OCCAMY_SOC_PERMIT[111] & ~reg_be))) |
               (addr_hit[112] & (|(OCCAMY_SOC_PERMIT[112] & ~reg_be))) |
               (addr_hit[113] & (|(OCCAMY_SOC_PERMIT[113] & ~reg_be))) |
               (addr_hit[114] & (|(OCCAMY_SOC_PERMIT[114] & ~reg_be))) |
               (addr_hit[115] & (|(OCCAMY_SOC_PERMIT[115] & ~reg_be))) |
               (addr_hit[116] & (|(OCCAMY_SOC_PERMIT[116] & ~reg_be))) |
               (addr_hit[117] & (|(OCCAMY_SOC_PERMIT[117] & ~reg_be))) |
               (addr_hit[118] & (|(OCCAMY_SOC_PERMIT[118] & ~reg_be))) |
               (addr_hit[119] & (|(OCCAMY_SOC_PERMIT[119] & ~reg_be))) |
               (addr_hit[120] & (|(OCCAMY_SOC_PERMIT[120] & ~reg_be))) |
               (addr_hit[121] & (|(OCCAMY_SOC_PERMIT[121] & ~reg_be))) |
               (addr_hit[122] & (|(OCCAMY_SOC_PERMIT[122] & ~reg_be))) |
               (addr_hit[123] & (|(OCCAMY_SOC_PERMIT[123] & ~reg_be))) |
               (addr_hit[124] & (|(OCCAMY_SOC_PERMIT[124] & ~reg_be))) |
               (addr_hit[125] & (|(OCCAMY_SOC_PERMIT[125] & ~reg_be))) |
               (addr_hit[126] & (|(OCCAMY_SOC_PERMIT[126] & ~reg_be))) |
               (addr_hit[127] & (|(OCCAMY_SOC_PERMIT[127] & ~reg_be))) |
               (addr_hit[128] & (|(OCCAMY_SOC_PERMIT[128] & ~reg_be))) |
               (addr_hit[129] & (|(OCCAMY_SOC_PERMIT[129] & ~reg_be))) |
               (addr_hit[130] & (|(OCCAMY_SOC_PERMIT[130] & ~reg_be))) |
               (addr_hit[131] & (|(OCCAMY_SOC_PERMIT[131] & ~reg_be))) |
               (addr_hit[132] & (|(OCCAMY_SOC_PERMIT[132] & ~reg_be))) |
               (addr_hit[133] & (|(OCCAMY_SOC_PERMIT[133] & ~reg_be))) |
               (addr_hit[134] & (|(OCCAMY_SOC_PERMIT[134] & ~reg_be))) |
               (addr_hit[135] & (|(OCCAMY_SOC_PERMIT[135] & ~reg_be))) |
               (addr_hit[136] & (|(OCCAMY_SOC_PERMIT[136] & ~reg_be))) |
               (addr_hit[137] & (|(OCCAMY_SOC_PERMIT[137] & ~reg_be))) |
               (addr_hit[138] & (|(OCCAMY_SOC_PERMIT[138] & ~reg_be))) |
               (addr_hit[139] & (|(OCCAMY_SOC_PERMIT[139] & ~reg_be))) |
               (addr_hit[140] & (|(OCCAMY_SOC_PERMIT[140] & ~reg_be))) |
               (addr_hit[141] & (|(OCCAMY_SOC_PERMIT[141] & ~reg_be))) |
               (addr_hit[142] & (|(OCCAMY_SOC_PERMIT[142] & ~reg_be))) |
               (addr_hit[143] & (|(OCCAMY_SOC_PERMIT[143] & ~reg_be))) |
               (addr_hit[144] & (|(OCCAMY_SOC_PERMIT[144] & ~reg_be))) |
               (addr_hit[145] & (|(OCCAMY_SOC_PERMIT[145] & ~reg_be))) |
               (addr_hit[146] & (|(OCCAMY_SOC_PERMIT[146] & ~reg_be))) |
               (addr_hit[147] & (|(OCCAMY_SOC_PERMIT[147] & ~reg_be))) |
               (addr_hit[148] & (|(OCCAMY_SOC_PERMIT[148] & ~reg_be))) |
               (addr_hit[149] & (|(OCCAMY_SOC_PERMIT[149] & ~reg_be))) |
               (addr_hit[150] & (|(OCCAMY_SOC_PERMIT[150] & ~reg_be))) |
               (addr_hit[151] & (|(OCCAMY_SOC_PERMIT[151] & ~reg_be))) |
               (addr_hit[152] & (|(OCCAMY_SOC_PERMIT[152] & ~reg_be))) |
               (addr_hit[153] & (|(OCCAMY_SOC_PERMIT[153] & ~reg_be))) |
               (addr_hit[154] & (|(OCCAMY_SOC_PERMIT[154] & ~reg_be))) |
               (addr_hit[155] & (|(OCCAMY_SOC_PERMIT[155] & ~reg_be))) |
               (addr_hit[156] & (|(OCCAMY_SOC_PERMIT[156] & ~reg_be))) |
               (addr_hit[157] & (|(OCCAMY_SOC_PERMIT[157] & ~reg_be))) |
               (addr_hit[158] & (|(OCCAMY_SOC_PERMIT[158] & ~reg_be))) |
               (addr_hit[159] & (|(OCCAMY_SOC_PERMIT[159] & ~reg_be))) |
               (addr_hit[160] & (|(OCCAMY_SOC_PERMIT[160] & ~reg_be))) |
               (addr_hit[161] & (|(OCCAMY_SOC_PERMIT[161] & ~reg_be))) |
               (addr_hit[162] & (|(OCCAMY_SOC_PERMIT[162] & ~reg_be))) |
               (addr_hit[163] & (|(OCCAMY_SOC_PERMIT[163] & ~reg_be))) |
               (addr_hit[164] & (|(OCCAMY_SOC_PERMIT[164] & ~reg_be))) |
               (addr_hit[165] & (|(OCCAMY_SOC_PERMIT[165] & ~reg_be))) |
               (addr_hit[166] & (|(OCCAMY_SOC_PERMIT[166] & ~reg_be))) |
               (addr_hit[167] & (|(OCCAMY_SOC_PERMIT[167] & ~reg_be))) |
               (addr_hit[168] & (|(OCCAMY_SOC_PERMIT[168] & ~reg_be))) |
               (addr_hit[169] & (|(OCCAMY_SOC_PERMIT[169] & ~reg_be))) |
               (addr_hit[170] & (|(OCCAMY_SOC_PERMIT[170] & ~reg_be))) |
               (addr_hit[171] & (|(OCCAMY_SOC_PERMIT[171] & ~reg_be))) |
               (addr_hit[172] & (|(OCCAMY_SOC_PERMIT[172] & ~reg_be))) |
               (addr_hit[173] & (|(OCCAMY_SOC_PERMIT[173] & ~reg_be))) |
               (addr_hit[174] & (|(OCCAMY_SOC_PERMIT[174] & ~reg_be)))));
  end

  assign intr_state_ecc_uncorrectable_we = addr_hit[0] & reg_we & !reg_error;
  assign intr_state_ecc_uncorrectable_wd = reg_wdata[0];

  assign intr_state_ecc_correctable_we = addr_hit[0] & reg_we & !reg_error;
  assign intr_state_ecc_correctable_wd = reg_wdata[1];

  assign intr_enable_ecc_uncorrectable_we = addr_hit[1] & reg_we & !reg_error;
  assign intr_enable_ecc_uncorrectable_wd = reg_wdata[0];

  assign intr_enable_ecc_correctable_we = addr_hit[1] & reg_we & !reg_error;
  assign intr_enable_ecc_correctable_wd = reg_wdata[1];

  assign intr_test_ecc_uncorrectable_we = addr_hit[2] & reg_we & !reg_error;
  assign intr_test_ecc_uncorrectable_wd = reg_wdata[0];

  assign intr_test_ecc_correctable_we = addr_hit[2] & reg_we & !reg_error;
  assign intr_test_ecc_correctable_wd = reg_wdata[1];

  assign chip_id_re = addr_hit[4] & reg_re & !reg_error;

  assign scratch_0_we = addr_hit[5] & reg_we & !reg_error;
  assign scratch_0_wd = reg_wdata[31:0];

  assign scratch_1_we = addr_hit[6] & reg_we & !reg_error;
  assign scratch_1_wd = reg_wdata[31:0];

  assign scratch_2_we = addr_hit[7] & reg_we & !reg_error;
  assign scratch_2_wd = reg_wdata[31:0];

  assign scratch_3_we = addr_hit[8] & reg_we & !reg_error;
  assign scratch_3_wd = reg_wdata[31:0];

  assign boot_mode_re = addr_hit[9] & reg_re & !reg_error;

  assign pad_0_slw_0_we = addr_hit[10] & reg_we & !reg_error;
  assign pad_0_slw_0_wd = reg_wdata[0];

  assign pad_0_smt_0_we = addr_hit[10] & reg_we & !reg_error;
  assign pad_0_smt_0_wd = reg_wdata[1];

  assign pad_0_drv_0_we = addr_hit[10] & reg_we & !reg_error;
  assign pad_0_drv_0_wd = reg_wdata[3:2];

  assign pad_1_slw_1_we = addr_hit[11] & reg_we & !reg_error;
  assign pad_1_slw_1_wd = reg_wdata[0];

  assign pad_1_smt_1_we = addr_hit[11] & reg_we & !reg_error;
  assign pad_1_smt_1_wd = reg_wdata[1];

  assign pad_1_drv_1_we = addr_hit[11] & reg_we & !reg_error;
  assign pad_1_drv_1_wd = reg_wdata[3:2];

  assign pad_2_slw_2_we = addr_hit[12] & reg_we & !reg_error;
  assign pad_2_slw_2_wd = reg_wdata[0];

  assign pad_2_smt_2_we = addr_hit[12] & reg_we & !reg_error;
  assign pad_2_smt_2_wd = reg_wdata[1];

  assign pad_2_drv_2_we = addr_hit[12] & reg_we & !reg_error;
  assign pad_2_drv_2_wd = reg_wdata[3:2];

  assign pad_3_slw_3_we = addr_hit[13] & reg_we & !reg_error;
  assign pad_3_slw_3_wd = reg_wdata[0];

  assign pad_3_smt_3_we = addr_hit[13] & reg_we & !reg_error;
  assign pad_3_smt_3_wd = reg_wdata[1];

  assign pad_3_drv_3_we = addr_hit[13] & reg_we & !reg_error;
  assign pad_3_drv_3_wd = reg_wdata[3:2];

  assign pad_4_slw_4_we = addr_hit[14] & reg_we & !reg_error;
  assign pad_4_slw_4_wd = reg_wdata[0];

  assign pad_4_smt_4_we = addr_hit[14] & reg_we & !reg_error;
  assign pad_4_smt_4_wd = reg_wdata[1];

  assign pad_4_drv_4_we = addr_hit[14] & reg_we & !reg_error;
  assign pad_4_drv_4_wd = reg_wdata[3:2];

  assign pad_5_slw_5_we = addr_hit[15] & reg_we & !reg_error;
  assign pad_5_slw_5_wd = reg_wdata[0];

  assign pad_5_smt_5_we = addr_hit[15] & reg_we & !reg_error;
  assign pad_5_smt_5_wd = reg_wdata[1];

  assign pad_5_drv_5_we = addr_hit[15] & reg_we & !reg_error;
  assign pad_5_drv_5_wd = reg_wdata[3:2];

  assign pad_6_slw_6_we = addr_hit[16] & reg_we & !reg_error;
  assign pad_6_slw_6_wd = reg_wdata[0];

  assign pad_6_smt_6_we = addr_hit[16] & reg_we & !reg_error;
  assign pad_6_smt_6_wd = reg_wdata[1];

  assign pad_6_drv_6_we = addr_hit[16] & reg_we & !reg_error;
  assign pad_6_drv_6_wd = reg_wdata[3:2];

  assign pad_7_slw_7_we = addr_hit[17] & reg_we & !reg_error;
  assign pad_7_slw_7_wd = reg_wdata[0];

  assign pad_7_smt_7_we = addr_hit[17] & reg_we & !reg_error;
  assign pad_7_smt_7_wd = reg_wdata[1];

  assign pad_7_drv_7_we = addr_hit[17] & reg_we & !reg_error;
  assign pad_7_drv_7_wd = reg_wdata[3:2];

  assign pad_8_slw_8_we = addr_hit[18] & reg_we & !reg_error;
  assign pad_8_slw_8_wd = reg_wdata[0];

  assign pad_8_smt_8_we = addr_hit[18] & reg_we & !reg_error;
  assign pad_8_smt_8_wd = reg_wdata[1];

  assign pad_8_drv_8_we = addr_hit[18] & reg_we & !reg_error;
  assign pad_8_drv_8_wd = reg_wdata[3:2];

  assign pad_9_slw_9_we = addr_hit[19] & reg_we & !reg_error;
  assign pad_9_slw_9_wd = reg_wdata[0];

  assign pad_9_smt_9_we = addr_hit[19] & reg_we & !reg_error;
  assign pad_9_smt_9_wd = reg_wdata[1];

  assign pad_9_drv_9_we = addr_hit[19] & reg_we & !reg_error;
  assign pad_9_drv_9_wd = reg_wdata[3:2];

  assign pad_10_slw_10_we = addr_hit[20] & reg_we & !reg_error;
  assign pad_10_slw_10_wd = reg_wdata[0];

  assign pad_10_smt_10_we = addr_hit[20] & reg_we & !reg_error;
  assign pad_10_smt_10_wd = reg_wdata[1];

  assign pad_10_drv_10_we = addr_hit[20] & reg_we & !reg_error;
  assign pad_10_drv_10_wd = reg_wdata[3:2];

  assign pad_11_slw_11_we = addr_hit[21] & reg_we & !reg_error;
  assign pad_11_slw_11_wd = reg_wdata[0];

  assign pad_11_smt_11_we = addr_hit[21] & reg_we & !reg_error;
  assign pad_11_smt_11_wd = reg_wdata[1];

  assign pad_11_drv_11_we = addr_hit[21] & reg_we & !reg_error;
  assign pad_11_drv_11_wd = reg_wdata[3:2];

  assign pad_12_slw_12_we = addr_hit[22] & reg_we & !reg_error;
  assign pad_12_slw_12_wd = reg_wdata[0];

  assign pad_12_smt_12_we = addr_hit[22] & reg_we & !reg_error;
  assign pad_12_smt_12_wd = reg_wdata[1];

  assign pad_12_drv_12_we = addr_hit[22] & reg_we & !reg_error;
  assign pad_12_drv_12_wd = reg_wdata[3:2];

  assign pad_13_slw_13_we = addr_hit[23] & reg_we & !reg_error;
  assign pad_13_slw_13_wd = reg_wdata[0];

  assign pad_13_smt_13_we = addr_hit[23] & reg_we & !reg_error;
  assign pad_13_smt_13_wd = reg_wdata[1];

  assign pad_13_drv_13_we = addr_hit[23] & reg_we & !reg_error;
  assign pad_13_drv_13_wd = reg_wdata[3:2];

  assign pad_14_slw_14_we = addr_hit[24] & reg_we & !reg_error;
  assign pad_14_slw_14_wd = reg_wdata[0];

  assign pad_14_smt_14_we = addr_hit[24] & reg_we & !reg_error;
  assign pad_14_smt_14_wd = reg_wdata[1];

  assign pad_14_drv_14_we = addr_hit[24] & reg_we & !reg_error;
  assign pad_14_drv_14_wd = reg_wdata[3:2];

  assign pad_15_slw_15_we = addr_hit[25] & reg_we & !reg_error;
  assign pad_15_slw_15_wd = reg_wdata[0];

  assign pad_15_smt_15_we = addr_hit[25] & reg_we & !reg_error;
  assign pad_15_smt_15_wd = reg_wdata[1];

  assign pad_15_drv_15_we = addr_hit[25] & reg_we & !reg_error;
  assign pad_15_drv_15_wd = reg_wdata[3:2];

  assign pad_16_slw_16_we = addr_hit[26] & reg_we & !reg_error;
  assign pad_16_slw_16_wd = reg_wdata[0];

  assign pad_16_smt_16_we = addr_hit[26] & reg_we & !reg_error;
  assign pad_16_smt_16_wd = reg_wdata[1];

  assign pad_16_drv_16_we = addr_hit[26] & reg_we & !reg_error;
  assign pad_16_drv_16_wd = reg_wdata[3:2];

  assign pad_17_slw_17_we = addr_hit[27] & reg_we & !reg_error;
  assign pad_17_slw_17_wd = reg_wdata[0];

  assign pad_17_smt_17_we = addr_hit[27] & reg_we & !reg_error;
  assign pad_17_smt_17_wd = reg_wdata[1];

  assign pad_17_drv_17_we = addr_hit[27] & reg_we & !reg_error;
  assign pad_17_drv_17_wd = reg_wdata[3:2];

  assign pad_18_slw_18_we = addr_hit[28] & reg_we & !reg_error;
  assign pad_18_slw_18_wd = reg_wdata[0];

  assign pad_18_smt_18_we = addr_hit[28] & reg_we & !reg_error;
  assign pad_18_smt_18_wd = reg_wdata[1];

  assign pad_18_drv_18_we = addr_hit[28] & reg_we & !reg_error;
  assign pad_18_drv_18_wd = reg_wdata[3:2];

  assign pad_19_slw_19_we = addr_hit[29] & reg_we & !reg_error;
  assign pad_19_slw_19_wd = reg_wdata[0];

  assign pad_19_smt_19_we = addr_hit[29] & reg_we & !reg_error;
  assign pad_19_smt_19_wd = reg_wdata[1];

  assign pad_19_drv_19_we = addr_hit[29] & reg_we & !reg_error;
  assign pad_19_drv_19_wd = reg_wdata[3:2];

  assign pad_20_slw_20_we = addr_hit[30] & reg_we & !reg_error;
  assign pad_20_slw_20_wd = reg_wdata[0];

  assign pad_20_smt_20_we = addr_hit[30] & reg_we & !reg_error;
  assign pad_20_smt_20_wd = reg_wdata[1];

  assign pad_20_drv_20_we = addr_hit[30] & reg_we & !reg_error;
  assign pad_20_drv_20_wd = reg_wdata[3:2];

  assign pad_21_slw_21_we = addr_hit[31] & reg_we & !reg_error;
  assign pad_21_slw_21_wd = reg_wdata[0];

  assign pad_21_smt_21_we = addr_hit[31] & reg_we & !reg_error;
  assign pad_21_smt_21_wd = reg_wdata[1];

  assign pad_21_drv_21_we = addr_hit[31] & reg_we & !reg_error;
  assign pad_21_drv_21_wd = reg_wdata[3:2];

  assign pad_22_slw_22_we = addr_hit[32] & reg_we & !reg_error;
  assign pad_22_slw_22_wd = reg_wdata[0];

  assign pad_22_smt_22_we = addr_hit[32] & reg_we & !reg_error;
  assign pad_22_smt_22_wd = reg_wdata[1];

  assign pad_22_drv_22_we = addr_hit[32] & reg_we & !reg_error;
  assign pad_22_drv_22_wd = reg_wdata[3:2];

  assign pad_23_slw_23_we = addr_hit[33] & reg_we & !reg_error;
  assign pad_23_slw_23_wd = reg_wdata[0];

  assign pad_23_smt_23_we = addr_hit[33] & reg_we & !reg_error;
  assign pad_23_smt_23_wd = reg_wdata[1];

  assign pad_23_drv_23_we = addr_hit[33] & reg_we & !reg_error;
  assign pad_23_drv_23_wd = reg_wdata[3:2];

  assign pad_24_slw_24_we = addr_hit[34] & reg_we & !reg_error;
  assign pad_24_slw_24_wd = reg_wdata[0];

  assign pad_24_smt_24_we = addr_hit[34] & reg_we & !reg_error;
  assign pad_24_smt_24_wd = reg_wdata[1];

  assign pad_24_drv_24_we = addr_hit[34] & reg_we & !reg_error;
  assign pad_24_drv_24_wd = reg_wdata[3:2];

  assign pad_25_slw_25_we = addr_hit[35] & reg_we & !reg_error;
  assign pad_25_slw_25_wd = reg_wdata[0];

  assign pad_25_smt_25_we = addr_hit[35] & reg_we & !reg_error;
  assign pad_25_smt_25_wd = reg_wdata[1];

  assign pad_25_drv_25_we = addr_hit[35] & reg_we & !reg_error;
  assign pad_25_drv_25_wd = reg_wdata[3:2];

  assign pad_26_slw_26_we = addr_hit[36] & reg_we & !reg_error;
  assign pad_26_slw_26_wd = reg_wdata[0];

  assign pad_26_smt_26_we = addr_hit[36] & reg_we & !reg_error;
  assign pad_26_smt_26_wd = reg_wdata[1];

  assign pad_26_drv_26_we = addr_hit[36] & reg_we & !reg_error;
  assign pad_26_drv_26_wd = reg_wdata[3:2];

  assign pad_27_slw_27_we = addr_hit[37] & reg_we & !reg_error;
  assign pad_27_slw_27_wd = reg_wdata[0];

  assign pad_27_smt_27_we = addr_hit[37] & reg_we & !reg_error;
  assign pad_27_smt_27_wd = reg_wdata[1];

  assign pad_27_drv_27_we = addr_hit[37] & reg_we & !reg_error;
  assign pad_27_drv_27_wd = reg_wdata[3:2];

  assign pad_28_slw_28_we = addr_hit[38] & reg_we & !reg_error;
  assign pad_28_slw_28_wd = reg_wdata[0];

  assign pad_28_smt_28_we = addr_hit[38] & reg_we & !reg_error;
  assign pad_28_smt_28_wd = reg_wdata[1];

  assign pad_28_drv_28_we = addr_hit[38] & reg_we & !reg_error;
  assign pad_28_drv_28_wd = reg_wdata[3:2];

  assign pad_29_slw_29_we = addr_hit[39] & reg_we & !reg_error;
  assign pad_29_slw_29_wd = reg_wdata[0];

  assign pad_29_smt_29_we = addr_hit[39] & reg_we & !reg_error;
  assign pad_29_smt_29_wd = reg_wdata[1];

  assign pad_29_drv_29_we = addr_hit[39] & reg_we & !reg_error;
  assign pad_29_drv_29_wd = reg_wdata[3:2];

  assign pad_30_slw_30_we = addr_hit[40] & reg_we & !reg_error;
  assign pad_30_slw_30_wd = reg_wdata[0];

  assign pad_30_smt_30_we = addr_hit[40] & reg_we & !reg_error;
  assign pad_30_smt_30_wd = reg_wdata[1];

  assign pad_30_drv_30_we = addr_hit[40] & reg_we & !reg_error;
  assign pad_30_drv_30_wd = reg_wdata[3:2];

  assign isolate_0_isolate_0_we = addr_hit[41] & reg_we & !reg_error;
  assign isolate_0_isolate_0_wd = reg_wdata[4:0];

  assign isolate_0_isolate_1_we = addr_hit[41] & reg_we & !reg_error;
  assign isolate_0_isolate_1_wd = reg_wdata[9:5];

  assign isolate_0_isolate_2_we = addr_hit[41] & reg_we & !reg_error;
  assign isolate_0_isolate_2_wd = reg_wdata[14:10];

  assign isolate_0_isolate_3_we = addr_hit[41] & reg_we & !reg_error;
  assign isolate_0_isolate_3_wd = reg_wdata[19:15];

  assign isolate_0_isolate_4_we = addr_hit[41] & reg_we & !reg_error;
  assign isolate_0_isolate_4_wd = reg_wdata[24:20];

  assign isolate_0_isolate_5_we = addr_hit[41] & reg_we & !reg_error;
  assign isolate_0_isolate_5_wd = reg_wdata[29:25];

  assign isolate_1_isolate_6_we = addr_hit[42] & reg_we & !reg_error;
  assign isolate_1_isolate_6_wd = reg_wdata[4:0];

  assign isolate_1_isolate_7_we = addr_hit[42] & reg_we & !reg_error;
  assign isolate_1_isolate_7_wd = reg_wdata[9:5];

  assign isolated_0_isolated_0_re = addr_hit[43] & reg_re & !reg_error;

  assign isolated_0_isolated_1_re = addr_hit[43] & reg_re & !reg_error;

  assign isolated_0_isolated_2_re = addr_hit[43] & reg_re & !reg_error;

  assign isolated_0_isolated_3_re = addr_hit[43] & reg_re & !reg_error;

  assign isolated_0_isolated_4_re = addr_hit[43] & reg_re & !reg_error;

  assign isolated_0_isolated_5_re = addr_hit[43] & reg_re & !reg_error;

  assign isolated_1_isolated_6_re = addr_hit[44] & reg_re & !reg_error;

  assign isolated_1_isolated_7_re = addr_hit[44] & reg_re & !reg_error;

  assign ro_cache_enable_enable_0_we = addr_hit[45] & reg_we & !reg_error;
  assign ro_cache_enable_enable_0_wd = reg_wdata[0];

  assign ro_cache_enable_enable_1_we = addr_hit[45] & reg_we & !reg_error;
  assign ro_cache_enable_enable_1_wd = reg_wdata[1];

  assign ro_cache_enable_enable_2_we = addr_hit[45] & reg_we & !reg_error;
  assign ro_cache_enable_enable_2_wd = reg_wdata[2];

  assign ro_cache_enable_enable_3_we = addr_hit[45] & reg_we & !reg_error;
  assign ro_cache_enable_enable_3_wd = reg_wdata[3];

  assign ro_cache_enable_enable_4_we = addr_hit[45] & reg_we & !reg_error;
  assign ro_cache_enable_enable_4_wd = reg_wdata[4];

  assign ro_cache_enable_enable_5_we = addr_hit[45] & reg_we & !reg_error;
  assign ro_cache_enable_enable_5_wd = reg_wdata[5];

  assign ro_cache_enable_enable_6_we = addr_hit[45] & reg_we & !reg_error;
  assign ro_cache_enable_enable_6_wd = reg_wdata[6];

  assign ro_cache_enable_enable_7_we = addr_hit[45] & reg_we & !reg_error;
  assign ro_cache_enable_enable_7_wd = reg_wdata[7];

  assign ro_cache_flush_flush_0_we = addr_hit[46] & reg_we & !reg_error;
  assign ro_cache_flush_flush_0_wd = reg_wdata[0];

  assign ro_cache_flush_flush_1_we = addr_hit[46] & reg_we & !reg_error;
  assign ro_cache_flush_flush_1_wd = reg_wdata[1];

  assign ro_cache_flush_flush_2_we = addr_hit[46] & reg_we & !reg_error;
  assign ro_cache_flush_flush_2_wd = reg_wdata[2];

  assign ro_cache_flush_flush_3_we = addr_hit[46] & reg_we & !reg_error;
  assign ro_cache_flush_flush_3_wd = reg_wdata[3];

  assign ro_cache_flush_flush_4_we = addr_hit[46] & reg_we & !reg_error;
  assign ro_cache_flush_flush_4_wd = reg_wdata[4];

  assign ro_cache_flush_flush_5_we = addr_hit[46] & reg_we & !reg_error;
  assign ro_cache_flush_flush_5_wd = reg_wdata[5];

  assign ro_cache_flush_flush_6_we = addr_hit[46] & reg_we & !reg_error;
  assign ro_cache_flush_flush_6_wd = reg_wdata[6];

  assign ro_cache_flush_flush_7_we = addr_hit[46] & reg_we & !reg_error;
  assign ro_cache_flush_flush_7_wd = reg_wdata[7];

  assign ro_start_addr_low_0_quadrant_0_we = addr_hit[47] & reg_we & !reg_error;
  assign ro_start_addr_low_0_quadrant_0_wd = reg_wdata[31:0];

  assign ro_start_addr_high_0_quadrant_0_we = addr_hit[48] & reg_we & !reg_error;
  assign ro_start_addr_high_0_quadrant_0_wd = reg_wdata[15:0];

  assign ro_end_addr_low_0_quadrant_0_we = addr_hit[49] & reg_we & !reg_error;
  assign ro_end_addr_low_0_quadrant_0_wd = reg_wdata[31:0];

  assign ro_end_addr_high_0_quadrant_0_we = addr_hit[50] & reg_we & !reg_error;
  assign ro_end_addr_high_0_quadrant_0_wd = reg_wdata[15:0];

  assign ro_start_addr_low_1_quadrant_0_we = addr_hit[51] & reg_we & !reg_error;
  assign ro_start_addr_low_1_quadrant_0_wd = reg_wdata[31:0];

  assign ro_start_addr_high_1_quadrant_0_we = addr_hit[52] & reg_we & !reg_error;
  assign ro_start_addr_high_1_quadrant_0_wd = reg_wdata[15:0];

  assign ro_end_addr_low_1_quadrant_0_we = addr_hit[53] & reg_we & !reg_error;
  assign ro_end_addr_low_1_quadrant_0_wd = reg_wdata[31:0];

  assign ro_end_addr_high_1_quadrant_0_we = addr_hit[54] & reg_we & !reg_error;
  assign ro_end_addr_high_1_quadrant_0_wd = reg_wdata[15:0];

  assign ro_start_addr_low_2_quadrant_0_we = addr_hit[55] & reg_we & !reg_error;
  assign ro_start_addr_low_2_quadrant_0_wd = reg_wdata[31:0];

  assign ro_start_addr_high_2_quadrant_0_we = addr_hit[56] & reg_we & !reg_error;
  assign ro_start_addr_high_2_quadrant_0_wd = reg_wdata[15:0];

  assign ro_end_addr_low_2_quadrant_0_we = addr_hit[57] & reg_we & !reg_error;
  assign ro_end_addr_low_2_quadrant_0_wd = reg_wdata[31:0];

  assign ro_end_addr_high_2_quadrant_0_we = addr_hit[58] & reg_we & !reg_error;
  assign ro_end_addr_high_2_quadrant_0_wd = reg_wdata[15:0];

  assign ro_start_addr_low_3_quadrant_0_we = addr_hit[59] & reg_we & !reg_error;
  assign ro_start_addr_low_3_quadrant_0_wd = reg_wdata[31:0];

  assign ro_start_addr_high_3_quadrant_0_we = addr_hit[60] & reg_we & !reg_error;
  assign ro_start_addr_high_3_quadrant_0_wd = reg_wdata[15:0];

  assign ro_end_addr_low_3_quadrant_0_we = addr_hit[61] & reg_we & !reg_error;
  assign ro_end_addr_low_3_quadrant_0_wd = reg_wdata[31:0];

  assign ro_end_addr_high_3_quadrant_0_we = addr_hit[62] & reg_we & !reg_error;
  assign ro_end_addr_high_3_quadrant_0_wd = reg_wdata[15:0];

  assign ro_start_addr_low_0_quadrant_1_we = addr_hit[63] & reg_we & !reg_error;
  assign ro_start_addr_low_0_quadrant_1_wd = reg_wdata[31:0];

  assign ro_start_addr_high_0_quadrant_1_we = addr_hit[64] & reg_we & !reg_error;
  assign ro_start_addr_high_0_quadrant_1_wd = reg_wdata[15:0];

  assign ro_end_addr_low_0_quadrant_1_we = addr_hit[65] & reg_we & !reg_error;
  assign ro_end_addr_low_0_quadrant_1_wd = reg_wdata[31:0];

  assign ro_end_addr_high_0_quadrant_1_we = addr_hit[66] & reg_we & !reg_error;
  assign ro_end_addr_high_0_quadrant_1_wd = reg_wdata[15:0];

  assign ro_start_addr_low_1_quadrant_1_we = addr_hit[67] & reg_we & !reg_error;
  assign ro_start_addr_low_1_quadrant_1_wd = reg_wdata[31:0];

  assign ro_start_addr_high_1_quadrant_1_we = addr_hit[68] & reg_we & !reg_error;
  assign ro_start_addr_high_1_quadrant_1_wd = reg_wdata[15:0];

  assign ro_end_addr_low_1_quadrant_1_we = addr_hit[69] & reg_we & !reg_error;
  assign ro_end_addr_low_1_quadrant_1_wd = reg_wdata[31:0];

  assign ro_end_addr_high_1_quadrant_1_we = addr_hit[70] & reg_we & !reg_error;
  assign ro_end_addr_high_1_quadrant_1_wd = reg_wdata[15:0];

  assign ro_start_addr_low_2_quadrant_1_we = addr_hit[71] & reg_we & !reg_error;
  assign ro_start_addr_low_2_quadrant_1_wd = reg_wdata[31:0];

  assign ro_start_addr_high_2_quadrant_1_we = addr_hit[72] & reg_we & !reg_error;
  assign ro_start_addr_high_2_quadrant_1_wd = reg_wdata[15:0];

  assign ro_end_addr_low_2_quadrant_1_we = addr_hit[73] & reg_we & !reg_error;
  assign ro_end_addr_low_2_quadrant_1_wd = reg_wdata[31:0];

  assign ro_end_addr_high_2_quadrant_1_we = addr_hit[74] & reg_we & !reg_error;
  assign ro_end_addr_high_2_quadrant_1_wd = reg_wdata[15:0];

  assign ro_start_addr_low_3_quadrant_1_we = addr_hit[75] & reg_we & !reg_error;
  assign ro_start_addr_low_3_quadrant_1_wd = reg_wdata[31:0];

  assign ro_start_addr_high_3_quadrant_1_we = addr_hit[76] & reg_we & !reg_error;
  assign ro_start_addr_high_3_quadrant_1_wd = reg_wdata[15:0];

  assign ro_end_addr_low_3_quadrant_1_we = addr_hit[77] & reg_we & !reg_error;
  assign ro_end_addr_low_3_quadrant_1_wd = reg_wdata[31:0];

  assign ro_end_addr_high_3_quadrant_1_we = addr_hit[78] & reg_we & !reg_error;
  assign ro_end_addr_high_3_quadrant_1_wd = reg_wdata[15:0];

  assign ro_start_addr_low_0_quadrant_2_we = addr_hit[79] & reg_we & !reg_error;
  assign ro_start_addr_low_0_quadrant_2_wd = reg_wdata[31:0];

  assign ro_start_addr_high_0_quadrant_2_we = addr_hit[80] & reg_we & !reg_error;
  assign ro_start_addr_high_0_quadrant_2_wd = reg_wdata[15:0];

  assign ro_end_addr_low_0_quadrant_2_we = addr_hit[81] & reg_we & !reg_error;
  assign ro_end_addr_low_0_quadrant_2_wd = reg_wdata[31:0];

  assign ro_end_addr_high_0_quadrant_2_we = addr_hit[82] & reg_we & !reg_error;
  assign ro_end_addr_high_0_quadrant_2_wd = reg_wdata[15:0];

  assign ro_start_addr_low_1_quadrant_2_we = addr_hit[83] & reg_we & !reg_error;
  assign ro_start_addr_low_1_quadrant_2_wd = reg_wdata[31:0];

  assign ro_start_addr_high_1_quadrant_2_we = addr_hit[84] & reg_we & !reg_error;
  assign ro_start_addr_high_1_quadrant_2_wd = reg_wdata[15:0];

  assign ro_end_addr_low_1_quadrant_2_we = addr_hit[85] & reg_we & !reg_error;
  assign ro_end_addr_low_1_quadrant_2_wd = reg_wdata[31:0];

  assign ro_end_addr_high_1_quadrant_2_we = addr_hit[86] & reg_we & !reg_error;
  assign ro_end_addr_high_1_quadrant_2_wd = reg_wdata[15:0];

  assign ro_start_addr_low_2_quadrant_2_we = addr_hit[87] & reg_we & !reg_error;
  assign ro_start_addr_low_2_quadrant_2_wd = reg_wdata[31:0];

  assign ro_start_addr_high_2_quadrant_2_we = addr_hit[88] & reg_we & !reg_error;
  assign ro_start_addr_high_2_quadrant_2_wd = reg_wdata[15:0];

  assign ro_end_addr_low_2_quadrant_2_we = addr_hit[89] & reg_we & !reg_error;
  assign ro_end_addr_low_2_quadrant_2_wd = reg_wdata[31:0];

  assign ro_end_addr_high_2_quadrant_2_we = addr_hit[90] & reg_we & !reg_error;
  assign ro_end_addr_high_2_quadrant_2_wd = reg_wdata[15:0];

  assign ro_start_addr_low_3_quadrant_2_we = addr_hit[91] & reg_we & !reg_error;
  assign ro_start_addr_low_3_quadrant_2_wd = reg_wdata[31:0];

  assign ro_start_addr_high_3_quadrant_2_we = addr_hit[92] & reg_we & !reg_error;
  assign ro_start_addr_high_3_quadrant_2_wd = reg_wdata[15:0];

  assign ro_end_addr_low_3_quadrant_2_we = addr_hit[93] & reg_we & !reg_error;
  assign ro_end_addr_low_3_quadrant_2_wd = reg_wdata[31:0];

  assign ro_end_addr_high_3_quadrant_2_we = addr_hit[94] & reg_we & !reg_error;
  assign ro_end_addr_high_3_quadrant_2_wd = reg_wdata[15:0];

  assign ro_start_addr_low_0_quadrant_3_we = addr_hit[95] & reg_we & !reg_error;
  assign ro_start_addr_low_0_quadrant_3_wd = reg_wdata[31:0];

  assign ro_start_addr_high_0_quadrant_3_we = addr_hit[96] & reg_we & !reg_error;
  assign ro_start_addr_high_0_quadrant_3_wd = reg_wdata[15:0];

  assign ro_end_addr_low_0_quadrant_3_we = addr_hit[97] & reg_we & !reg_error;
  assign ro_end_addr_low_0_quadrant_3_wd = reg_wdata[31:0];

  assign ro_end_addr_high_0_quadrant_3_we = addr_hit[98] & reg_we & !reg_error;
  assign ro_end_addr_high_0_quadrant_3_wd = reg_wdata[15:0];

  assign ro_start_addr_low_1_quadrant_3_we = addr_hit[99] & reg_we & !reg_error;
  assign ro_start_addr_low_1_quadrant_3_wd = reg_wdata[31:0];

  assign ro_start_addr_high_1_quadrant_3_we = addr_hit[100] & reg_we & !reg_error;
  assign ro_start_addr_high_1_quadrant_3_wd = reg_wdata[15:0];

  assign ro_end_addr_low_1_quadrant_3_we = addr_hit[101] & reg_we & !reg_error;
  assign ro_end_addr_low_1_quadrant_3_wd = reg_wdata[31:0];

  assign ro_end_addr_high_1_quadrant_3_we = addr_hit[102] & reg_we & !reg_error;
  assign ro_end_addr_high_1_quadrant_3_wd = reg_wdata[15:0];

  assign ro_start_addr_low_2_quadrant_3_we = addr_hit[103] & reg_we & !reg_error;
  assign ro_start_addr_low_2_quadrant_3_wd = reg_wdata[31:0];

  assign ro_start_addr_high_2_quadrant_3_we = addr_hit[104] & reg_we & !reg_error;
  assign ro_start_addr_high_2_quadrant_3_wd = reg_wdata[15:0];

  assign ro_end_addr_low_2_quadrant_3_we = addr_hit[105] & reg_we & !reg_error;
  assign ro_end_addr_low_2_quadrant_3_wd = reg_wdata[31:0];

  assign ro_end_addr_high_2_quadrant_3_we = addr_hit[106] & reg_we & !reg_error;
  assign ro_end_addr_high_2_quadrant_3_wd = reg_wdata[15:0];

  assign ro_start_addr_low_3_quadrant_3_we = addr_hit[107] & reg_we & !reg_error;
  assign ro_start_addr_low_3_quadrant_3_wd = reg_wdata[31:0];

  assign ro_start_addr_high_3_quadrant_3_we = addr_hit[108] & reg_we & !reg_error;
  assign ro_start_addr_high_3_quadrant_3_wd = reg_wdata[15:0];

  assign ro_end_addr_low_3_quadrant_3_we = addr_hit[109] & reg_we & !reg_error;
  assign ro_end_addr_low_3_quadrant_3_wd = reg_wdata[31:0];

  assign ro_end_addr_high_3_quadrant_3_we = addr_hit[110] & reg_we & !reg_error;
  assign ro_end_addr_high_3_quadrant_3_wd = reg_wdata[15:0];

  assign ro_start_addr_low_0_quadrant_4_we = addr_hit[111] & reg_we & !reg_error;
  assign ro_start_addr_low_0_quadrant_4_wd = reg_wdata[31:0];

  assign ro_start_addr_high_0_quadrant_4_we = addr_hit[112] & reg_we & !reg_error;
  assign ro_start_addr_high_0_quadrant_4_wd = reg_wdata[15:0];

  assign ro_end_addr_low_0_quadrant_4_we = addr_hit[113] & reg_we & !reg_error;
  assign ro_end_addr_low_0_quadrant_4_wd = reg_wdata[31:0];

  assign ro_end_addr_high_0_quadrant_4_we = addr_hit[114] & reg_we & !reg_error;
  assign ro_end_addr_high_0_quadrant_4_wd = reg_wdata[15:0];

  assign ro_start_addr_low_1_quadrant_4_we = addr_hit[115] & reg_we & !reg_error;
  assign ro_start_addr_low_1_quadrant_4_wd = reg_wdata[31:0];

  assign ro_start_addr_high_1_quadrant_4_we = addr_hit[116] & reg_we & !reg_error;
  assign ro_start_addr_high_1_quadrant_4_wd = reg_wdata[15:0];

  assign ro_end_addr_low_1_quadrant_4_we = addr_hit[117] & reg_we & !reg_error;
  assign ro_end_addr_low_1_quadrant_4_wd = reg_wdata[31:0];

  assign ro_end_addr_high_1_quadrant_4_we = addr_hit[118] & reg_we & !reg_error;
  assign ro_end_addr_high_1_quadrant_4_wd = reg_wdata[15:0];

  assign ro_start_addr_low_2_quadrant_4_we = addr_hit[119] & reg_we & !reg_error;
  assign ro_start_addr_low_2_quadrant_4_wd = reg_wdata[31:0];

  assign ro_start_addr_high_2_quadrant_4_we = addr_hit[120] & reg_we & !reg_error;
  assign ro_start_addr_high_2_quadrant_4_wd = reg_wdata[15:0];

  assign ro_end_addr_low_2_quadrant_4_we = addr_hit[121] & reg_we & !reg_error;
  assign ro_end_addr_low_2_quadrant_4_wd = reg_wdata[31:0];

  assign ro_end_addr_high_2_quadrant_4_we = addr_hit[122] & reg_we & !reg_error;
  assign ro_end_addr_high_2_quadrant_4_wd = reg_wdata[15:0];

  assign ro_start_addr_low_3_quadrant_4_we = addr_hit[123] & reg_we & !reg_error;
  assign ro_start_addr_low_3_quadrant_4_wd = reg_wdata[31:0];

  assign ro_start_addr_high_3_quadrant_4_we = addr_hit[124] & reg_we & !reg_error;
  assign ro_start_addr_high_3_quadrant_4_wd = reg_wdata[15:0];

  assign ro_end_addr_low_3_quadrant_4_we = addr_hit[125] & reg_we & !reg_error;
  assign ro_end_addr_low_3_quadrant_4_wd = reg_wdata[31:0];

  assign ro_end_addr_high_3_quadrant_4_we = addr_hit[126] & reg_we & !reg_error;
  assign ro_end_addr_high_3_quadrant_4_wd = reg_wdata[15:0];

  assign ro_start_addr_low_0_quadrant_5_we = addr_hit[127] & reg_we & !reg_error;
  assign ro_start_addr_low_0_quadrant_5_wd = reg_wdata[31:0];

  assign ro_start_addr_high_0_quadrant_5_we = addr_hit[128] & reg_we & !reg_error;
  assign ro_start_addr_high_0_quadrant_5_wd = reg_wdata[15:0];

  assign ro_end_addr_low_0_quadrant_5_we = addr_hit[129] & reg_we & !reg_error;
  assign ro_end_addr_low_0_quadrant_5_wd = reg_wdata[31:0];

  assign ro_end_addr_high_0_quadrant_5_we = addr_hit[130] & reg_we & !reg_error;
  assign ro_end_addr_high_0_quadrant_5_wd = reg_wdata[15:0];

  assign ro_start_addr_low_1_quadrant_5_we = addr_hit[131] & reg_we & !reg_error;
  assign ro_start_addr_low_1_quadrant_5_wd = reg_wdata[31:0];

  assign ro_start_addr_high_1_quadrant_5_we = addr_hit[132] & reg_we & !reg_error;
  assign ro_start_addr_high_1_quadrant_5_wd = reg_wdata[15:0];

  assign ro_end_addr_low_1_quadrant_5_we = addr_hit[133] & reg_we & !reg_error;
  assign ro_end_addr_low_1_quadrant_5_wd = reg_wdata[31:0];

  assign ro_end_addr_high_1_quadrant_5_we = addr_hit[134] & reg_we & !reg_error;
  assign ro_end_addr_high_1_quadrant_5_wd = reg_wdata[15:0];

  assign ro_start_addr_low_2_quadrant_5_we = addr_hit[135] & reg_we & !reg_error;
  assign ro_start_addr_low_2_quadrant_5_wd = reg_wdata[31:0];

  assign ro_start_addr_high_2_quadrant_5_we = addr_hit[136] & reg_we & !reg_error;
  assign ro_start_addr_high_2_quadrant_5_wd = reg_wdata[15:0];

  assign ro_end_addr_low_2_quadrant_5_we = addr_hit[137] & reg_we & !reg_error;
  assign ro_end_addr_low_2_quadrant_5_wd = reg_wdata[31:0];

  assign ro_end_addr_high_2_quadrant_5_we = addr_hit[138] & reg_we & !reg_error;
  assign ro_end_addr_high_2_quadrant_5_wd = reg_wdata[15:0];

  assign ro_start_addr_low_3_quadrant_5_we = addr_hit[139] & reg_we & !reg_error;
  assign ro_start_addr_low_3_quadrant_5_wd = reg_wdata[31:0];

  assign ro_start_addr_high_3_quadrant_5_we = addr_hit[140] & reg_we & !reg_error;
  assign ro_start_addr_high_3_quadrant_5_wd = reg_wdata[15:0];

  assign ro_end_addr_low_3_quadrant_5_we = addr_hit[141] & reg_we & !reg_error;
  assign ro_end_addr_low_3_quadrant_5_wd = reg_wdata[31:0];

  assign ro_end_addr_high_3_quadrant_5_we = addr_hit[142] & reg_we & !reg_error;
  assign ro_end_addr_high_3_quadrant_5_wd = reg_wdata[15:0];

  assign ro_start_addr_low_0_quadrant_6_we = addr_hit[143] & reg_we & !reg_error;
  assign ro_start_addr_low_0_quadrant_6_wd = reg_wdata[31:0];

  assign ro_start_addr_high_0_quadrant_6_we = addr_hit[144] & reg_we & !reg_error;
  assign ro_start_addr_high_0_quadrant_6_wd = reg_wdata[15:0];

  assign ro_end_addr_low_0_quadrant_6_we = addr_hit[145] & reg_we & !reg_error;
  assign ro_end_addr_low_0_quadrant_6_wd = reg_wdata[31:0];

  assign ro_end_addr_high_0_quadrant_6_we = addr_hit[146] & reg_we & !reg_error;
  assign ro_end_addr_high_0_quadrant_6_wd = reg_wdata[15:0];

  assign ro_start_addr_low_1_quadrant_6_we = addr_hit[147] & reg_we & !reg_error;
  assign ro_start_addr_low_1_quadrant_6_wd = reg_wdata[31:0];

  assign ro_start_addr_high_1_quadrant_6_we = addr_hit[148] & reg_we & !reg_error;
  assign ro_start_addr_high_1_quadrant_6_wd = reg_wdata[15:0];

  assign ro_end_addr_low_1_quadrant_6_we = addr_hit[149] & reg_we & !reg_error;
  assign ro_end_addr_low_1_quadrant_6_wd = reg_wdata[31:0];

  assign ro_end_addr_high_1_quadrant_6_we = addr_hit[150] & reg_we & !reg_error;
  assign ro_end_addr_high_1_quadrant_6_wd = reg_wdata[15:0];

  assign ro_start_addr_low_2_quadrant_6_we = addr_hit[151] & reg_we & !reg_error;
  assign ro_start_addr_low_2_quadrant_6_wd = reg_wdata[31:0];

  assign ro_start_addr_high_2_quadrant_6_we = addr_hit[152] & reg_we & !reg_error;
  assign ro_start_addr_high_2_quadrant_6_wd = reg_wdata[15:0];

  assign ro_end_addr_low_2_quadrant_6_we = addr_hit[153] & reg_we & !reg_error;
  assign ro_end_addr_low_2_quadrant_6_wd = reg_wdata[31:0];

  assign ro_end_addr_high_2_quadrant_6_we = addr_hit[154] & reg_we & !reg_error;
  assign ro_end_addr_high_2_quadrant_6_wd = reg_wdata[15:0];

  assign ro_start_addr_low_3_quadrant_6_we = addr_hit[155] & reg_we & !reg_error;
  assign ro_start_addr_low_3_quadrant_6_wd = reg_wdata[31:0];

  assign ro_start_addr_high_3_quadrant_6_we = addr_hit[156] & reg_we & !reg_error;
  assign ro_start_addr_high_3_quadrant_6_wd = reg_wdata[15:0];

  assign ro_end_addr_low_3_quadrant_6_we = addr_hit[157] & reg_we & !reg_error;
  assign ro_end_addr_low_3_quadrant_6_wd = reg_wdata[31:0];

  assign ro_end_addr_high_3_quadrant_6_we = addr_hit[158] & reg_we & !reg_error;
  assign ro_end_addr_high_3_quadrant_6_wd = reg_wdata[15:0];

  assign ro_start_addr_low_0_quadrant_7_we = addr_hit[159] & reg_we & !reg_error;
  assign ro_start_addr_low_0_quadrant_7_wd = reg_wdata[31:0];

  assign ro_start_addr_high_0_quadrant_7_we = addr_hit[160] & reg_we & !reg_error;
  assign ro_start_addr_high_0_quadrant_7_wd = reg_wdata[15:0];

  assign ro_end_addr_low_0_quadrant_7_we = addr_hit[161] & reg_we & !reg_error;
  assign ro_end_addr_low_0_quadrant_7_wd = reg_wdata[31:0];

  assign ro_end_addr_high_0_quadrant_7_we = addr_hit[162] & reg_we & !reg_error;
  assign ro_end_addr_high_0_quadrant_7_wd = reg_wdata[15:0];

  assign ro_start_addr_low_1_quadrant_7_we = addr_hit[163] & reg_we & !reg_error;
  assign ro_start_addr_low_1_quadrant_7_wd = reg_wdata[31:0];

  assign ro_start_addr_high_1_quadrant_7_we = addr_hit[164] & reg_we & !reg_error;
  assign ro_start_addr_high_1_quadrant_7_wd = reg_wdata[15:0];

  assign ro_end_addr_low_1_quadrant_7_we = addr_hit[165] & reg_we & !reg_error;
  assign ro_end_addr_low_1_quadrant_7_wd = reg_wdata[31:0];

  assign ro_end_addr_high_1_quadrant_7_we = addr_hit[166] & reg_we & !reg_error;
  assign ro_end_addr_high_1_quadrant_7_wd = reg_wdata[15:0];

  assign ro_start_addr_low_2_quadrant_7_we = addr_hit[167] & reg_we & !reg_error;
  assign ro_start_addr_low_2_quadrant_7_wd = reg_wdata[31:0];

  assign ro_start_addr_high_2_quadrant_7_we = addr_hit[168] & reg_we & !reg_error;
  assign ro_start_addr_high_2_quadrant_7_wd = reg_wdata[15:0];

  assign ro_end_addr_low_2_quadrant_7_we = addr_hit[169] & reg_we & !reg_error;
  assign ro_end_addr_low_2_quadrant_7_wd = reg_wdata[31:0];

  assign ro_end_addr_high_2_quadrant_7_we = addr_hit[170] & reg_we & !reg_error;
  assign ro_end_addr_high_2_quadrant_7_wd = reg_wdata[15:0];

  assign ro_start_addr_low_3_quadrant_7_we = addr_hit[171] & reg_we & !reg_error;
  assign ro_start_addr_low_3_quadrant_7_wd = reg_wdata[31:0];

  assign ro_start_addr_high_3_quadrant_7_we = addr_hit[172] & reg_we & !reg_error;
  assign ro_start_addr_high_3_quadrant_7_wd = reg_wdata[15:0];

  assign ro_end_addr_low_3_quadrant_7_we = addr_hit[173] & reg_we & !reg_error;
  assign ro_end_addr_low_3_quadrant_7_wd = reg_wdata[31:0];

  assign ro_end_addr_high_3_quadrant_7_we = addr_hit[174] & reg_we & !reg_error;
  assign ro_end_addr_high_3_quadrant_7_wd = reg_wdata[15:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_ecc_uncorrectable_qs;
        reg_rdata_next[1] = intr_state_ecc_correctable_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_ecc_uncorrectable_qs;
        reg_rdata_next[1] = intr_enable_ecc_correctable_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[15:0] = version_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[1:0] = chip_id_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = scratch_0_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = scratch_1_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = scratch_2_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = scratch_3_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[1:0] = boot_mode_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = pad_0_slw_0_qs;
        reg_rdata_next[1] = pad_0_smt_0_qs;
        reg_rdata_next[3:2] = pad_0_drv_0_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = pad_1_slw_1_qs;
        reg_rdata_next[1] = pad_1_smt_1_qs;
        reg_rdata_next[3:2] = pad_1_drv_1_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = pad_2_slw_2_qs;
        reg_rdata_next[1] = pad_2_smt_2_qs;
        reg_rdata_next[3:2] = pad_2_drv_2_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = pad_3_slw_3_qs;
        reg_rdata_next[1] = pad_3_smt_3_qs;
        reg_rdata_next[3:2] = pad_3_drv_3_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = pad_4_slw_4_qs;
        reg_rdata_next[1] = pad_4_smt_4_qs;
        reg_rdata_next[3:2] = pad_4_drv_4_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = pad_5_slw_5_qs;
        reg_rdata_next[1] = pad_5_smt_5_qs;
        reg_rdata_next[3:2] = pad_5_drv_5_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = pad_6_slw_6_qs;
        reg_rdata_next[1] = pad_6_smt_6_qs;
        reg_rdata_next[3:2] = pad_6_drv_6_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[0] = pad_7_slw_7_qs;
        reg_rdata_next[1] = pad_7_smt_7_qs;
        reg_rdata_next[3:2] = pad_7_drv_7_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[0] = pad_8_slw_8_qs;
        reg_rdata_next[1] = pad_8_smt_8_qs;
        reg_rdata_next[3:2] = pad_8_drv_8_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[0] = pad_9_slw_9_qs;
        reg_rdata_next[1] = pad_9_smt_9_qs;
        reg_rdata_next[3:2] = pad_9_drv_9_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = pad_10_slw_10_qs;
        reg_rdata_next[1] = pad_10_smt_10_qs;
        reg_rdata_next[3:2] = pad_10_drv_10_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[0] = pad_11_slw_11_qs;
        reg_rdata_next[1] = pad_11_smt_11_qs;
        reg_rdata_next[3:2] = pad_11_drv_11_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[0] = pad_12_slw_12_qs;
        reg_rdata_next[1] = pad_12_smt_12_qs;
        reg_rdata_next[3:2] = pad_12_drv_12_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[0] = pad_13_slw_13_qs;
        reg_rdata_next[1] = pad_13_smt_13_qs;
        reg_rdata_next[3:2] = pad_13_drv_13_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = pad_14_slw_14_qs;
        reg_rdata_next[1] = pad_14_smt_14_qs;
        reg_rdata_next[3:2] = pad_14_drv_14_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[0] = pad_15_slw_15_qs;
        reg_rdata_next[1] = pad_15_smt_15_qs;
        reg_rdata_next[3:2] = pad_15_drv_15_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[0] = pad_16_slw_16_qs;
        reg_rdata_next[1] = pad_16_smt_16_qs;
        reg_rdata_next[3:2] = pad_16_drv_16_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[0] = pad_17_slw_17_qs;
        reg_rdata_next[1] = pad_17_smt_17_qs;
        reg_rdata_next[3:2] = pad_17_drv_17_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = pad_18_slw_18_qs;
        reg_rdata_next[1] = pad_18_smt_18_qs;
        reg_rdata_next[3:2] = pad_18_drv_18_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[0] = pad_19_slw_19_qs;
        reg_rdata_next[1] = pad_19_smt_19_qs;
        reg_rdata_next[3:2] = pad_19_drv_19_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[0] = pad_20_slw_20_qs;
        reg_rdata_next[1] = pad_20_smt_20_qs;
        reg_rdata_next[3:2] = pad_20_drv_20_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[0] = pad_21_slw_21_qs;
        reg_rdata_next[1] = pad_21_smt_21_qs;
        reg_rdata_next[3:2] = pad_21_drv_21_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[0] = pad_22_slw_22_qs;
        reg_rdata_next[1] = pad_22_smt_22_qs;
        reg_rdata_next[3:2] = pad_22_drv_22_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[0] = pad_23_slw_23_qs;
        reg_rdata_next[1] = pad_23_smt_23_qs;
        reg_rdata_next[3:2] = pad_23_drv_23_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[0] = pad_24_slw_24_qs;
        reg_rdata_next[1] = pad_24_smt_24_qs;
        reg_rdata_next[3:2] = pad_24_drv_24_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[0] = pad_25_slw_25_qs;
        reg_rdata_next[1] = pad_25_smt_25_qs;
        reg_rdata_next[3:2] = pad_25_drv_25_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[0] = pad_26_slw_26_qs;
        reg_rdata_next[1] = pad_26_smt_26_qs;
        reg_rdata_next[3:2] = pad_26_drv_26_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[0] = pad_27_slw_27_qs;
        reg_rdata_next[1] = pad_27_smt_27_qs;
        reg_rdata_next[3:2] = pad_27_drv_27_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[0] = pad_28_slw_28_qs;
        reg_rdata_next[1] = pad_28_smt_28_qs;
        reg_rdata_next[3:2] = pad_28_drv_28_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[0] = pad_29_slw_29_qs;
        reg_rdata_next[1] = pad_29_smt_29_qs;
        reg_rdata_next[3:2] = pad_29_drv_29_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[0] = pad_30_slw_30_qs;
        reg_rdata_next[1] = pad_30_smt_30_qs;
        reg_rdata_next[3:2] = pad_30_drv_30_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[4:0] = isolate_0_isolate_0_qs;
        reg_rdata_next[9:5] = isolate_0_isolate_1_qs;
        reg_rdata_next[14:10] = isolate_0_isolate_2_qs;
        reg_rdata_next[19:15] = isolate_0_isolate_3_qs;
        reg_rdata_next[24:20] = isolate_0_isolate_4_qs;
        reg_rdata_next[29:25] = isolate_0_isolate_5_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[4:0] = isolate_1_isolate_6_qs;
        reg_rdata_next[9:5] = isolate_1_isolate_7_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[4:0] = isolated_0_isolated_0_qs;
        reg_rdata_next[9:5] = isolated_0_isolated_1_qs;
        reg_rdata_next[14:10] = isolated_0_isolated_2_qs;
        reg_rdata_next[19:15] = isolated_0_isolated_3_qs;
        reg_rdata_next[24:20] = isolated_0_isolated_4_qs;
        reg_rdata_next[29:25] = isolated_0_isolated_5_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[4:0] = isolated_1_isolated_6_qs;
        reg_rdata_next[9:5] = isolated_1_isolated_7_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[0] = ro_cache_enable_enable_0_qs;
        reg_rdata_next[1] = ro_cache_enable_enable_1_qs;
        reg_rdata_next[2] = ro_cache_enable_enable_2_qs;
        reg_rdata_next[3] = ro_cache_enable_enable_3_qs;
        reg_rdata_next[4] = ro_cache_enable_enable_4_qs;
        reg_rdata_next[5] = ro_cache_enable_enable_5_qs;
        reg_rdata_next[6] = ro_cache_enable_enable_6_qs;
        reg_rdata_next[7] = ro_cache_enable_enable_7_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[0] = ro_cache_flush_flush_0_qs;
        reg_rdata_next[1] = ro_cache_flush_flush_1_qs;
        reg_rdata_next[2] = ro_cache_flush_flush_2_qs;
        reg_rdata_next[3] = ro_cache_flush_flush_3_qs;
        reg_rdata_next[4] = ro_cache_flush_flush_4_qs;
        reg_rdata_next[5] = ro_cache_flush_flush_5_qs;
        reg_rdata_next[6] = ro_cache_flush_flush_6_qs;
        reg_rdata_next[7] = ro_cache_flush_flush_7_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_0_quadrant_0_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_0_quadrant_0_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_0_quadrant_0_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_0_quadrant_0_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_1_quadrant_0_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_1_quadrant_0_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_1_quadrant_0_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_1_quadrant_0_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_2_quadrant_0_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_2_quadrant_0_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_2_quadrant_0_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_2_quadrant_0_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_3_quadrant_0_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_3_quadrant_0_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_3_quadrant_0_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_3_quadrant_0_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_0_quadrant_1_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_0_quadrant_1_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_0_quadrant_1_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_0_quadrant_1_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_1_quadrant_1_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_1_quadrant_1_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_1_quadrant_1_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_1_quadrant_1_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_2_quadrant_1_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_2_quadrant_1_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_2_quadrant_1_qs;
      end

      addr_hit[74]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_2_quadrant_1_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_3_quadrant_1_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_3_quadrant_1_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_3_quadrant_1_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_3_quadrant_1_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_0_quadrant_2_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_0_quadrant_2_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_0_quadrant_2_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_0_quadrant_2_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_1_quadrant_2_qs;
      end

      addr_hit[84]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_1_quadrant_2_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_1_quadrant_2_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_1_quadrant_2_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_2_quadrant_2_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_2_quadrant_2_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_2_quadrant_2_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_2_quadrant_2_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_3_quadrant_2_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_3_quadrant_2_qs;
      end

      addr_hit[93]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_3_quadrant_2_qs;
      end

      addr_hit[94]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_3_quadrant_2_qs;
      end

      addr_hit[95]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_0_quadrant_3_qs;
      end

      addr_hit[96]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_0_quadrant_3_qs;
      end

      addr_hit[97]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_0_quadrant_3_qs;
      end

      addr_hit[98]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_0_quadrant_3_qs;
      end

      addr_hit[99]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_1_quadrant_3_qs;
      end

      addr_hit[100]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_1_quadrant_3_qs;
      end

      addr_hit[101]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_1_quadrant_3_qs;
      end

      addr_hit[102]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_1_quadrant_3_qs;
      end

      addr_hit[103]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_2_quadrant_3_qs;
      end

      addr_hit[104]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_2_quadrant_3_qs;
      end

      addr_hit[105]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_2_quadrant_3_qs;
      end

      addr_hit[106]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_2_quadrant_3_qs;
      end

      addr_hit[107]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_3_quadrant_3_qs;
      end

      addr_hit[108]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_3_quadrant_3_qs;
      end

      addr_hit[109]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_3_quadrant_3_qs;
      end

      addr_hit[110]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_3_quadrant_3_qs;
      end

      addr_hit[111]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_0_quadrant_4_qs;
      end

      addr_hit[112]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_0_quadrant_4_qs;
      end

      addr_hit[113]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_0_quadrant_4_qs;
      end

      addr_hit[114]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_0_quadrant_4_qs;
      end

      addr_hit[115]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_1_quadrant_4_qs;
      end

      addr_hit[116]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_1_quadrant_4_qs;
      end

      addr_hit[117]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_1_quadrant_4_qs;
      end

      addr_hit[118]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_1_quadrant_4_qs;
      end

      addr_hit[119]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_2_quadrant_4_qs;
      end

      addr_hit[120]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_2_quadrant_4_qs;
      end

      addr_hit[121]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_2_quadrant_4_qs;
      end

      addr_hit[122]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_2_quadrant_4_qs;
      end

      addr_hit[123]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_3_quadrant_4_qs;
      end

      addr_hit[124]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_3_quadrant_4_qs;
      end

      addr_hit[125]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_3_quadrant_4_qs;
      end

      addr_hit[126]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_3_quadrant_4_qs;
      end

      addr_hit[127]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_0_quadrant_5_qs;
      end

      addr_hit[128]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_0_quadrant_5_qs;
      end

      addr_hit[129]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_0_quadrant_5_qs;
      end

      addr_hit[130]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_0_quadrant_5_qs;
      end

      addr_hit[131]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_1_quadrant_5_qs;
      end

      addr_hit[132]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_1_quadrant_5_qs;
      end

      addr_hit[133]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_1_quadrant_5_qs;
      end

      addr_hit[134]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_1_quadrant_5_qs;
      end

      addr_hit[135]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_2_quadrant_5_qs;
      end

      addr_hit[136]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_2_quadrant_5_qs;
      end

      addr_hit[137]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_2_quadrant_5_qs;
      end

      addr_hit[138]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_2_quadrant_5_qs;
      end

      addr_hit[139]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_3_quadrant_5_qs;
      end

      addr_hit[140]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_3_quadrant_5_qs;
      end

      addr_hit[141]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_3_quadrant_5_qs;
      end

      addr_hit[142]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_3_quadrant_5_qs;
      end

      addr_hit[143]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_0_quadrant_6_qs;
      end

      addr_hit[144]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_0_quadrant_6_qs;
      end

      addr_hit[145]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_0_quadrant_6_qs;
      end

      addr_hit[146]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_0_quadrant_6_qs;
      end

      addr_hit[147]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_1_quadrant_6_qs;
      end

      addr_hit[148]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_1_quadrant_6_qs;
      end

      addr_hit[149]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_1_quadrant_6_qs;
      end

      addr_hit[150]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_1_quadrant_6_qs;
      end

      addr_hit[151]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_2_quadrant_6_qs;
      end

      addr_hit[152]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_2_quadrant_6_qs;
      end

      addr_hit[153]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_2_quadrant_6_qs;
      end

      addr_hit[154]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_2_quadrant_6_qs;
      end

      addr_hit[155]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_3_quadrant_6_qs;
      end

      addr_hit[156]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_3_quadrant_6_qs;
      end

      addr_hit[157]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_3_quadrant_6_qs;
      end

      addr_hit[158]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_3_quadrant_6_qs;
      end

      addr_hit[159]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_0_quadrant_7_qs;
      end

      addr_hit[160]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_0_quadrant_7_qs;
      end

      addr_hit[161]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_0_quadrant_7_qs;
      end

      addr_hit[162]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_0_quadrant_7_qs;
      end

      addr_hit[163]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_1_quadrant_7_qs;
      end

      addr_hit[164]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_1_quadrant_7_qs;
      end

      addr_hit[165]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_1_quadrant_7_qs;
      end

      addr_hit[166]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_1_quadrant_7_qs;
      end

      addr_hit[167]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_2_quadrant_7_qs;
      end

      addr_hit[168]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_2_quadrant_7_qs;
      end

      addr_hit[169]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_2_quadrant_7_qs;
      end

      addr_hit[170]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_2_quadrant_7_qs;
      end

      addr_hit[171]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_3_quadrant_7_qs;
      end

      addr_hit[172]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_3_quadrant_7_qs;
      end

      addr_hit[173]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_3_quadrant_7_qs;
      end

      addr_hit[174]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_3_quadrant_7_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
