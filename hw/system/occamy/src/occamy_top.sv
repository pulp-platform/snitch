// Copyright 2020 ETH Zurich and University of Bologna.
// Solderpad Hardware License, Version 0.51, see LICENSE for details.
// SPDX-License-Identifier: SHL-0.51

// Author: Florian Zaruba <zarubaf@iis.ee.ethz.ch>
// Author: Fabian Schuiki <fschuiki@iis.ee.ethz.ch>
//
// AUTOMATICALLY GENERATED by genoccamy.py; edit the script instead.

`include "common_cells/registers.svh"

module occamy_top
  import occamy_pkg::*;
(
    input  logic             clk_i,
    input  logic             rst_ni,
    /// Peripheral clock
    input  logic             clk_periph_i,
    input  logic             rst_periph_ni,
    /// Real-time clock (for time keeping)
    input  logic             rtc_i,
    input  logic             test_mode_i,
    input  logic [ 1:0]      chip_id_i,
    input  logic [ 1:0]      boot_mode_i,
    // pad cfg
    output logic [31:0]      pad_slw_o,
    output logic [31:0]      pad_smt_o,
    output logic [31:0][1:0] pad_drv_o,
    // `uart` Interface
    output logic             uart_tx_o,
    input  logic             uart_rx_i,
    // `gpio` Interface
    input  logic [31:0]      gpio_d_i,
    output logic [31:0]      gpio_d_o,
    output logic [31:0]      gpio_oe_o,
    output logic [31:0]      gpio_puen_o,
    output logic [31:0]      gpio_pden_o,
    // `jtag` Interface
    input  logic             jtag_trst_ni,
    input  logic             jtag_tck_i,
    input  logic             jtag_tms_i,
    input  logic             jtag_tdi_i,
    output logic             jtag_tdo_o,
    // `i2c` Interface
    output logic             i2c_sda_o,
    input  logic             i2c_sda_i,
    output logic             i2c_sda_en_o,
    output logic             i2c_scl_o,
    input  logic             i2c_scl_i,
    output logic             i2c_scl_en_o,
    // `SPI Host` Interface
    output logic             spim_sck_o,
    output logic             spim_sck_en_o,
    output logic [ 1:0]      spim_csb_o,
    output logic [ 1:0]      spim_csb_en_o,
    output logic [ 3:0]      spim_sd_o,
    output logic [ 3:0]      spim_sd_en_o,
    input        [ 3:0]      spim_sd_i,

    /// Boot ROM
    output reg_a48_d32_req_t bootrom_req_o,
    input  reg_a48_d32_rsp_t bootrom_rsp_i,

    /// Clk manager
    output reg_a48_d32_req_t clk_mgr_req_o,
    input  reg_a48_d32_rsp_t clk_mgr_rsp_i,

    /// HBI Config and APB Control
    output reg_a48_d32_req_t hbi_cfg_req_o,
    input reg_a48_d32_rsp_t hbi_cfg_rsp_i,
    output apb_a48_d32_req_t apb_hbi_ctl_req_o,
    input apb_a48_d32_rsp_t apb_hbi_ctl_rsp_i,
    /// HBM Config
    output apb_a48_d32_req_t apb_hbm_cfg_req_o,
    input apb_a48_d32_rsp_t apb_hbm_cfg_rsp_i,
    output reg_a48_d32_req_t hbm_phy_cfg_req_o,
    input reg_a48_d32_rsp_t hbm_phy_cfg_rsp_i,
    output reg_a48_d32_req_t hbm_seq_req_o,
    input reg_a48_d32_rsp_t hbm_seq_rsp_i,
    /// PCIe/DDR Config
    output reg_a48_d32_req_t pcie_cfg_req_o,
    input reg_a48_d32_rsp_t pcie_cfg_rsp_i,
    /// Chip specific control registers
    output reg_a48_d32_req_t chip_ctrl_req_o,
    input reg_a48_d32_rsp_t chip_ctrl_rsp_i,
    // "external interrupts from uncore - "programmable"
    input logic [11:0] ext_irq_i,

    /// HBM2e Ports
    output axi_a48_d512_i9_u0_req_t  hbm_0_req_o,
    input  axi_a48_d512_i9_u0_resp_t hbm_0_rsp_i,
    output axi_a48_d512_i9_u0_req_t  hbm_1_req_o,
    input  axi_a48_d512_i9_u0_resp_t hbm_1_rsp_i,
    output axi_a48_d512_i9_u0_req_t  hbm_2_req_o,
    input  axi_a48_d512_i9_u0_resp_t hbm_2_rsp_i,
    output axi_a48_d512_i9_u0_req_t  hbm_3_req_o,
    input  axi_a48_d512_i9_u0_resp_t hbm_3_rsp_i,
    output axi_a48_d512_i9_u0_req_t  hbm_4_req_o,
    input  axi_a48_d512_i9_u0_resp_t hbm_4_rsp_i,
    output axi_a48_d512_i9_u0_req_t  hbm_5_req_o,
    input  axi_a48_d512_i9_u0_resp_t hbm_5_rsp_i,
    output axi_a48_d512_i9_u0_req_t  hbm_6_req_o,
    input  axi_a48_d512_i9_u0_resp_t hbm_6_rsp_i,
    output axi_a48_d512_i9_u0_req_t  hbm_7_req_o,
    input  axi_a48_d512_i9_u0_resp_t hbm_7_rsp_i,

    /// HBI Ports
    input  axi_a48_d512_i4_u0_req_t  hbi_0_req_i,
    output axi_a48_d512_i4_u0_resp_t hbi_0_rsp_o,
    output axi_a48_d512_i7_u0_req_t  hbi_0_req_o,
    input  axi_a48_d512_i7_u0_resp_t hbi_0_rsp_i,
    input  axi_a48_d512_i4_u0_req_t  hbi_1_req_i,
    output axi_a48_d512_i4_u0_resp_t hbi_1_rsp_o,
    output axi_a48_d512_i7_u0_req_t  hbi_1_req_o,
    input  axi_a48_d512_i7_u0_resp_t hbi_1_rsp_i,
    input  axi_a48_d512_i4_u0_req_t  hbi_2_req_i,
    output axi_a48_d512_i4_u0_resp_t hbi_2_rsp_o,
    output axi_a48_d512_i7_u0_req_t  hbi_2_req_o,
    input  axi_a48_d512_i7_u0_resp_t hbi_2_rsp_i,
    input  axi_a48_d512_i4_u0_req_t  hbi_3_req_i,
    output axi_a48_d512_i4_u0_resp_t hbi_3_rsp_o,
    output axi_a48_d512_i7_u0_req_t  hbi_3_req_o,
    input  axi_a48_d512_i7_u0_resp_t hbi_3_rsp_i,
    input  axi_a48_d512_i4_u0_req_t  hbi_4_req_i,
    output axi_a48_d512_i4_u0_resp_t hbi_4_rsp_o,
    output axi_a48_d512_i7_u0_req_t  hbi_4_req_o,
    input  axi_a48_d512_i7_u0_resp_t hbi_4_rsp_i,
    input  axi_a48_d512_i4_u0_req_t  hbi_5_req_i,
    output axi_a48_d512_i4_u0_resp_t hbi_5_rsp_o,
    output axi_a48_d512_i7_u0_req_t  hbi_5_req_o,
    input  axi_a48_d512_i7_u0_resp_t hbi_5_rsp_i,
    input  axi_a48_d512_i4_u0_req_t  hbi_6_req_i,
    output axi_a48_d512_i4_u0_resp_t hbi_6_rsp_o,
    output axi_a48_d512_i7_u0_req_t  hbi_6_req_o,
    input  axi_a48_d512_i7_u0_resp_t hbi_6_rsp_i,
    input  axi_a48_d512_i4_u0_req_t  hbi_7_req_i,
    output axi_a48_d512_i4_u0_resp_t hbi_7_rsp_o,
    output axi_a48_d512_i7_u0_req_t  hbi_7_req_o,
    input  axi_a48_d512_i7_u0_resp_t hbi_7_rsp_i,

    /// PCIe Ports
    output axi_a48_d512_i9_u0_req_t  pcie_axi_req_o,
    input  axi_a48_d512_i9_u0_resp_t pcie_axi_rsp_i,

    input  axi_a48_d512_i4_u0_req_t  pcie_axi_req_i,
    output axi_a48_d512_i4_u0_resp_t pcie_axi_rsp_o
);

  occamy_soc_reg_pkg::occamy_soc_reg2hw_t soc_ctrl_out;
  occamy_soc_reg_pkg::occamy_soc_hw2reg_t soc_ctrl_in;
  assign soc_ctrl_in.boot_mode.d = boot_mode_i;



  typedef logic [16:0] mem_addr_t;
  typedef logic [63:0] mem_data_t;
  typedef logic [7:0] mem_strb_t;

  logic spm_req, spm_gnt, spm_we, spm_rvalid;
  logic [1:0] spm_rerror;
  mem_addr_t spm_addr;
  mem_data_t spm_wdata, spm_rdata;
  mem_strb_t spm_strb;

  // Machine timer and machine software interrupt pending.
  logic [288:0] mtip, msip;
  // Supervisor and machine-mode external interrupt pending.
  logic [1:0] eip;
  logic [0:0] debug_req;
  occamy_interrupt_t irq;

  assign irq.ext_irq = ext_irq_i;

  addr_t [7:0] s1_quadrant_base_addr;
  assign s1_quadrant_base_addr[0] = ClusterBaseOffset + 0 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[1] = ClusterBaseOffset + 1 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[2] = ClusterBaseOffset + 2 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[3] = ClusterBaseOffset + 3 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[4] = ClusterBaseOffset + 4 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[5] = ClusterBaseOffset + 5 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[6] = ClusterBaseOffset + 6 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[7] = ClusterBaseOffset + 7 * S1QuadrantAddressSpace;

  ///////////////////
  //   CROSSBARS   //
  ///////////////////

  axi_lite_a48_d64_req_t [1:0] soc_axi_lite_periph_xbar_in_req;
  axi_lite_a48_d64_rsp_t [1:0] soc_axi_lite_periph_xbar_in_rsp;
  axi_lite_a48_d64_req_t [1:0] soc_axi_lite_periph_xbar_out_req;
  axi_lite_a48_d64_rsp_t [1:0] soc_axi_lite_periph_xbar_out_rsp;

  // The `soc_axi_lite_periph_xbar` crossbar.
  axi_lite_xbar #(
      .Cfg      (SocAxiLitePeriphXbarCfg),
      .aw_chan_t(axi_lite_a48_d64_aw_chan_t),
      .w_chan_t (axi_lite_a48_d64_w_chan_t),
      .b_chan_t (axi_lite_a48_d64_b_chan_t),
      .ar_chan_t(axi_lite_a48_d64_ar_chan_t),
      .r_chan_t (axi_lite_a48_d64_r_chan_t),
      .req_t    (axi_lite_a48_d64_req_t),
      .resp_t   (axi_lite_a48_d64_rsp_t),
      .rule_t   (xbar_rule_48_t)
  ) i_soc_axi_lite_periph_xbar (
      .clk_i                (clk_periph_i),
      .rst_ni               (rst_periph_ni),
      .test_i               (test_mode_i),
      .slv_ports_req_i      (soc_axi_lite_periph_xbar_in_req),
      .slv_ports_resp_o     (soc_axi_lite_periph_xbar_in_rsp),
      .mst_ports_req_o      (soc_axi_lite_periph_xbar_out_req),
      .mst_ports_resp_i     (soc_axi_lite_periph_xbar_out_rsp),
      .addr_map_i           (SocAxiLitePeriphXbarAddrmap),
      .en_default_mst_port_i('1),
      .default_mst_port_i   ('0)
  );

  reg_a48_d32_req_t [0:0] soc_regbus_periph_xbar_in_req;
  reg_a48_d32_rsp_t [0:0] soc_regbus_periph_xbar_in_rsp;
  reg_a48_d32_req_t [16:0] soc_regbus_periph_xbar_out_req;
  reg_a48_d32_rsp_t [16:0] soc_regbus_periph_xbar_out_rsp;

  logic [cf_math_pkg::idx_width(
SOC_REGBUS_PERIPH_XBAR_NUM_OUTPUTS
)-1:0] soc_regbus_periph_xbar_select;

  // The `soc_regbus_periph_xbar` crossbar.
  reg_demux #(
      .NoPorts(SOC_REGBUS_PERIPH_XBAR_NUM_OUTPUTS),
      .req_t  (reg_a48_d32_req_t),
      .rsp_t  (reg_a48_d32_rsp_t)
  ) i_soc_regbus_periph_xbar (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .in_select_i(soc_regbus_periph_xbar_select),
      .in_req_i(soc_regbus_periph_xbar_in_req),
      .in_rsp_o(soc_regbus_periph_xbar_in_rsp),
      .out_req_o(soc_regbus_periph_xbar_out_req),
      .out_rsp_i(soc_regbus_periph_xbar_out_rsp)
  );

  addr_decode #(
      .NoIndices(SOC_REGBUS_PERIPH_XBAR_NUM_OUTPUTS),
      .NoRules(17),
      .addr_t(logic [47:0]),
      .rule_t(xbar_rule_48_t)
  ) i_addr_decode_soc_regbus_periph_xbar (
      .addr_i(soc_regbus_periph_xbar_in_req[0].addr),
      .addr_map_i(SocRegbusPeriphXbarAddrmap),
      .idx_o(soc_regbus_periph_xbar_select),
      .dec_valid_o(),
      .dec_error_o(),
      .en_default_idx_i('0),
      .default_idx_i('0)
  );

  /// Address map of the `soc_wide_xbar` crossbar.
  xbar_rule_48_t [20:0] SocWideXbarAddrmap;
  assign SocWideXbarAddrmap = '{
  '{ idx: 8, start_addr: 48'h80000000, end_addr: 48'hc0000000 },
  '{ idx: 8, start_addr: 48'h1000000000, end_addr: 48'h1040000000 },
  '{ idx: 9, start_addr: 48'hc0000000, end_addr: 48'h100000000 },
  '{ idx: 9, start_addr: 48'h1040000000, end_addr: 48'h1080000000 },
  '{ idx: 10, start_addr: 48'h1080000000, end_addr: 48'h10c0000000 },
  '{ idx: 11, start_addr: 48'h10c0000000, end_addr: 48'h1100000000 },
  '{ idx: 12, start_addr: 48'h1100000000, end_addr: 48'h1140000000 },
  '{ idx: 13, start_addr: 48'h1140000000, end_addr: 48'h1180000000 },
  '{ idx: 14, start_addr: 48'h1180000000, end_addr: 48'h11c0000000 },
  '{ idx: 15, start_addr: 48'h11c0000000, end_addr: 48'h1200000000 },
  '{ idx: 16, start_addr: 48'h00000000, end_addr: 48'h10000000 },
  '{ idx: 16, start_addr: 48'h70000000, end_addr: 48'h70020000 },
  '{ idx: 17, start_addr: 48'h20000000, end_addr: 48'h70000000 },
  '{ idx: 0, start_addr: s1_quadrant_base_addr[0], end_addr: s1_quadrant_base_addr[0] + S1QuadrantAddressSpace },
  '{ idx: 1, start_addr: s1_quadrant_base_addr[1], end_addr: s1_quadrant_base_addr[1] + S1QuadrantAddressSpace },
  '{ idx: 2, start_addr: s1_quadrant_base_addr[2], end_addr: s1_quadrant_base_addr[2] + S1QuadrantAddressSpace },
  '{ idx: 3, start_addr: s1_quadrant_base_addr[3], end_addr: s1_quadrant_base_addr[3] + S1QuadrantAddressSpace },
  '{ idx: 4, start_addr: s1_quadrant_base_addr[4], end_addr: s1_quadrant_base_addr[4] + S1QuadrantAddressSpace },
  '{ idx: 5, start_addr: s1_quadrant_base_addr[5], end_addr: s1_quadrant_base_addr[5] + S1QuadrantAddressSpace },
  '{ idx: 6, start_addr: s1_quadrant_base_addr[6], end_addr: s1_quadrant_base_addr[6] + S1QuadrantAddressSpace },
  '{ idx: 7, start_addr: s1_quadrant_base_addr[7], end_addr: s1_quadrant_base_addr[7] + S1QuadrantAddressSpace }
};

  soc_wide_xbar_in_req_t   [17:0] soc_wide_xbar_in_req;
  soc_wide_xbar_in_resp_t  [17:0] soc_wide_xbar_in_rsp;
  soc_wide_xbar_out_req_t  [17:0] soc_wide_xbar_out_req;
  soc_wide_xbar_out_resp_t [17:0] soc_wide_xbar_out_rsp;

  axi_xbar #(
      .Cfg(SocWideXbarCfg),
      .Connectivity  ( 324'b011111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111110111111111111111111011111111111111111101111111111111111110111111111111111111011111111111111111101111111111111111110 ),
      .AtopSupport(0),
      .slv_aw_chan_t(axi_a48_d512_i4_u0_aw_chan_t),
      .mst_aw_chan_t(axi_a48_d512_i9_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i4_u0_w_chan_t),
      .slv_b_chan_t(axi_a48_d512_i4_u0_b_chan_t),
      .mst_b_chan_t(axi_a48_d512_i9_u0_b_chan_t),
      .slv_ar_chan_t(axi_a48_d512_i4_u0_ar_chan_t),
      .mst_ar_chan_t(axi_a48_d512_i9_u0_ar_chan_t),
      .slv_r_chan_t(axi_a48_d512_i4_u0_r_chan_t),
      .mst_r_chan_t(axi_a48_d512_i9_u0_r_chan_t),
      .slv_req_t(axi_a48_d512_i4_u0_req_t),
      .slv_resp_t(axi_a48_d512_i4_u0_resp_t),
      .mst_req_t(axi_a48_d512_i9_u0_req_t),
      .mst_resp_t(axi_a48_d512_i9_u0_resp_t),
      .rule_t(xbar_rule_48_t)
  ) i_soc_wide_xbar (
      .clk_i                (clk_i),
      .rst_ni               (rst_ni),
      .test_i               (test_mode_i),
      .slv_ports_req_i      (soc_wide_xbar_in_req),
      .slv_ports_resp_o     (soc_wide_xbar_in_rsp),
      .mst_ports_req_o      (soc_wide_xbar_out_req),
      .mst_ports_resp_i     (soc_wide_xbar_out_rsp),
      .addr_map_i           (SocWideXbarAddrmap),
      .en_default_mst_port_i('1),
      .default_mst_port_i   ('0)
  );

  /// Address map of the `soc_narrow_xbar` crossbar.
  xbar_rule_48_t [12:0] SocNarrowXbarAddrmap;
  assign SocNarrowXbarAddrmap = '{
  '{ idx: 8, start_addr: 48'h00000000, end_addr: 48'h00001000 },
  '{ idx: 9, start_addr: 48'h70000000, end_addr: 48'h70020000 },
  '{ idx: 10, start_addr: 48'h20000000, end_addr: 48'h70000000 },
  '{ idx: 10, start_addr: 48'h80000000, end_addr: 48'h1200000000 },
  '{ idx: 11, start_addr: 48'h01000000, end_addr: 48'h10000000 },
  '{ idx: 0, start_addr: s1_quadrant_base_addr[0], end_addr: s1_quadrant_base_addr[0] + S1QuadrantAddressSpace },
  '{ idx: 1, start_addr: s1_quadrant_base_addr[1], end_addr: s1_quadrant_base_addr[1] + S1QuadrantAddressSpace },
  '{ idx: 2, start_addr: s1_quadrant_base_addr[2], end_addr: s1_quadrant_base_addr[2] + S1QuadrantAddressSpace },
  '{ idx: 3, start_addr: s1_quadrant_base_addr[3], end_addr: s1_quadrant_base_addr[3] + S1QuadrantAddressSpace },
  '{ idx: 4, start_addr: s1_quadrant_base_addr[4], end_addr: s1_quadrant_base_addr[4] + S1QuadrantAddressSpace },
  '{ idx: 5, start_addr: s1_quadrant_base_addr[5], end_addr: s1_quadrant_base_addr[5] + S1QuadrantAddressSpace },
  '{ idx: 6, start_addr: s1_quadrant_base_addr[6], end_addr: s1_quadrant_base_addr[6] + S1QuadrantAddressSpace },
  '{ idx: 7, start_addr: s1_quadrant_base_addr[7], end_addr: s1_quadrant_base_addr[7] + S1QuadrantAddressSpace }
};

  soc_narrow_xbar_in_req_t   [10:0] soc_narrow_xbar_in_req;
  soc_narrow_xbar_in_resp_t  [10:0] soc_narrow_xbar_in_rsp;
  soc_narrow_xbar_out_req_t  [11:0] soc_narrow_xbar_out_req;
  soc_narrow_xbar_out_resp_t [11:0] soc_narrow_xbar_out_rsp;

  axi_xbar #(
      .Cfg(SocNarrowXbarCfg),
      .Connectivity  ( 132'b111011111111101111111111111111111111111101111111111110111111111111011111111111101111111111110111111111111011111111111101111111111110 ),
      .AtopSupport(1),
      .slv_aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .mst_aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .slv_b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .mst_b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .slv_ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .mst_ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .slv_r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .mst_r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .slv_req_t(axi_a48_d64_i4_u0_req_t),
      .slv_resp_t(axi_a48_d64_i4_u0_resp_t),
      .mst_req_t(axi_a48_d64_i8_u0_req_t),
      .mst_resp_t(axi_a48_d64_i8_u0_resp_t),
      .rule_t(xbar_rule_48_t)
  ) i_soc_narrow_xbar (
      .clk_i                (clk_i),
      .rst_ni               (rst_ni),
      .test_i               (test_mode_i),
      .slv_ports_req_i      (soc_narrow_xbar_in_req),
      .slv_ports_resp_o     (soc_narrow_xbar_in_rsp),
      .mst_ports_req_o      (soc_narrow_xbar_out_req),
      .mst_ports_resp_i     (soc_narrow_xbar_out_rsp),
      .addr_map_i           (SocNarrowXbarAddrmap),
      .en_default_mst_port_i('1),
      .default_mst_port_i   ('0)
  );


  /////////////////////////////
  // Narrow to Wide Crossbar //
  /////////////////////////////
  axi_a48_d64_i4_u0_req_t  soc_narrow_wide_iwc_req;
  axi_a48_d64_i4_u0_resp_t soc_narrow_wide_iwc_rsp;

  axi_id_remap #(
      .AxiSlvPortIdWidth(8),
      .AxiSlvPortMaxUniqIds(16),
      .AxiMaxTxnsPerId(4),
      .AxiMstPortIdWidth(4),
      .slv_req_t(axi_a48_d64_i8_u0_req_t),
      .slv_resp_t(axi_a48_d64_i8_u0_resp_t),
      .mst_req_t(axi_a48_d64_i4_u0_req_t),
      .mst_resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_soc_narrow_wide_iwc (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_SOC_WIDE]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_SOC_WIDE]),
      .mst_req_o(soc_narrow_wide_iwc_req),
      .mst_resp_i(soc_narrow_wide_iwc_rsp)
  );
  axi_a48_d64_i4_u0_req_t  soc_narrow_wide_amo_adapter_req;
  axi_a48_d64_i4_u0_resp_t soc_narrow_wide_amo_adapter_rsp;

  axi_riscv_atomics #(
      .AXI_ADDR_WIDTH(48),
      .AXI_DATA_WIDTH(64),
      .AXI_ID_WIDTH(4),
      .AXI_USER_WIDTH(1),
      .AXI_MAX_WRITE_TXNS(16),
      .RISCV_WORD_WIDTH(64)
  ) i_soc_narrow_wide_amo_adapter (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_aw_addr_i(soc_narrow_wide_iwc_req.aw.addr),
      .slv_aw_prot_i(soc_narrow_wide_iwc_req.aw.prot),
      .slv_aw_region_i(soc_narrow_wide_iwc_req.aw.region),
      .slv_aw_atop_i(soc_narrow_wide_iwc_req.aw.atop),
      .slv_aw_len_i(soc_narrow_wide_iwc_req.aw.len),
      .slv_aw_size_i(soc_narrow_wide_iwc_req.aw.size),
      .slv_aw_burst_i(soc_narrow_wide_iwc_req.aw.burst),
      .slv_aw_lock_i(soc_narrow_wide_iwc_req.aw.lock),
      .slv_aw_cache_i(soc_narrow_wide_iwc_req.aw.cache),
      .slv_aw_qos_i(soc_narrow_wide_iwc_req.aw.qos),
      .slv_aw_id_i(soc_narrow_wide_iwc_req.aw.id),
      .slv_aw_user_i(soc_narrow_wide_iwc_req.aw.user),
      .slv_aw_ready_o(soc_narrow_wide_iwc_rsp.aw_ready),
      .slv_aw_valid_i(soc_narrow_wide_iwc_req.aw_valid),
      .slv_ar_addr_i(soc_narrow_wide_iwc_req.ar.addr),
      .slv_ar_prot_i(soc_narrow_wide_iwc_req.ar.prot),
      .slv_ar_region_i(soc_narrow_wide_iwc_req.ar.region),
      .slv_ar_len_i(soc_narrow_wide_iwc_req.ar.len),
      .slv_ar_size_i(soc_narrow_wide_iwc_req.ar.size),
      .slv_ar_burst_i(soc_narrow_wide_iwc_req.ar.burst),
      .slv_ar_lock_i(soc_narrow_wide_iwc_req.ar.lock),
      .slv_ar_cache_i(soc_narrow_wide_iwc_req.ar.cache),
      .slv_ar_qos_i(soc_narrow_wide_iwc_req.ar.qos),
      .slv_ar_id_i(soc_narrow_wide_iwc_req.ar.id),
      .slv_ar_user_i(soc_narrow_wide_iwc_req.ar.user),
      .slv_ar_ready_o(soc_narrow_wide_iwc_rsp.ar_ready),
      .slv_ar_valid_i(soc_narrow_wide_iwc_req.ar_valid),
      .slv_w_data_i(soc_narrow_wide_iwc_req.w.data),
      .slv_w_strb_i(soc_narrow_wide_iwc_req.w.strb),
      .slv_w_user_i(soc_narrow_wide_iwc_req.w.user),
      .slv_w_last_i(soc_narrow_wide_iwc_req.w.last),
      .slv_w_ready_o(soc_narrow_wide_iwc_rsp.w_ready),
      .slv_w_valid_i(soc_narrow_wide_iwc_req.w_valid),
      .slv_r_data_o(soc_narrow_wide_iwc_rsp.r.data),
      .slv_r_resp_o(soc_narrow_wide_iwc_rsp.r.resp),
      .slv_r_last_o(soc_narrow_wide_iwc_rsp.r.last),
      .slv_r_id_o(soc_narrow_wide_iwc_rsp.r.id),
      .slv_r_user_o(soc_narrow_wide_iwc_rsp.r.user),
      .slv_r_ready_i(soc_narrow_wide_iwc_req.r_ready),
      .slv_r_valid_o(soc_narrow_wide_iwc_rsp.r_valid),
      .slv_b_resp_o(soc_narrow_wide_iwc_rsp.b.resp),
      .slv_b_id_o(soc_narrow_wide_iwc_rsp.b.id),
      .slv_b_user_o(soc_narrow_wide_iwc_rsp.b.user),
      .slv_b_ready_i(soc_narrow_wide_iwc_req.b_ready),
      .slv_b_valid_o(soc_narrow_wide_iwc_rsp.b_valid),

      .mst_aw_addr_o(soc_narrow_wide_amo_adapter_req.aw.addr),
      .mst_aw_prot_o(soc_narrow_wide_amo_adapter_req.aw.prot),
      .mst_aw_region_o(soc_narrow_wide_amo_adapter_req.aw.region),
      .mst_aw_atop_o(soc_narrow_wide_amo_adapter_req.aw.atop),
      .mst_aw_len_o(soc_narrow_wide_amo_adapter_req.aw.len),
      .mst_aw_size_o(soc_narrow_wide_amo_adapter_req.aw.size),
      .mst_aw_burst_o(soc_narrow_wide_amo_adapter_req.aw.burst),
      .mst_aw_lock_o(soc_narrow_wide_amo_adapter_req.aw.lock),
      .mst_aw_cache_o(soc_narrow_wide_amo_adapter_req.aw.cache),
      .mst_aw_qos_o(soc_narrow_wide_amo_adapter_req.aw.qos),
      .mst_aw_id_o(soc_narrow_wide_amo_adapter_req.aw.id),
      .mst_aw_user_o(soc_narrow_wide_amo_adapter_req.aw.user),
      .mst_aw_ready_i(soc_narrow_wide_amo_adapter_rsp.aw_ready),
      .mst_aw_valid_o(soc_narrow_wide_amo_adapter_req.aw_valid),
      .mst_ar_addr_o(soc_narrow_wide_amo_adapter_req.ar.addr),
      .mst_ar_prot_o(soc_narrow_wide_amo_adapter_req.ar.prot),
      .mst_ar_region_o(soc_narrow_wide_amo_adapter_req.ar.region),
      .mst_ar_len_o(soc_narrow_wide_amo_adapter_req.ar.len),
      .mst_ar_size_o(soc_narrow_wide_amo_adapter_req.ar.size),
      .mst_ar_burst_o(soc_narrow_wide_amo_adapter_req.ar.burst),
      .mst_ar_lock_o(soc_narrow_wide_amo_adapter_req.ar.lock),
      .mst_ar_cache_o(soc_narrow_wide_amo_adapter_req.ar.cache),
      .mst_ar_qos_o(soc_narrow_wide_amo_adapter_req.ar.qos),
      .mst_ar_id_o(soc_narrow_wide_amo_adapter_req.ar.id),
      .mst_ar_user_o(soc_narrow_wide_amo_adapter_req.ar.user),
      .mst_ar_ready_i(soc_narrow_wide_amo_adapter_rsp.ar_ready),
      .mst_ar_valid_o(soc_narrow_wide_amo_adapter_req.ar_valid),
      .mst_w_data_o(soc_narrow_wide_amo_adapter_req.w.data),
      .mst_w_strb_o(soc_narrow_wide_amo_adapter_req.w.strb),
      .mst_w_user_o(soc_narrow_wide_amo_adapter_req.w.user),
      .mst_w_last_o(soc_narrow_wide_amo_adapter_req.w.last),
      .mst_w_ready_i(soc_narrow_wide_amo_adapter_rsp.w_ready),
      .mst_w_valid_o(soc_narrow_wide_amo_adapter_req.w_valid),
      .mst_r_data_i(soc_narrow_wide_amo_adapter_rsp.r.data),
      .mst_r_resp_i(soc_narrow_wide_amo_adapter_rsp.r.resp),
      .mst_r_last_i(soc_narrow_wide_amo_adapter_rsp.r.last),
      .mst_r_id_i(soc_narrow_wide_amo_adapter_rsp.r.id),
      .mst_r_user_i(soc_narrow_wide_amo_adapter_rsp.r.user),
      .mst_r_ready_o(soc_narrow_wide_amo_adapter_req.r_ready),
      .mst_r_valid_i(soc_narrow_wide_amo_adapter_rsp.r_valid),
      .mst_b_resp_i(soc_narrow_wide_amo_adapter_rsp.b.resp),
      .mst_b_id_i(soc_narrow_wide_amo_adapter_rsp.b.id),
      .mst_b_user_i(soc_narrow_wide_amo_adapter_rsp.b.user),
      .mst_b_ready_o(soc_narrow_wide_amo_adapter_req.b_ready),
      .mst_b_valid_i(soc_narrow_wide_amo_adapter_rsp.b_valid)
  );

  axi_dw_converter #(
      .AxiSlvPortDataWidth(64),
      .AxiMstPortDataWidth(512),
      .AxiAddrWidth(48),
      .AxiIdWidth(4),
      .aw_chan_t(axi_a48_d512_i4_u0_aw_chan_t),
      .mst_w_chan_t(axi_a48_d512_i4_u0_w_chan_t),
      .slv_w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i4_u0_ar_chan_t),
      .mst_r_chan_t(axi_a48_d512_i4_u0_r_chan_t),
      .slv_r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .axi_mst_req_t(axi_a48_d512_i4_u0_req_t),
      .axi_mst_resp_t(axi_a48_d512_i4_u0_resp_t),
      .axi_slv_req_t(axi_a48_d64_i4_u0_req_t),
      .axi_slv_resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_soc_narrow_wide_dw (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_wide_amo_adapter_req),
      .slv_resp_o(soc_narrow_wide_amo_adapter_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_SOC_NARROW]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_SOC_NARROW])
  );



  /////////////////////////////
  // Wide to Narrow Crossbar //
  /////////////////////////////
  axi_a48_d512_i4_u0_req_t  soc_wide_narrow_iwc_req;
  axi_a48_d512_i4_u0_resp_t soc_wide_narrow_iwc_rsp;

  axi_id_remap #(
      .AxiSlvPortIdWidth(9),
      .AxiSlvPortMaxUniqIds(16),
      .AxiMaxTxnsPerId(4),
      .AxiMstPortIdWidth(4),
      .slv_req_t(axi_a48_d512_i9_u0_req_t),
      .slv_resp_t(axi_a48_d512_i9_u0_resp_t),
      .mst_req_t(axi_a48_d512_i4_u0_req_t),
      .mst_resp_t(axi_a48_d512_i4_u0_resp_t)
  ) i_soc_wide_narrow_iwc (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_SOC_NARROW]),
      .slv_resp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_SOC_NARROW]),
      .mst_req_o(soc_wide_narrow_iwc_req),
      .mst_resp_i(soc_wide_narrow_iwc_rsp)
  );
  axi_dw_converter #(
      .AxiSlvPortDataWidth(512),
      .AxiMstPortDataWidth(64),
      .AxiAddrWidth(48),
      .AxiIdWidth(4),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .mst_w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .slv_w_chan_t(axi_a48_d512_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .mst_r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .slv_r_chan_t(axi_a48_d512_i4_u0_r_chan_t),
      .axi_mst_req_t(axi_a48_d64_i4_u0_req_t),
      .axi_mst_resp_t(axi_a48_d64_i4_u0_resp_t),
      .axi_slv_req_t(axi_a48_d512_i4_u0_req_t),
      .axi_slv_resp_t(axi_a48_d512_i4_u0_resp_t)
  ) i_soc_wide_narrow_dw (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_narrow_iwc_req),
      .slv_resp_o(soc_wide_narrow_iwc_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_SOC_WIDE]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_SOC_WIDE])
  );



  //////////
  // PCIe //
  //////////
  assign pcie_axi_req_o = soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_PCIE];
  assign soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_PCIE] = pcie_axi_rsp_i;
  assign soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_PCIE] = pcie_axi_req_i;
  assign pcie_axi_rsp_o = soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_PCIE];

  //////////
  // CVA6 //
  //////////

  occamy_cva6 i_occamy_cva6 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .irq_i(eip),
      .ipi_i(msip[0]),
      .time_irq_i(mtip[0]),
      .debug_req_i(debug_req[0]),
      .axi_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_CVA6]),
      .axi_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_CVA6])
  );

  ///////////////////
  // S1 Quadrant 0 //
  ///////////////////
  axi_a48_d64_i8_u0_req_t  narrow_in_cut_0_req;
  axi_a48_d64_i8_u0_resp_t narrow_in_cut_0_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .req_t(axi_a48_d64_i8_u0_req_t),
      .resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_narrow_in_cut_0 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_0]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_0]),
      .mst_req_o(narrow_in_cut_0_req),
      .mst_resp_i(narrow_in_cut_0_rsp)
  );
  axi_a48_d64_i4_u0_req_t  narrow_out_cut_0_req;
  axi_a48_d64_i4_u0_resp_t narrow_out_cut_0_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .req_t(axi_a48_d64_i4_u0_req_t),
      .resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_narrow_out_cut_0_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_out_cut_0_req),
      .slv_resp_o(narrow_out_cut_0_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_0]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_0])
  );
  axi_a48_d512_i9_u0_req_t  wide_in_cut_0_req;
  axi_a48_d512_i9_u0_resp_t wide_in_cut_0_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i9_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i9_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i9_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i9_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i9_u0_r_chan_t),
      .req_t(axi_a48_d512_i9_u0_req_t),
      .resp_t(axi_a48_d512_i9_u0_resp_t)
  ) i_wide_in_cut_0 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_0]),
      .slv_resp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_0]),
      .mst_req_o(wide_in_cut_0_req),
      .mst_resp_i(wide_in_cut_0_rsp)
  );
  axi_a48_d512_i4_u0_req_t  wide_out_cut_0_req;
  axi_a48_d512_i4_u0_resp_t wide_out_cut_0_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i4_u0_r_chan_t),
      .req_t(axi_a48_d512_i4_u0_req_t),
      .resp_t(axi_a48_d512_i4_u0_resp_t)
  ) i_wide_out_cut_0_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_out_cut_0_req),
      .slv_resp_o(wide_out_cut_0_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_0]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_0])
  );
  axi_a48_d512_i7_u0_req_t  wide_hbi_out_cut_0_req;
  axi_a48_d512_i7_u0_resp_t wide_hbi_out_cut_0_rsp;

  axi_a48_d512_i7_u0_req_t  wide_hbi_out_cut_0_cut_req;
  axi_a48_d512_i7_u0_resp_t wide_hbi_out_cut_0_cut_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i7_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .req_t(axi_a48_d512_i7_u0_req_t),
      .resp_t(axi_a48_d512_i7_u0_resp_t)
  ) i_wide_hbi_out_cut_0_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_hbi_out_cut_0_req),
      .slv_resp_o(wide_hbi_out_cut_0_rsp),
      .mst_req_o(wide_hbi_out_cut_0_cut_req),
      .mst_resp_i(wide_hbi_out_cut_0_cut_rsp)
  );

  assign hbi_0_req_o = wide_hbi_out_cut_0_cut_req;
  assign wide_hbi_out_cut_0_cut_rsp = hbi_0_rsp_i;


  // Assemble address from `soc_ctrl` regs.
  logic [3:0][47:0] start_addr_0, end_addr_0;
  assign start_addr_0[0] = {
    soc_ctrl_out.ro_start_addr_high_0_quadrant_0.q, soc_ctrl_out.ro_start_addr_low_0_quadrant_0.q
  };
  assign end_addr_0[0] = {
    soc_ctrl_out.ro_end_addr_high_0_quadrant_0.q, soc_ctrl_out.ro_end_addr_low_0_quadrant_0.q
  };
  assign start_addr_0[1] = {
    soc_ctrl_out.ro_start_addr_high_1_quadrant_0.q, soc_ctrl_out.ro_start_addr_low_1_quadrant_0.q
  };
  assign end_addr_0[1] = {
    soc_ctrl_out.ro_end_addr_high_1_quadrant_0.q, soc_ctrl_out.ro_end_addr_low_1_quadrant_0.q
  };
  assign start_addr_0[2] = {
    soc_ctrl_out.ro_start_addr_high_2_quadrant_0.q, soc_ctrl_out.ro_start_addr_low_2_quadrant_0.q
  };
  assign end_addr_0[2] = {
    soc_ctrl_out.ro_end_addr_high_2_quadrant_0.q, soc_ctrl_out.ro_end_addr_low_2_quadrant_0.q
  };
  assign start_addr_0[3] = {
    soc_ctrl_out.ro_start_addr_high_3_quadrant_0.q, soc_ctrl_out.ro_start_addr_low_3_quadrant_0.q
  };
  assign end_addr_0[3] = {
    soc_ctrl_out.ro_end_addr_high_3_quadrant_0.q, soc_ctrl_out.ro_end_addr_low_3_quadrant_0.q
  };
  assign soc_ctrl_in.ro_cache_flush[0].de = soc_ctrl_out.ro_cache_flush[0].q & soc_ctrl_in.ro_cache_flush[0].d;

  occamy_quadrant_s1 i_occamy_quadrant_s1_0 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd0),
      // .debug_req_i (debug_req[36:1]),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i(mtip[36:1]),
      .msip_i(msip[36:1]),
      .isolate_i(soc_ctrl_out.isolate[0].q),
      .isolated_o(soc_ctrl_in.isolated[0].d),
      .ro_enable_i(soc_ctrl_out.ro_cache_enable[0].q),
      .ro_flush_valid_i(soc_ctrl_out.ro_cache_flush[0].q),
      .ro_flush_ready_o(soc_ctrl_in.ro_cache_flush[0].d),
      .ro_start_addr_i(start_addr_0),
      .ro_end_addr_i(end_addr_0),
      .quadrant_hbi_out_req_o(wide_hbi_out_cut_0_req),
      .quadrant_hbi_out_rsp_i(wide_hbi_out_cut_0_rsp),
      .quadrant_narrow_out_req_o(narrow_out_cut_0_req),
      .quadrant_narrow_out_rsp_i(narrow_out_cut_0_rsp),
      .quadrant_narrow_in_req_i(narrow_in_cut_0_req),
      .quadrant_narrow_in_rsp_o(narrow_in_cut_0_rsp),
      .quadrant_wide_out_req_o(wide_out_cut_0_req),
      .quadrant_wide_out_rsp_i(wide_out_cut_0_rsp),
      .quadrant_wide_in_req_i(wide_in_cut_0_req),
      .quadrant_wide_in_rsp_o(wide_in_cut_0_rsp)
  );

  ///////////////////
  // S1 Quadrant 1 //
  ///////////////////
  axi_a48_d64_i8_u0_req_t  narrow_in_cut_1_req;
  axi_a48_d64_i8_u0_resp_t narrow_in_cut_1_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .req_t(axi_a48_d64_i8_u0_req_t),
      .resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_narrow_in_cut_1 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_1]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_1]),
      .mst_req_o(narrow_in_cut_1_req),
      .mst_resp_i(narrow_in_cut_1_rsp)
  );
  axi_a48_d64_i4_u0_req_t  narrow_out_cut_1_req;
  axi_a48_d64_i4_u0_resp_t narrow_out_cut_1_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .req_t(axi_a48_d64_i4_u0_req_t),
      .resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_narrow_out_cut_1_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_out_cut_1_req),
      .slv_resp_o(narrow_out_cut_1_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_1]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_1])
  );
  axi_a48_d512_i9_u0_req_t  wide_in_cut_1_req;
  axi_a48_d512_i9_u0_resp_t wide_in_cut_1_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i9_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i9_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i9_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i9_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i9_u0_r_chan_t),
      .req_t(axi_a48_d512_i9_u0_req_t),
      .resp_t(axi_a48_d512_i9_u0_resp_t)
  ) i_wide_in_cut_1 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_1]),
      .slv_resp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_1]),
      .mst_req_o(wide_in_cut_1_req),
      .mst_resp_i(wide_in_cut_1_rsp)
  );
  axi_a48_d512_i4_u0_req_t  wide_out_cut_1_req;
  axi_a48_d512_i4_u0_resp_t wide_out_cut_1_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i4_u0_r_chan_t),
      .req_t(axi_a48_d512_i4_u0_req_t),
      .resp_t(axi_a48_d512_i4_u0_resp_t)
  ) i_wide_out_cut_1_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_out_cut_1_req),
      .slv_resp_o(wide_out_cut_1_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_1]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_1])
  );
  axi_a48_d512_i7_u0_req_t  wide_hbi_out_cut_1_req;
  axi_a48_d512_i7_u0_resp_t wide_hbi_out_cut_1_rsp;

  axi_a48_d512_i7_u0_req_t  wide_hbi_out_cut_1_cut_req;
  axi_a48_d512_i7_u0_resp_t wide_hbi_out_cut_1_cut_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i7_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .req_t(axi_a48_d512_i7_u0_req_t),
      .resp_t(axi_a48_d512_i7_u0_resp_t)
  ) i_wide_hbi_out_cut_1_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_hbi_out_cut_1_req),
      .slv_resp_o(wide_hbi_out_cut_1_rsp),
      .mst_req_o(wide_hbi_out_cut_1_cut_req),
      .mst_resp_i(wide_hbi_out_cut_1_cut_rsp)
  );

  assign hbi_1_req_o = wide_hbi_out_cut_1_cut_req;
  assign wide_hbi_out_cut_1_cut_rsp = hbi_1_rsp_i;


  // Assemble address from `soc_ctrl` regs.
  logic [3:0][47:0] start_addr_1, end_addr_1;
  assign start_addr_1[0] = {
    soc_ctrl_out.ro_start_addr_high_0_quadrant_1.q, soc_ctrl_out.ro_start_addr_low_0_quadrant_1.q
  };
  assign end_addr_1[0] = {
    soc_ctrl_out.ro_end_addr_high_0_quadrant_1.q, soc_ctrl_out.ro_end_addr_low_0_quadrant_1.q
  };
  assign start_addr_1[1] = {
    soc_ctrl_out.ro_start_addr_high_1_quadrant_1.q, soc_ctrl_out.ro_start_addr_low_1_quadrant_1.q
  };
  assign end_addr_1[1] = {
    soc_ctrl_out.ro_end_addr_high_1_quadrant_1.q, soc_ctrl_out.ro_end_addr_low_1_quadrant_1.q
  };
  assign start_addr_1[2] = {
    soc_ctrl_out.ro_start_addr_high_2_quadrant_1.q, soc_ctrl_out.ro_start_addr_low_2_quadrant_1.q
  };
  assign end_addr_1[2] = {
    soc_ctrl_out.ro_end_addr_high_2_quadrant_1.q, soc_ctrl_out.ro_end_addr_low_2_quadrant_1.q
  };
  assign start_addr_1[3] = {
    soc_ctrl_out.ro_start_addr_high_3_quadrant_1.q, soc_ctrl_out.ro_start_addr_low_3_quadrant_1.q
  };
  assign end_addr_1[3] = {
    soc_ctrl_out.ro_end_addr_high_3_quadrant_1.q, soc_ctrl_out.ro_end_addr_low_3_quadrant_1.q
  };
  assign soc_ctrl_in.ro_cache_flush[1].de = soc_ctrl_out.ro_cache_flush[1].q & soc_ctrl_in.ro_cache_flush[1].d;

  occamy_quadrant_s1 i_occamy_quadrant_s1_1 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd1),
      // .debug_req_i (debug_req[72:37]),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i(mtip[72:37]),
      .msip_i(msip[72:37]),
      .isolate_i(soc_ctrl_out.isolate[1].q),
      .isolated_o(soc_ctrl_in.isolated[1].d),
      .ro_enable_i(soc_ctrl_out.ro_cache_enable[1].q),
      .ro_flush_valid_i(soc_ctrl_out.ro_cache_flush[1].q),
      .ro_flush_ready_o(soc_ctrl_in.ro_cache_flush[1].d),
      .ro_start_addr_i(start_addr_1),
      .ro_end_addr_i(end_addr_1),
      .quadrant_hbi_out_req_o(wide_hbi_out_cut_1_req),
      .quadrant_hbi_out_rsp_i(wide_hbi_out_cut_1_rsp),
      .quadrant_narrow_out_req_o(narrow_out_cut_1_req),
      .quadrant_narrow_out_rsp_i(narrow_out_cut_1_rsp),
      .quadrant_narrow_in_req_i(narrow_in_cut_1_req),
      .quadrant_narrow_in_rsp_o(narrow_in_cut_1_rsp),
      .quadrant_wide_out_req_o(wide_out_cut_1_req),
      .quadrant_wide_out_rsp_i(wide_out_cut_1_rsp),
      .quadrant_wide_in_req_i(wide_in_cut_1_req),
      .quadrant_wide_in_rsp_o(wide_in_cut_1_rsp)
  );

  ///////////////////
  // S1 Quadrant 2 //
  ///////////////////
  axi_a48_d64_i8_u0_req_t  narrow_in_cut_2_req;
  axi_a48_d64_i8_u0_resp_t narrow_in_cut_2_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .req_t(axi_a48_d64_i8_u0_req_t),
      .resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_narrow_in_cut_2 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_2]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_2]),
      .mst_req_o(narrow_in_cut_2_req),
      .mst_resp_i(narrow_in_cut_2_rsp)
  );
  axi_a48_d64_i4_u0_req_t  narrow_out_cut_2_req;
  axi_a48_d64_i4_u0_resp_t narrow_out_cut_2_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .req_t(axi_a48_d64_i4_u0_req_t),
      .resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_narrow_out_cut_2_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_out_cut_2_req),
      .slv_resp_o(narrow_out_cut_2_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_2]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_2])
  );
  axi_a48_d512_i9_u0_req_t  wide_in_cut_2_req;
  axi_a48_d512_i9_u0_resp_t wide_in_cut_2_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i9_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i9_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i9_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i9_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i9_u0_r_chan_t),
      .req_t(axi_a48_d512_i9_u0_req_t),
      .resp_t(axi_a48_d512_i9_u0_resp_t)
  ) i_wide_in_cut_2 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_2]),
      .slv_resp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_2]),
      .mst_req_o(wide_in_cut_2_req),
      .mst_resp_i(wide_in_cut_2_rsp)
  );
  axi_a48_d512_i4_u0_req_t  wide_out_cut_2_req;
  axi_a48_d512_i4_u0_resp_t wide_out_cut_2_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i4_u0_r_chan_t),
      .req_t(axi_a48_d512_i4_u0_req_t),
      .resp_t(axi_a48_d512_i4_u0_resp_t)
  ) i_wide_out_cut_2_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_out_cut_2_req),
      .slv_resp_o(wide_out_cut_2_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_2]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_2])
  );
  axi_a48_d512_i7_u0_req_t  wide_hbi_out_cut_2_req;
  axi_a48_d512_i7_u0_resp_t wide_hbi_out_cut_2_rsp;

  axi_a48_d512_i7_u0_req_t  wide_hbi_out_cut_2_cut_req;
  axi_a48_d512_i7_u0_resp_t wide_hbi_out_cut_2_cut_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i7_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .req_t(axi_a48_d512_i7_u0_req_t),
      .resp_t(axi_a48_d512_i7_u0_resp_t)
  ) i_wide_hbi_out_cut_2_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_hbi_out_cut_2_req),
      .slv_resp_o(wide_hbi_out_cut_2_rsp),
      .mst_req_o(wide_hbi_out_cut_2_cut_req),
      .mst_resp_i(wide_hbi_out_cut_2_cut_rsp)
  );

  assign hbi_2_req_o = wide_hbi_out_cut_2_cut_req;
  assign wide_hbi_out_cut_2_cut_rsp = hbi_2_rsp_i;


  // Assemble address from `soc_ctrl` regs.
  logic [3:0][47:0] start_addr_2, end_addr_2;
  assign start_addr_2[0] = {
    soc_ctrl_out.ro_start_addr_high_0_quadrant_2.q, soc_ctrl_out.ro_start_addr_low_0_quadrant_2.q
  };
  assign end_addr_2[0] = {
    soc_ctrl_out.ro_end_addr_high_0_quadrant_2.q, soc_ctrl_out.ro_end_addr_low_0_quadrant_2.q
  };
  assign start_addr_2[1] = {
    soc_ctrl_out.ro_start_addr_high_1_quadrant_2.q, soc_ctrl_out.ro_start_addr_low_1_quadrant_2.q
  };
  assign end_addr_2[1] = {
    soc_ctrl_out.ro_end_addr_high_1_quadrant_2.q, soc_ctrl_out.ro_end_addr_low_1_quadrant_2.q
  };
  assign start_addr_2[2] = {
    soc_ctrl_out.ro_start_addr_high_2_quadrant_2.q, soc_ctrl_out.ro_start_addr_low_2_quadrant_2.q
  };
  assign end_addr_2[2] = {
    soc_ctrl_out.ro_end_addr_high_2_quadrant_2.q, soc_ctrl_out.ro_end_addr_low_2_quadrant_2.q
  };
  assign start_addr_2[3] = {
    soc_ctrl_out.ro_start_addr_high_3_quadrant_2.q, soc_ctrl_out.ro_start_addr_low_3_quadrant_2.q
  };
  assign end_addr_2[3] = {
    soc_ctrl_out.ro_end_addr_high_3_quadrant_2.q, soc_ctrl_out.ro_end_addr_low_3_quadrant_2.q
  };
  assign soc_ctrl_in.ro_cache_flush[2].de = soc_ctrl_out.ro_cache_flush[2].q & soc_ctrl_in.ro_cache_flush[2].d;

  occamy_quadrant_s1 i_occamy_quadrant_s1_2 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd2),
      // .debug_req_i (debug_req[108:73]),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i(mtip[108:73]),
      .msip_i(msip[108:73]),
      .isolate_i(soc_ctrl_out.isolate[2].q),
      .isolated_o(soc_ctrl_in.isolated[2].d),
      .ro_enable_i(soc_ctrl_out.ro_cache_enable[2].q),
      .ro_flush_valid_i(soc_ctrl_out.ro_cache_flush[2].q),
      .ro_flush_ready_o(soc_ctrl_in.ro_cache_flush[2].d),
      .ro_start_addr_i(start_addr_2),
      .ro_end_addr_i(end_addr_2),
      .quadrant_hbi_out_req_o(wide_hbi_out_cut_2_req),
      .quadrant_hbi_out_rsp_i(wide_hbi_out_cut_2_rsp),
      .quadrant_narrow_out_req_o(narrow_out_cut_2_req),
      .quadrant_narrow_out_rsp_i(narrow_out_cut_2_rsp),
      .quadrant_narrow_in_req_i(narrow_in_cut_2_req),
      .quadrant_narrow_in_rsp_o(narrow_in_cut_2_rsp),
      .quadrant_wide_out_req_o(wide_out_cut_2_req),
      .quadrant_wide_out_rsp_i(wide_out_cut_2_rsp),
      .quadrant_wide_in_req_i(wide_in_cut_2_req),
      .quadrant_wide_in_rsp_o(wide_in_cut_2_rsp)
  );

  ///////////////////
  // S1 Quadrant 3 //
  ///////////////////
  axi_a48_d64_i8_u0_req_t  narrow_in_cut_3_req;
  axi_a48_d64_i8_u0_resp_t narrow_in_cut_3_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .req_t(axi_a48_d64_i8_u0_req_t),
      .resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_narrow_in_cut_3 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_3]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_3]),
      .mst_req_o(narrow_in_cut_3_req),
      .mst_resp_i(narrow_in_cut_3_rsp)
  );
  axi_a48_d64_i4_u0_req_t  narrow_out_cut_3_req;
  axi_a48_d64_i4_u0_resp_t narrow_out_cut_3_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .req_t(axi_a48_d64_i4_u0_req_t),
      .resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_narrow_out_cut_3_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_out_cut_3_req),
      .slv_resp_o(narrow_out_cut_3_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_3]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_3])
  );
  axi_a48_d512_i9_u0_req_t  wide_in_cut_3_req;
  axi_a48_d512_i9_u0_resp_t wide_in_cut_3_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i9_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i9_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i9_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i9_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i9_u0_r_chan_t),
      .req_t(axi_a48_d512_i9_u0_req_t),
      .resp_t(axi_a48_d512_i9_u0_resp_t)
  ) i_wide_in_cut_3 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_3]),
      .slv_resp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_3]),
      .mst_req_o(wide_in_cut_3_req),
      .mst_resp_i(wide_in_cut_3_rsp)
  );
  axi_a48_d512_i4_u0_req_t  wide_out_cut_3_req;
  axi_a48_d512_i4_u0_resp_t wide_out_cut_3_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i4_u0_r_chan_t),
      .req_t(axi_a48_d512_i4_u0_req_t),
      .resp_t(axi_a48_d512_i4_u0_resp_t)
  ) i_wide_out_cut_3_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_out_cut_3_req),
      .slv_resp_o(wide_out_cut_3_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_3]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_3])
  );
  axi_a48_d512_i7_u0_req_t  wide_hbi_out_cut_3_req;
  axi_a48_d512_i7_u0_resp_t wide_hbi_out_cut_3_rsp;

  axi_a48_d512_i7_u0_req_t  wide_hbi_out_cut_3_cut_req;
  axi_a48_d512_i7_u0_resp_t wide_hbi_out_cut_3_cut_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i7_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .req_t(axi_a48_d512_i7_u0_req_t),
      .resp_t(axi_a48_d512_i7_u0_resp_t)
  ) i_wide_hbi_out_cut_3_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_hbi_out_cut_3_req),
      .slv_resp_o(wide_hbi_out_cut_3_rsp),
      .mst_req_o(wide_hbi_out_cut_3_cut_req),
      .mst_resp_i(wide_hbi_out_cut_3_cut_rsp)
  );

  assign hbi_3_req_o = wide_hbi_out_cut_3_cut_req;
  assign wide_hbi_out_cut_3_cut_rsp = hbi_3_rsp_i;


  // Assemble address from `soc_ctrl` regs.
  logic [3:0][47:0] start_addr_3, end_addr_3;
  assign start_addr_3[0] = {
    soc_ctrl_out.ro_start_addr_high_0_quadrant_3.q, soc_ctrl_out.ro_start_addr_low_0_quadrant_3.q
  };
  assign end_addr_3[0] = {
    soc_ctrl_out.ro_end_addr_high_0_quadrant_3.q, soc_ctrl_out.ro_end_addr_low_0_quadrant_3.q
  };
  assign start_addr_3[1] = {
    soc_ctrl_out.ro_start_addr_high_1_quadrant_3.q, soc_ctrl_out.ro_start_addr_low_1_quadrant_3.q
  };
  assign end_addr_3[1] = {
    soc_ctrl_out.ro_end_addr_high_1_quadrant_3.q, soc_ctrl_out.ro_end_addr_low_1_quadrant_3.q
  };
  assign start_addr_3[2] = {
    soc_ctrl_out.ro_start_addr_high_2_quadrant_3.q, soc_ctrl_out.ro_start_addr_low_2_quadrant_3.q
  };
  assign end_addr_3[2] = {
    soc_ctrl_out.ro_end_addr_high_2_quadrant_3.q, soc_ctrl_out.ro_end_addr_low_2_quadrant_3.q
  };
  assign start_addr_3[3] = {
    soc_ctrl_out.ro_start_addr_high_3_quadrant_3.q, soc_ctrl_out.ro_start_addr_low_3_quadrant_3.q
  };
  assign end_addr_3[3] = {
    soc_ctrl_out.ro_end_addr_high_3_quadrant_3.q, soc_ctrl_out.ro_end_addr_low_3_quadrant_3.q
  };
  assign soc_ctrl_in.ro_cache_flush[3].de = soc_ctrl_out.ro_cache_flush[3].q & soc_ctrl_in.ro_cache_flush[3].d;

  occamy_quadrant_s1 i_occamy_quadrant_s1_3 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd3),
      // .debug_req_i (debug_req[144:109]),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i(mtip[144:109]),
      .msip_i(msip[144:109]),
      .isolate_i(soc_ctrl_out.isolate[3].q),
      .isolated_o(soc_ctrl_in.isolated[3].d),
      .ro_enable_i(soc_ctrl_out.ro_cache_enable[3].q),
      .ro_flush_valid_i(soc_ctrl_out.ro_cache_flush[3].q),
      .ro_flush_ready_o(soc_ctrl_in.ro_cache_flush[3].d),
      .ro_start_addr_i(start_addr_3),
      .ro_end_addr_i(end_addr_3),
      .quadrant_hbi_out_req_o(wide_hbi_out_cut_3_req),
      .quadrant_hbi_out_rsp_i(wide_hbi_out_cut_3_rsp),
      .quadrant_narrow_out_req_o(narrow_out_cut_3_req),
      .quadrant_narrow_out_rsp_i(narrow_out_cut_3_rsp),
      .quadrant_narrow_in_req_i(narrow_in_cut_3_req),
      .quadrant_narrow_in_rsp_o(narrow_in_cut_3_rsp),
      .quadrant_wide_out_req_o(wide_out_cut_3_req),
      .quadrant_wide_out_rsp_i(wide_out_cut_3_rsp),
      .quadrant_wide_in_req_i(wide_in_cut_3_req),
      .quadrant_wide_in_rsp_o(wide_in_cut_3_rsp)
  );

  ///////////////////
  // S1 Quadrant 4 //
  ///////////////////
  axi_a48_d64_i8_u0_req_t  narrow_in_cut_4_req;
  axi_a48_d64_i8_u0_resp_t narrow_in_cut_4_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .req_t(axi_a48_d64_i8_u0_req_t),
      .resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_narrow_in_cut_4 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_4]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_4]),
      .mst_req_o(narrow_in_cut_4_req),
      .mst_resp_i(narrow_in_cut_4_rsp)
  );
  axi_a48_d64_i4_u0_req_t  narrow_out_cut_4_req;
  axi_a48_d64_i4_u0_resp_t narrow_out_cut_4_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .req_t(axi_a48_d64_i4_u0_req_t),
      .resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_narrow_out_cut_4_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_out_cut_4_req),
      .slv_resp_o(narrow_out_cut_4_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_4]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_4])
  );
  axi_a48_d512_i9_u0_req_t  wide_in_cut_4_req;
  axi_a48_d512_i9_u0_resp_t wide_in_cut_4_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i9_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i9_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i9_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i9_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i9_u0_r_chan_t),
      .req_t(axi_a48_d512_i9_u0_req_t),
      .resp_t(axi_a48_d512_i9_u0_resp_t)
  ) i_wide_in_cut_4 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_4]),
      .slv_resp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_4]),
      .mst_req_o(wide_in_cut_4_req),
      .mst_resp_i(wide_in_cut_4_rsp)
  );
  axi_a48_d512_i4_u0_req_t  wide_out_cut_4_req;
  axi_a48_d512_i4_u0_resp_t wide_out_cut_4_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i4_u0_r_chan_t),
      .req_t(axi_a48_d512_i4_u0_req_t),
      .resp_t(axi_a48_d512_i4_u0_resp_t)
  ) i_wide_out_cut_4_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_out_cut_4_req),
      .slv_resp_o(wide_out_cut_4_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_4]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_4])
  );
  axi_a48_d512_i7_u0_req_t  wide_hbi_out_cut_4_req;
  axi_a48_d512_i7_u0_resp_t wide_hbi_out_cut_4_rsp;

  axi_a48_d512_i7_u0_req_t  wide_hbi_out_cut_4_cut_req;
  axi_a48_d512_i7_u0_resp_t wide_hbi_out_cut_4_cut_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i7_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .req_t(axi_a48_d512_i7_u0_req_t),
      .resp_t(axi_a48_d512_i7_u0_resp_t)
  ) i_wide_hbi_out_cut_4_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_hbi_out_cut_4_req),
      .slv_resp_o(wide_hbi_out_cut_4_rsp),
      .mst_req_o(wide_hbi_out_cut_4_cut_req),
      .mst_resp_i(wide_hbi_out_cut_4_cut_rsp)
  );

  assign hbi_4_req_o = wide_hbi_out_cut_4_cut_req;
  assign wide_hbi_out_cut_4_cut_rsp = hbi_4_rsp_i;


  // Assemble address from `soc_ctrl` regs.
  logic [3:0][47:0] start_addr_4, end_addr_4;
  assign start_addr_4[0] = {
    soc_ctrl_out.ro_start_addr_high_0_quadrant_4.q, soc_ctrl_out.ro_start_addr_low_0_quadrant_4.q
  };
  assign end_addr_4[0] = {
    soc_ctrl_out.ro_end_addr_high_0_quadrant_4.q, soc_ctrl_out.ro_end_addr_low_0_quadrant_4.q
  };
  assign start_addr_4[1] = {
    soc_ctrl_out.ro_start_addr_high_1_quadrant_4.q, soc_ctrl_out.ro_start_addr_low_1_quadrant_4.q
  };
  assign end_addr_4[1] = {
    soc_ctrl_out.ro_end_addr_high_1_quadrant_4.q, soc_ctrl_out.ro_end_addr_low_1_quadrant_4.q
  };
  assign start_addr_4[2] = {
    soc_ctrl_out.ro_start_addr_high_2_quadrant_4.q, soc_ctrl_out.ro_start_addr_low_2_quadrant_4.q
  };
  assign end_addr_4[2] = {
    soc_ctrl_out.ro_end_addr_high_2_quadrant_4.q, soc_ctrl_out.ro_end_addr_low_2_quadrant_4.q
  };
  assign start_addr_4[3] = {
    soc_ctrl_out.ro_start_addr_high_3_quadrant_4.q, soc_ctrl_out.ro_start_addr_low_3_quadrant_4.q
  };
  assign end_addr_4[3] = {
    soc_ctrl_out.ro_end_addr_high_3_quadrant_4.q, soc_ctrl_out.ro_end_addr_low_3_quadrant_4.q
  };
  assign soc_ctrl_in.ro_cache_flush[4].de = soc_ctrl_out.ro_cache_flush[4].q & soc_ctrl_in.ro_cache_flush[4].d;

  occamy_quadrant_s1 i_occamy_quadrant_s1_4 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd4),
      // .debug_req_i (debug_req[180:145]),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i(mtip[180:145]),
      .msip_i(msip[180:145]),
      .isolate_i(soc_ctrl_out.isolate[4].q),
      .isolated_o(soc_ctrl_in.isolated[4].d),
      .ro_enable_i(soc_ctrl_out.ro_cache_enable[4].q),
      .ro_flush_valid_i(soc_ctrl_out.ro_cache_flush[4].q),
      .ro_flush_ready_o(soc_ctrl_in.ro_cache_flush[4].d),
      .ro_start_addr_i(start_addr_4),
      .ro_end_addr_i(end_addr_4),
      .quadrant_hbi_out_req_o(wide_hbi_out_cut_4_req),
      .quadrant_hbi_out_rsp_i(wide_hbi_out_cut_4_rsp),
      .quadrant_narrow_out_req_o(narrow_out_cut_4_req),
      .quadrant_narrow_out_rsp_i(narrow_out_cut_4_rsp),
      .quadrant_narrow_in_req_i(narrow_in_cut_4_req),
      .quadrant_narrow_in_rsp_o(narrow_in_cut_4_rsp),
      .quadrant_wide_out_req_o(wide_out_cut_4_req),
      .quadrant_wide_out_rsp_i(wide_out_cut_4_rsp),
      .quadrant_wide_in_req_i(wide_in_cut_4_req),
      .quadrant_wide_in_rsp_o(wide_in_cut_4_rsp)
  );

  ///////////////////
  // S1 Quadrant 5 //
  ///////////////////
  axi_a48_d64_i8_u0_req_t  narrow_in_cut_5_req;
  axi_a48_d64_i8_u0_resp_t narrow_in_cut_5_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .req_t(axi_a48_d64_i8_u0_req_t),
      .resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_narrow_in_cut_5 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_5]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_5]),
      .mst_req_o(narrow_in_cut_5_req),
      .mst_resp_i(narrow_in_cut_5_rsp)
  );
  axi_a48_d64_i4_u0_req_t  narrow_out_cut_5_req;
  axi_a48_d64_i4_u0_resp_t narrow_out_cut_5_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .req_t(axi_a48_d64_i4_u0_req_t),
      .resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_narrow_out_cut_5_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_out_cut_5_req),
      .slv_resp_o(narrow_out_cut_5_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_5]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_5])
  );
  axi_a48_d512_i9_u0_req_t  wide_in_cut_5_req;
  axi_a48_d512_i9_u0_resp_t wide_in_cut_5_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i9_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i9_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i9_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i9_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i9_u0_r_chan_t),
      .req_t(axi_a48_d512_i9_u0_req_t),
      .resp_t(axi_a48_d512_i9_u0_resp_t)
  ) i_wide_in_cut_5 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_5]),
      .slv_resp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_5]),
      .mst_req_o(wide_in_cut_5_req),
      .mst_resp_i(wide_in_cut_5_rsp)
  );
  axi_a48_d512_i4_u0_req_t  wide_out_cut_5_req;
  axi_a48_d512_i4_u0_resp_t wide_out_cut_5_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i4_u0_r_chan_t),
      .req_t(axi_a48_d512_i4_u0_req_t),
      .resp_t(axi_a48_d512_i4_u0_resp_t)
  ) i_wide_out_cut_5_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_out_cut_5_req),
      .slv_resp_o(wide_out_cut_5_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_5]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_5])
  );
  axi_a48_d512_i7_u0_req_t  wide_hbi_out_cut_5_req;
  axi_a48_d512_i7_u0_resp_t wide_hbi_out_cut_5_rsp;

  axi_a48_d512_i7_u0_req_t  wide_hbi_out_cut_5_cut_req;
  axi_a48_d512_i7_u0_resp_t wide_hbi_out_cut_5_cut_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i7_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .req_t(axi_a48_d512_i7_u0_req_t),
      .resp_t(axi_a48_d512_i7_u0_resp_t)
  ) i_wide_hbi_out_cut_5_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_hbi_out_cut_5_req),
      .slv_resp_o(wide_hbi_out_cut_5_rsp),
      .mst_req_o(wide_hbi_out_cut_5_cut_req),
      .mst_resp_i(wide_hbi_out_cut_5_cut_rsp)
  );

  assign hbi_5_req_o = wide_hbi_out_cut_5_cut_req;
  assign wide_hbi_out_cut_5_cut_rsp = hbi_5_rsp_i;


  // Assemble address from `soc_ctrl` regs.
  logic [3:0][47:0] start_addr_5, end_addr_5;
  assign start_addr_5[0] = {
    soc_ctrl_out.ro_start_addr_high_0_quadrant_5.q, soc_ctrl_out.ro_start_addr_low_0_quadrant_5.q
  };
  assign end_addr_5[0] = {
    soc_ctrl_out.ro_end_addr_high_0_quadrant_5.q, soc_ctrl_out.ro_end_addr_low_0_quadrant_5.q
  };
  assign start_addr_5[1] = {
    soc_ctrl_out.ro_start_addr_high_1_quadrant_5.q, soc_ctrl_out.ro_start_addr_low_1_quadrant_5.q
  };
  assign end_addr_5[1] = {
    soc_ctrl_out.ro_end_addr_high_1_quadrant_5.q, soc_ctrl_out.ro_end_addr_low_1_quadrant_5.q
  };
  assign start_addr_5[2] = {
    soc_ctrl_out.ro_start_addr_high_2_quadrant_5.q, soc_ctrl_out.ro_start_addr_low_2_quadrant_5.q
  };
  assign end_addr_5[2] = {
    soc_ctrl_out.ro_end_addr_high_2_quadrant_5.q, soc_ctrl_out.ro_end_addr_low_2_quadrant_5.q
  };
  assign start_addr_5[3] = {
    soc_ctrl_out.ro_start_addr_high_3_quadrant_5.q, soc_ctrl_out.ro_start_addr_low_3_quadrant_5.q
  };
  assign end_addr_5[3] = {
    soc_ctrl_out.ro_end_addr_high_3_quadrant_5.q, soc_ctrl_out.ro_end_addr_low_3_quadrant_5.q
  };
  assign soc_ctrl_in.ro_cache_flush[5].de = soc_ctrl_out.ro_cache_flush[5].q & soc_ctrl_in.ro_cache_flush[5].d;

  occamy_quadrant_s1 i_occamy_quadrant_s1_5 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd5),
      // .debug_req_i (debug_req[216:181]),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i(mtip[216:181]),
      .msip_i(msip[216:181]),
      .isolate_i(soc_ctrl_out.isolate[5].q),
      .isolated_o(soc_ctrl_in.isolated[5].d),
      .ro_enable_i(soc_ctrl_out.ro_cache_enable[5].q),
      .ro_flush_valid_i(soc_ctrl_out.ro_cache_flush[5].q),
      .ro_flush_ready_o(soc_ctrl_in.ro_cache_flush[5].d),
      .ro_start_addr_i(start_addr_5),
      .ro_end_addr_i(end_addr_5),
      .quadrant_hbi_out_req_o(wide_hbi_out_cut_5_req),
      .quadrant_hbi_out_rsp_i(wide_hbi_out_cut_5_rsp),
      .quadrant_narrow_out_req_o(narrow_out_cut_5_req),
      .quadrant_narrow_out_rsp_i(narrow_out_cut_5_rsp),
      .quadrant_narrow_in_req_i(narrow_in_cut_5_req),
      .quadrant_narrow_in_rsp_o(narrow_in_cut_5_rsp),
      .quadrant_wide_out_req_o(wide_out_cut_5_req),
      .quadrant_wide_out_rsp_i(wide_out_cut_5_rsp),
      .quadrant_wide_in_req_i(wide_in_cut_5_req),
      .quadrant_wide_in_rsp_o(wide_in_cut_5_rsp)
  );

  ///////////////////
  // S1 Quadrant 6 //
  ///////////////////
  axi_a48_d64_i8_u0_req_t  narrow_in_cut_6_req;
  axi_a48_d64_i8_u0_resp_t narrow_in_cut_6_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .req_t(axi_a48_d64_i8_u0_req_t),
      .resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_narrow_in_cut_6 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_6]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_6]),
      .mst_req_o(narrow_in_cut_6_req),
      .mst_resp_i(narrow_in_cut_6_rsp)
  );
  axi_a48_d64_i4_u0_req_t  narrow_out_cut_6_req;
  axi_a48_d64_i4_u0_resp_t narrow_out_cut_6_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .req_t(axi_a48_d64_i4_u0_req_t),
      .resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_narrow_out_cut_6_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_out_cut_6_req),
      .slv_resp_o(narrow_out_cut_6_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_6]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_6])
  );
  axi_a48_d512_i9_u0_req_t  wide_in_cut_6_req;
  axi_a48_d512_i9_u0_resp_t wide_in_cut_6_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i9_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i9_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i9_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i9_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i9_u0_r_chan_t),
      .req_t(axi_a48_d512_i9_u0_req_t),
      .resp_t(axi_a48_d512_i9_u0_resp_t)
  ) i_wide_in_cut_6 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_6]),
      .slv_resp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_6]),
      .mst_req_o(wide_in_cut_6_req),
      .mst_resp_i(wide_in_cut_6_rsp)
  );
  axi_a48_d512_i4_u0_req_t  wide_out_cut_6_req;
  axi_a48_d512_i4_u0_resp_t wide_out_cut_6_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i4_u0_r_chan_t),
      .req_t(axi_a48_d512_i4_u0_req_t),
      .resp_t(axi_a48_d512_i4_u0_resp_t)
  ) i_wide_out_cut_6_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_out_cut_6_req),
      .slv_resp_o(wide_out_cut_6_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_6]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_6])
  );
  axi_a48_d512_i7_u0_req_t  wide_hbi_out_cut_6_req;
  axi_a48_d512_i7_u0_resp_t wide_hbi_out_cut_6_rsp;

  axi_a48_d512_i7_u0_req_t  wide_hbi_out_cut_6_cut_req;
  axi_a48_d512_i7_u0_resp_t wide_hbi_out_cut_6_cut_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i7_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .req_t(axi_a48_d512_i7_u0_req_t),
      .resp_t(axi_a48_d512_i7_u0_resp_t)
  ) i_wide_hbi_out_cut_6_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_hbi_out_cut_6_req),
      .slv_resp_o(wide_hbi_out_cut_6_rsp),
      .mst_req_o(wide_hbi_out_cut_6_cut_req),
      .mst_resp_i(wide_hbi_out_cut_6_cut_rsp)
  );

  assign hbi_6_req_o = wide_hbi_out_cut_6_cut_req;
  assign wide_hbi_out_cut_6_cut_rsp = hbi_6_rsp_i;


  // Assemble address from `soc_ctrl` regs.
  logic [3:0][47:0] start_addr_6, end_addr_6;
  assign start_addr_6[0] = {
    soc_ctrl_out.ro_start_addr_high_0_quadrant_6.q, soc_ctrl_out.ro_start_addr_low_0_quadrant_6.q
  };
  assign end_addr_6[0] = {
    soc_ctrl_out.ro_end_addr_high_0_quadrant_6.q, soc_ctrl_out.ro_end_addr_low_0_quadrant_6.q
  };
  assign start_addr_6[1] = {
    soc_ctrl_out.ro_start_addr_high_1_quadrant_6.q, soc_ctrl_out.ro_start_addr_low_1_quadrant_6.q
  };
  assign end_addr_6[1] = {
    soc_ctrl_out.ro_end_addr_high_1_quadrant_6.q, soc_ctrl_out.ro_end_addr_low_1_quadrant_6.q
  };
  assign start_addr_6[2] = {
    soc_ctrl_out.ro_start_addr_high_2_quadrant_6.q, soc_ctrl_out.ro_start_addr_low_2_quadrant_6.q
  };
  assign end_addr_6[2] = {
    soc_ctrl_out.ro_end_addr_high_2_quadrant_6.q, soc_ctrl_out.ro_end_addr_low_2_quadrant_6.q
  };
  assign start_addr_6[3] = {
    soc_ctrl_out.ro_start_addr_high_3_quadrant_6.q, soc_ctrl_out.ro_start_addr_low_3_quadrant_6.q
  };
  assign end_addr_6[3] = {
    soc_ctrl_out.ro_end_addr_high_3_quadrant_6.q, soc_ctrl_out.ro_end_addr_low_3_quadrant_6.q
  };
  assign soc_ctrl_in.ro_cache_flush[6].de = soc_ctrl_out.ro_cache_flush[6].q & soc_ctrl_in.ro_cache_flush[6].d;

  occamy_quadrant_s1 i_occamy_quadrant_s1_6 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd6),
      // .debug_req_i (debug_req[252:217]),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i(mtip[252:217]),
      .msip_i(msip[252:217]),
      .isolate_i(soc_ctrl_out.isolate[6].q),
      .isolated_o(soc_ctrl_in.isolated[6].d),
      .ro_enable_i(soc_ctrl_out.ro_cache_enable[6].q),
      .ro_flush_valid_i(soc_ctrl_out.ro_cache_flush[6].q),
      .ro_flush_ready_o(soc_ctrl_in.ro_cache_flush[6].d),
      .ro_start_addr_i(start_addr_6),
      .ro_end_addr_i(end_addr_6),
      .quadrant_hbi_out_req_o(wide_hbi_out_cut_6_req),
      .quadrant_hbi_out_rsp_i(wide_hbi_out_cut_6_rsp),
      .quadrant_narrow_out_req_o(narrow_out_cut_6_req),
      .quadrant_narrow_out_rsp_i(narrow_out_cut_6_rsp),
      .quadrant_narrow_in_req_i(narrow_in_cut_6_req),
      .quadrant_narrow_in_rsp_o(narrow_in_cut_6_rsp),
      .quadrant_wide_out_req_o(wide_out_cut_6_req),
      .quadrant_wide_out_rsp_i(wide_out_cut_6_rsp),
      .quadrant_wide_in_req_i(wide_in_cut_6_req),
      .quadrant_wide_in_rsp_o(wide_in_cut_6_rsp)
  );

  ///////////////////
  // S1 Quadrant 7 //
  ///////////////////
  axi_a48_d64_i8_u0_req_t  narrow_in_cut_7_req;
  axi_a48_d64_i8_u0_resp_t narrow_in_cut_7_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .req_t(axi_a48_d64_i8_u0_req_t),
      .resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_narrow_in_cut_7 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_7]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_7]),
      .mst_req_o(narrow_in_cut_7_req),
      .mst_resp_i(narrow_in_cut_7_rsp)
  );
  axi_a48_d64_i4_u0_req_t  narrow_out_cut_7_req;
  axi_a48_d64_i4_u0_resp_t narrow_out_cut_7_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .req_t(axi_a48_d64_i4_u0_req_t),
      .resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_narrow_out_cut_7_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_out_cut_7_req),
      .slv_resp_o(narrow_out_cut_7_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_7]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_7])
  );
  axi_a48_d512_i9_u0_req_t  wide_in_cut_7_req;
  axi_a48_d512_i9_u0_resp_t wide_in_cut_7_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i9_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i9_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i9_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i9_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i9_u0_r_chan_t),
      .req_t(axi_a48_d512_i9_u0_req_t),
      .resp_t(axi_a48_d512_i9_u0_resp_t)
  ) i_wide_in_cut_7 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_7]),
      .slv_resp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_7]),
      .mst_req_o(wide_in_cut_7_req),
      .mst_resp_i(wide_in_cut_7_rsp)
  );
  axi_a48_d512_i4_u0_req_t  wide_out_cut_7_req;
  axi_a48_d512_i4_u0_resp_t wide_out_cut_7_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i4_u0_r_chan_t),
      .req_t(axi_a48_d512_i4_u0_req_t),
      .resp_t(axi_a48_d512_i4_u0_resp_t)
  ) i_wide_out_cut_7_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_out_cut_7_req),
      .slv_resp_o(wide_out_cut_7_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_7]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_7])
  );
  axi_a48_d512_i7_u0_req_t  wide_hbi_out_cut_7_req;
  axi_a48_d512_i7_u0_resp_t wide_hbi_out_cut_7_rsp;

  axi_a48_d512_i7_u0_req_t  wide_hbi_out_cut_7_cut_req;
  axi_a48_d512_i7_u0_resp_t wide_hbi_out_cut_7_cut_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i7_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .req_t(axi_a48_d512_i7_u0_req_t),
      .resp_t(axi_a48_d512_i7_u0_resp_t)
  ) i_wide_hbi_out_cut_7_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_hbi_out_cut_7_req),
      .slv_resp_o(wide_hbi_out_cut_7_rsp),
      .mst_req_o(wide_hbi_out_cut_7_cut_req),
      .mst_resp_i(wide_hbi_out_cut_7_cut_rsp)
  );

  assign hbi_7_req_o = wide_hbi_out_cut_7_cut_req;
  assign wide_hbi_out_cut_7_cut_rsp = hbi_7_rsp_i;


  // Assemble address from `soc_ctrl` regs.
  logic [3:0][47:0] start_addr_7, end_addr_7;
  assign start_addr_7[0] = {
    soc_ctrl_out.ro_start_addr_high_0_quadrant_7.q, soc_ctrl_out.ro_start_addr_low_0_quadrant_7.q
  };
  assign end_addr_7[0] = {
    soc_ctrl_out.ro_end_addr_high_0_quadrant_7.q, soc_ctrl_out.ro_end_addr_low_0_quadrant_7.q
  };
  assign start_addr_7[1] = {
    soc_ctrl_out.ro_start_addr_high_1_quadrant_7.q, soc_ctrl_out.ro_start_addr_low_1_quadrant_7.q
  };
  assign end_addr_7[1] = {
    soc_ctrl_out.ro_end_addr_high_1_quadrant_7.q, soc_ctrl_out.ro_end_addr_low_1_quadrant_7.q
  };
  assign start_addr_7[2] = {
    soc_ctrl_out.ro_start_addr_high_2_quadrant_7.q, soc_ctrl_out.ro_start_addr_low_2_quadrant_7.q
  };
  assign end_addr_7[2] = {
    soc_ctrl_out.ro_end_addr_high_2_quadrant_7.q, soc_ctrl_out.ro_end_addr_low_2_quadrant_7.q
  };
  assign start_addr_7[3] = {
    soc_ctrl_out.ro_start_addr_high_3_quadrant_7.q, soc_ctrl_out.ro_start_addr_low_3_quadrant_7.q
  };
  assign end_addr_7[3] = {
    soc_ctrl_out.ro_end_addr_high_3_quadrant_7.q, soc_ctrl_out.ro_end_addr_low_3_quadrant_7.q
  };
  assign soc_ctrl_in.ro_cache_flush[7].de = soc_ctrl_out.ro_cache_flush[7].q & soc_ctrl_in.ro_cache_flush[7].d;

  occamy_quadrant_s1 i_occamy_quadrant_s1_7 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd7),
      // .debug_req_i (debug_req[288:253]),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i(mtip[288:253]),
      .msip_i(msip[288:253]),
      .isolate_i(soc_ctrl_out.isolate[7].q),
      .isolated_o(soc_ctrl_in.isolated[7].d),
      .ro_enable_i(soc_ctrl_out.ro_cache_enable[7].q),
      .ro_flush_valid_i(soc_ctrl_out.ro_cache_flush[7].q),
      .ro_flush_ready_o(soc_ctrl_in.ro_cache_flush[7].d),
      .ro_start_addr_i(start_addr_7),
      .ro_end_addr_i(end_addr_7),
      .quadrant_hbi_out_req_o(wide_hbi_out_cut_7_req),
      .quadrant_hbi_out_rsp_i(wide_hbi_out_cut_7_rsp),
      .quadrant_narrow_out_req_o(narrow_out_cut_7_req),
      .quadrant_narrow_out_rsp_i(narrow_out_cut_7_rsp),
      .quadrant_narrow_in_req_i(narrow_in_cut_7_req),
      .quadrant_narrow_in_rsp_o(narrow_in_cut_7_rsp),
      .quadrant_wide_out_req_o(wide_out_cut_7_req),
      .quadrant_wide_out_rsp_i(wide_out_cut_7_rsp),
      .quadrant_wide_in_req_i(wide_in_cut_7_req),
      .quadrant_wide_in_rsp_o(wide_in_cut_7_rsp)
  );



  //////////
  // SPM //
  //////////
  axi_a48_d64_i8_u0_req_t  spm_cdc_req;
  axi_a48_d64_i8_u0_resp_t spm_cdc_rsp;

  axi_cdc #(
      .aw_chan_t (axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t  (axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t  (axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t (axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t  (axi_a48_d64_i8_u0_r_chan_t),
      .axi_req_t (axi_a48_d64_i8_u0_req_t),
      .axi_resp_t(axi_a48_d64_i8_u0_resp_t),
      .LogDepth  (2)
  ) i_spm_cdc (
      .src_clk_i (clk_i),
      .src_rst_ni(rst_ni),
      .src_req_i (soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_SPM]),
      .src_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_SPM]),
      .dst_clk_i (clk_periph_i),
      .dst_rst_ni(rst_periph_ni),
      .dst_req_o (spm_cdc_req),
      .dst_resp_i(spm_cdc_rsp)
  );

  axi_a48_d64_i1_u0_req_t  spm_serialize_req;
  axi_a48_d64_i1_u0_resp_t spm_serialize_rsp;

  axi_id_serialize #(
      .AtopSupport(1),
      .AxiSlvPortIdWidth(8),
      .AxiSlvPortMaxTxns(4),
      .AxiMstPortIdWidth(1),
      .AxiMstPortMaxUniqIds(2),
      .AxiMstPortMaxTxnsPerId(2),
      .AxiAddrWidth(48),
      .AxiDataWidth(64),
      .AxiUserWidth(1),
      .slv_req_t(axi_a48_d64_i8_u0_req_t),
      .slv_resp_t(axi_a48_d64_i8_u0_resp_t),
      .mst_req_t(axi_a48_d64_i1_u0_req_t),
      .mst_resp_t(axi_a48_d64_i1_u0_resp_t)
  ) i_spm_serialize (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .slv_req_i(spm_cdc_req),
      .slv_resp_o(spm_cdc_rsp),
      .mst_req_o(spm_serialize_req),
      .mst_resp_i(spm_serialize_rsp)
  );
  axi_a48_d64_i1_u0_req_t  spm_amo_adapter_req;
  axi_a48_d64_i1_u0_resp_t spm_amo_adapter_rsp;

  axi_riscv_atomics #(
      .AXI_ADDR_WIDTH(48),
      .AXI_DATA_WIDTH(64),
      .AXI_ID_WIDTH(1),
      .AXI_USER_WIDTH(1),
      .AXI_MAX_WRITE_TXNS(16),
      .RISCV_WORD_WIDTH(64)
  ) i_spm_amo_adapter (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .slv_aw_addr_i(spm_serialize_req.aw.addr),
      .slv_aw_prot_i(spm_serialize_req.aw.prot),
      .slv_aw_region_i(spm_serialize_req.aw.region),
      .slv_aw_atop_i(spm_serialize_req.aw.atop),
      .slv_aw_len_i(spm_serialize_req.aw.len),
      .slv_aw_size_i(spm_serialize_req.aw.size),
      .slv_aw_burst_i(spm_serialize_req.aw.burst),
      .slv_aw_lock_i(spm_serialize_req.aw.lock),
      .slv_aw_cache_i(spm_serialize_req.aw.cache),
      .slv_aw_qos_i(spm_serialize_req.aw.qos),
      .slv_aw_id_i(spm_serialize_req.aw.id),
      .slv_aw_user_i(spm_serialize_req.aw.user),
      .slv_aw_ready_o(spm_serialize_rsp.aw_ready),
      .slv_aw_valid_i(spm_serialize_req.aw_valid),
      .slv_ar_addr_i(spm_serialize_req.ar.addr),
      .slv_ar_prot_i(spm_serialize_req.ar.prot),
      .slv_ar_region_i(spm_serialize_req.ar.region),
      .slv_ar_len_i(spm_serialize_req.ar.len),
      .slv_ar_size_i(spm_serialize_req.ar.size),
      .slv_ar_burst_i(spm_serialize_req.ar.burst),
      .slv_ar_lock_i(spm_serialize_req.ar.lock),
      .slv_ar_cache_i(spm_serialize_req.ar.cache),
      .slv_ar_qos_i(spm_serialize_req.ar.qos),
      .slv_ar_id_i(spm_serialize_req.ar.id),
      .slv_ar_user_i(spm_serialize_req.ar.user),
      .slv_ar_ready_o(spm_serialize_rsp.ar_ready),
      .slv_ar_valid_i(spm_serialize_req.ar_valid),
      .slv_w_data_i(spm_serialize_req.w.data),
      .slv_w_strb_i(spm_serialize_req.w.strb),
      .slv_w_user_i(spm_serialize_req.w.user),
      .slv_w_last_i(spm_serialize_req.w.last),
      .slv_w_ready_o(spm_serialize_rsp.w_ready),
      .slv_w_valid_i(spm_serialize_req.w_valid),
      .slv_r_data_o(spm_serialize_rsp.r.data),
      .slv_r_resp_o(spm_serialize_rsp.r.resp),
      .slv_r_last_o(spm_serialize_rsp.r.last),
      .slv_r_id_o(spm_serialize_rsp.r.id),
      .slv_r_user_o(spm_serialize_rsp.r.user),
      .slv_r_ready_i(spm_serialize_req.r_ready),
      .slv_r_valid_o(spm_serialize_rsp.r_valid),
      .slv_b_resp_o(spm_serialize_rsp.b.resp),
      .slv_b_id_o(spm_serialize_rsp.b.id),
      .slv_b_user_o(spm_serialize_rsp.b.user),
      .slv_b_ready_i(spm_serialize_req.b_ready),
      .slv_b_valid_o(spm_serialize_rsp.b_valid),

      .mst_aw_addr_o(spm_amo_adapter_req.aw.addr),
      .mst_aw_prot_o(spm_amo_adapter_req.aw.prot),
      .mst_aw_region_o(spm_amo_adapter_req.aw.region),
      .mst_aw_atop_o(spm_amo_adapter_req.aw.atop),
      .mst_aw_len_o(spm_amo_adapter_req.aw.len),
      .mst_aw_size_o(spm_amo_adapter_req.aw.size),
      .mst_aw_burst_o(spm_amo_adapter_req.aw.burst),
      .mst_aw_lock_o(spm_amo_adapter_req.aw.lock),
      .mst_aw_cache_o(spm_amo_adapter_req.aw.cache),
      .mst_aw_qos_o(spm_amo_adapter_req.aw.qos),
      .mst_aw_id_o(spm_amo_adapter_req.aw.id),
      .mst_aw_user_o(spm_amo_adapter_req.aw.user),
      .mst_aw_ready_i(spm_amo_adapter_rsp.aw_ready),
      .mst_aw_valid_o(spm_amo_adapter_req.aw_valid),
      .mst_ar_addr_o(spm_amo_adapter_req.ar.addr),
      .mst_ar_prot_o(spm_amo_adapter_req.ar.prot),
      .mst_ar_region_o(spm_amo_adapter_req.ar.region),
      .mst_ar_len_o(spm_amo_adapter_req.ar.len),
      .mst_ar_size_o(spm_amo_adapter_req.ar.size),
      .mst_ar_burst_o(spm_amo_adapter_req.ar.burst),
      .mst_ar_lock_o(spm_amo_adapter_req.ar.lock),
      .mst_ar_cache_o(spm_amo_adapter_req.ar.cache),
      .mst_ar_qos_o(spm_amo_adapter_req.ar.qos),
      .mst_ar_id_o(spm_amo_adapter_req.ar.id),
      .mst_ar_user_o(spm_amo_adapter_req.ar.user),
      .mst_ar_ready_i(spm_amo_adapter_rsp.ar_ready),
      .mst_ar_valid_o(spm_amo_adapter_req.ar_valid),
      .mst_w_data_o(spm_amo_adapter_req.w.data),
      .mst_w_strb_o(spm_amo_adapter_req.w.strb),
      .mst_w_user_o(spm_amo_adapter_req.w.user),
      .mst_w_last_o(spm_amo_adapter_req.w.last),
      .mst_w_ready_i(spm_amo_adapter_rsp.w_ready),
      .mst_w_valid_o(spm_amo_adapter_req.w_valid),
      .mst_r_data_i(spm_amo_adapter_rsp.r.data),
      .mst_r_resp_i(spm_amo_adapter_rsp.r.resp),
      .mst_r_last_i(spm_amo_adapter_rsp.r.last),
      .mst_r_id_i(spm_amo_adapter_rsp.r.id),
      .mst_r_user_i(spm_amo_adapter_rsp.r.user),
      .mst_r_ready_o(spm_amo_adapter_req.r_ready),
      .mst_r_valid_i(spm_amo_adapter_rsp.r_valid),
      .mst_b_resp_i(spm_amo_adapter_rsp.b.resp),
      .mst_b_id_i(spm_amo_adapter_rsp.b.id),
      .mst_b_user_i(spm_amo_adapter_rsp.b.user),
      .mst_b_ready_o(spm_amo_adapter_req.b_ready),
      .mst_b_valid_i(spm_amo_adapter_rsp.b_valid)
  );

  axi_a48_d64_i1_u0_req_t  spm_amo_adapter_cut_req;
  axi_a48_d64_i1_u0_resp_t spm_amo_adapter_cut_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i1_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i1_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i1_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i1_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i1_u0_r_chan_t),
      .req_t(axi_a48_d64_i1_u0_req_t),
      .resp_t(axi_a48_d64_i1_u0_resp_t)
  ) i_spm_amo_adapter_cut (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .slv_req_i(spm_amo_adapter_req),
      .slv_resp_o(spm_amo_adapter_rsp),
      .mst_req_o(spm_amo_adapter_cut_req),
      .mst_resp_i(spm_amo_adapter_cut_rsp)
  );


  axi_to_mem #(
      .axi_req_t(axi_a48_d64_i1_u0_req_t),
      .axi_resp_t(axi_a48_d64_i1_u0_resp_t),
      .AddrWidth(17),
      .DataWidth(64),
      .IdWidth(1),
      .NumBanks(1),
      .BufDepth(1)
  ) i_axi_to_mem (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .busy_o(),
      .axi_req_i(spm_amo_adapter_cut_req),
      .axi_resp_o(spm_amo_adapter_cut_rsp),
      .mem_req_o(spm_req),
      .mem_gnt_i(spm_gnt),
      .mem_addr_o(spm_addr),
      .mem_wdata_o(spm_wdata),
      .mem_strb_o(spm_strb),
      .mem_atop_o(),
      .mem_we_o(spm_we),
      .mem_rvalid_i(spm_rvalid),
      .mem_rdata_i(spm_rdata)
  );

  spm_1p_adv #(
      .NumWords(16384),
      .DataWidth(64),
      .ByteWidth(8),
      .EnableInputPipeline(1'b1),
      .EnableOutputPipeline(1'b1)
  ) i_spm_cut (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .valid_i(spm_req),
      .ready_o(spm_gnt),
      .we_i(spm_we),
      .addr_i(spm_addr[16:3]),
      .wdata_i(spm_wdata),
      .be_i(spm_strb),
      .rdata_o(spm_rdata),
      .rvalid_o(spm_rvalid),
      .rerror_o(spm_rerror)
  );

  /// HBM2e Ports
  assign hbm_0_req_o = soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_HBM_0];
  assign soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_HBM_0] = hbm_0_rsp_i;
  assign hbm_1_req_o = soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_HBM_1];
  assign soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_HBM_1] = hbm_1_rsp_i;
  assign hbm_2_req_o = soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_HBM_2];
  assign soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_HBM_2] = hbm_2_rsp_i;
  assign hbm_3_req_o = soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_HBM_3];
  assign soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_HBM_3] = hbm_3_rsp_i;
  assign hbm_4_req_o = soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_HBM_4];
  assign soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_HBM_4] = hbm_4_rsp_i;
  assign hbm_5_req_o = soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_HBM_5];
  assign soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_HBM_5] = hbm_5_rsp_i;
  assign hbm_6_req_o = soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_HBM_6];
  assign soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_HBM_6] = hbm_6_rsp_i;
  assign hbm_7_req_o = soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_HBM_7];
  assign soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_HBM_7] = hbm_7_rsp_i;

  /// HBI Ports
  // TODO(zarubaf): Truncate address.
  assign soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_HBI_0] = hbi_0_req_i;
  assign hbi_0_rsp_o = soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_HBI_0];
  assign soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_HBI_1] = hbi_1_req_i;
  assign hbi_1_rsp_o = soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_HBI_1];
  assign soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_HBI_2] = hbi_2_req_i;
  assign hbi_2_rsp_o = soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_HBI_2];
  assign soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_HBI_3] = hbi_3_req_i;
  assign hbi_3_rsp_o = soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_HBI_3];
  assign soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_HBI_4] = hbi_4_req_i;
  assign hbi_4_rsp_o = soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_HBI_4];
  assign soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_HBI_5] = hbi_5_req_i;
  assign hbi_5_rsp_o = soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_HBI_5];
  assign soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_HBI_6] = hbi_6_req_i;
  assign hbi_6_rsp_o = soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_HBI_6];
  assign soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_HBI_7] = hbi_7_req_i;
  assign hbi_7_rsp_o = soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_HBI_7];

  // APB port for HBI
  apb_a48_d32_req_t apb_hbi_ctl_req;
  apb_a48_d32_rsp_t apb_hbi_ctl_rsp;

  reg_to_apb #(
      .reg_req_t(reg_a48_d32_req_t),
      .reg_rsp_t(reg_a48_d32_rsp_t),
      .apb_req_t(apb_a48_d32_req_t),
      .apb_rsp_t(apb_a48_d32_rsp_t)
  ) i_apb_hbi_ctl_pc (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .reg_req_i(soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_HBI_CTL]),
      .reg_rsp_o(soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_HBI_CTL]),
      .apb_req_o(apb_hbi_ctl_req),
      .apb_rsp_i(apb_hbi_ctl_rsp)
  );

  assign apb_hbi_ctl_req_o = apb_hbi_ctl_req;
  assign apb_hbi_ctl_rsp   = apb_hbi_ctl_rsp_i;

  // APB port for HBI
  apb_a48_d32_req_t apb_hbm_cfg_req;
  apb_a48_d32_rsp_t apb_hbm_cfg_rsp;

  reg_to_apb #(
      .reg_req_t(reg_a48_d32_req_t),
      .reg_rsp_t(reg_a48_d32_rsp_t),
      .apb_req_t(apb_a48_d32_req_t),
      .apb_rsp_t(apb_a48_d32_rsp_t)
  ) i_apb_hbm_cfg_pc (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .reg_req_i(soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_HBM_CFG]),
      .reg_rsp_o(soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_HBM_CFG]),
      .apb_req_o(apb_hbm_cfg_req),
      .apb_rsp_i(apb_hbm_cfg_rsp)
  );

  assign apb_hbm_cfg_req_o = apb_hbm_cfg_req;
  assign apb_hbm_cfg_rsp = apb_hbm_cfg_rsp_i;
  assign hbm_phy_cfg_req_o = soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_HBM_PHY_CFG];
  assign soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_HBM_PHY_CFG] = hbm_phy_cfg_rsp_i;
  assign hbm_seq_req_o = soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_HBM_SEQ];
  assign soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_HBM_SEQ] = hbm_seq_rsp_i;
  /////////////////
  // Peripherals //
  /////////////////
  axi_a48_d64_i8_u0_req_t  axi_lite_from_soc_cdc_req;
  axi_a48_d64_i8_u0_resp_t axi_lite_from_soc_cdc_rsp;

  axi_cdc #(
      .aw_chan_t (axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t  (axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t  (axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t (axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t  (axi_a48_d64_i8_u0_r_chan_t),
      .axi_req_t (axi_a48_d64_i8_u0_req_t),
      .axi_resp_t(axi_a48_d64_i8_u0_resp_t),
      .LogDepth  (2)
  ) i_axi_lite_from_soc_cdc (
      .src_clk_i (clk_i),
      .src_rst_ni(rst_ni),
      .src_req_i (soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_PERIPH]),
      .src_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_PERIPH]),
      .dst_clk_i (clk_periph_i),
      .dst_rst_ni(rst_periph_ni),
      .dst_req_o (axi_lite_from_soc_cdc_req),
      .dst_resp_i(axi_lite_from_soc_cdc_rsp)
  );

  axi_to_axi_lite #(
      .AxiAddrWidth(48),
      .AxiDataWidth(64),
      .AxiIdWidth(8),
      .AxiUserWidth(1),
      .AxiMaxWriteTxns(4),
      .AxiMaxReadTxns(4),
      .FallThrough(0),
      .full_req_t(axi_a48_d64_i8_u0_req_t),
      .full_resp_t(axi_a48_d64_i8_u0_resp_t),
      .lite_req_t(axi_lite_a48_d64_req_t),
      .lite_resp_t(axi_lite_a48_d64_rsp_t)
  ) i_axi_to_axi_lite_periph_pc (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .test_i(test_mode_i),
      .slv_req_i(axi_lite_from_soc_cdc_req),
      .slv_resp_o(axi_lite_from_soc_cdc_rsp),
      .mst_req_o(soc_axi_lite_periph_xbar_in_req[SOC_AXI_LITE_PERIPH_XBAR_IN_SOC]),
      .mst_resp_i(soc_axi_lite_periph_xbar_in_rsp[SOC_AXI_LITE_PERIPH_XBAR_IN_SOC])
  );



  axi_lite_a48_d64_req_t axi_lite_to_soc_cdc_req;
  axi_lite_a48_d64_rsp_t axi_lite_to_soc_cdc_rsp;

  axi_cdc #(
      .aw_chan_t (axi_lite_a48_d64_aw_chan_t),
      .w_chan_t  (axi_lite_a48_d64_w_chan_t),
      .b_chan_t  (axi_lite_a48_d64_b_chan_t),
      .ar_chan_t (axi_lite_a48_d64_ar_chan_t),
      .r_chan_t  (axi_lite_a48_d64_r_chan_t),
      .axi_req_t (axi_lite_a48_d64_req_t),
      .axi_resp_t(axi_lite_a48_d64_rsp_t),
      .LogDepth  (2)
  ) i_axi_lite_to_soc_cdc (
      .src_clk_i (clk_periph_i),
      .src_rst_ni(rst_periph_ni),
      .src_req_i (soc_axi_lite_periph_xbar_out_req[SOC_AXI_LITE_PERIPH_XBAR_OUT_SOC]),
      .src_resp_o(soc_axi_lite_periph_xbar_out_rsp[SOC_AXI_LITE_PERIPH_XBAR_OUT_SOC]),
      .dst_clk_i (clk_i),
      .dst_rst_ni(rst_ni),
      .dst_req_o (axi_lite_to_soc_cdc_req),
      .dst_resp_i(axi_lite_to_soc_cdc_rsp)
  );

  axi_lite_to_axi #(
      .AxiDataWidth(64),
      .req_lite_t  (axi_lite_a48_d64_req_t),
      .resp_lite_t (axi_lite_a48_d64_rsp_t),
      .req_t       (axi_a48_d64_i4_u0_req_t),
      .resp_t      (axi_a48_d64_i4_u0_resp_t)
  ) i_axi_lite_to_axi_periph_pc (
      .slv_req_lite_i (axi_lite_to_soc_cdc_req),
      .slv_resp_lite_o(axi_lite_to_soc_cdc_rsp),
      .slv_aw_cache_i (axi_pkg::CACHE_MODIFIABLE),
      .slv_ar_cache_i (axi_pkg::CACHE_MODIFIABLE),
      .mst_req_o      (soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_PERIPH]),
      .mst_resp_i     (soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_PERIPH])
  );



  axi_a48_d64_i8_u0_req_t  periph_cdc_req;
  axi_a48_d64_i8_u0_resp_t periph_cdc_rsp;

  axi_cdc #(
      .aw_chan_t (axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t  (axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t  (axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t (axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t  (axi_a48_d64_i8_u0_r_chan_t),
      .axi_req_t (axi_a48_d64_i8_u0_req_t),
      .axi_resp_t(axi_a48_d64_i8_u0_resp_t),
      .LogDepth  (2)
  ) i_periph_cdc (
      .src_clk_i (clk_i),
      .src_rst_ni(rst_ni),
      .src_req_i (soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_REGBUS_PERIPH]),
      .src_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_REGBUS_PERIPH]),
      .dst_clk_i (clk_periph_i),
      .dst_rst_ni(rst_periph_ni),
      .dst_req_o (periph_cdc_req),
      .dst_resp_i(periph_cdc_rsp)
  );

  axi_a48_d32_i8_u0_req_t  axi_to_axi_lite_dw_req;
  axi_a48_d32_i8_u0_resp_t axi_to_axi_lite_dw_rsp;

  axi_dw_converter #(
      .AxiSlvPortDataWidth(64),
      .AxiMstPortDataWidth(32),
      .AxiAddrWidth(48),
      .AxiIdWidth(8),
      .aw_chan_t(axi_a48_d32_i8_u0_aw_chan_t),
      .mst_w_chan_t(axi_a48_d32_i8_u0_w_chan_t),
      .slv_w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d32_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d32_i8_u0_ar_chan_t),
      .mst_r_chan_t(axi_a48_d32_i8_u0_r_chan_t),
      .slv_r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .axi_mst_req_t(axi_a48_d32_i8_u0_req_t),
      .axi_mst_resp_t(axi_a48_d32_i8_u0_resp_t),
      .axi_slv_req_t(axi_a48_d64_i8_u0_req_t),
      .axi_slv_resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_axi_to_axi_lite_dw (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .slv_req_i(periph_cdc_req),
      .slv_resp_o(periph_cdc_rsp),
      .mst_req_o(axi_to_axi_lite_dw_req),
      .mst_resp_i(axi_to_axi_lite_dw_rsp)
  );

  axi_lite_a48_d32_req_t axi_to_axi_lite_regbus_periph_req;
  axi_lite_a48_d32_rsp_t axi_to_axi_lite_regbus_periph_rsp;

  axi_to_axi_lite #(
      .AxiAddrWidth(48),
      .AxiDataWidth(32),
      .AxiIdWidth(8),
      .AxiUserWidth(1),
      .AxiMaxWriteTxns(4),
      .AxiMaxReadTxns(4),
      .FallThrough(0),
      .full_req_t(axi_a48_d32_i8_u0_req_t),
      .full_resp_t(axi_a48_d32_i8_u0_resp_t),
      .lite_req_t(axi_lite_a48_d32_req_t),
      .lite_resp_t(axi_lite_a48_d32_rsp_t)
  ) i_axi_to_axi_lite_regbus_periph_pc (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .test_i(test_mode_i),
      .slv_req_i(axi_to_axi_lite_dw_req),
      .slv_resp_o(axi_to_axi_lite_dw_rsp),
      .mst_req_o(axi_to_axi_lite_regbus_periph_req),
      .mst_resp_i(axi_to_axi_lite_regbus_periph_rsp)
  );

  axi_lite_to_reg #(
      .ADDR_WIDTH    (48),
      .DATA_WIDTH    (32),
      .axi_lite_req_t(axi_lite_a48_d32_req_t),
      .axi_lite_rsp_t(axi_lite_a48_d32_rsp_t),
      .reg_req_t     (reg_a48_d32_req_t),
      .reg_rsp_t     (reg_a48_d32_rsp_t)
  ) i_axi_lite_to_regbus_periph_pc (
      .clk_i         (clk_periph_i),
      .rst_ni        (rst_periph_ni),
      .axi_lite_req_i(axi_to_axi_lite_regbus_periph_req),
      .axi_lite_rsp_o(axi_to_axi_lite_regbus_periph_rsp),
      .reg_req_o     (soc_regbus_periph_xbar_in_req[SOC_REGBUS_PERIPH_XBAR_IN_SOC]),
      .reg_rsp_i     (soc_regbus_periph_xbar_in_rsp[SOC_REGBUS_PERIPH_XBAR_IN_SOC])
  );




  ///////////
  // Debug //
  ///////////
  reg_a48_d64_req_t axi_lite_to_reg_debug_req;
  reg_a48_d64_rsp_t axi_lite_to_reg_debug_rsp;

  axi_lite_to_reg #(
      .ADDR_WIDTH    (48),
      .DATA_WIDTH    (64),
      .axi_lite_req_t(axi_lite_a48_d64_req_t),
      .axi_lite_rsp_t(axi_lite_a48_d64_rsp_t),
      .reg_req_t     (reg_a48_d64_req_t),
      .reg_rsp_t     (reg_a48_d64_rsp_t)
  ) i_axi_lite_to_reg_debug_pc (
      .clk_i         (clk_periph_i),
      .rst_ni        (rst_periph_ni),
      .axi_lite_req_i(soc_axi_lite_periph_xbar_out_req[SOC_AXI_LITE_PERIPH_XBAR_OUT_DEBUG]),
      .axi_lite_rsp_o(soc_axi_lite_periph_xbar_out_rsp[SOC_AXI_LITE_PERIPH_XBAR_OUT_DEBUG]),
      .reg_req_o     (axi_lite_to_reg_debug_req),
      .reg_rsp_i     (axi_lite_to_reg_debug_rsp)
  );


  dm::hartinfo_t [0:0] hartinfo;
  assign hartinfo[0] = ariane_pkg::DebugHartInfo;

  logic                 dmi_rst_n;
  dm::dmi_req_t         dmi_req;
  logic                 dmi_req_valid;
  logic                 dmi_req_ready;
  dm::dmi_resp_t        dmi_resp;
  logic                 dmi_resp_ready;
  logic                 dmi_resp_valid;

  logic                 dbg_req;
  logic                 dbg_we;
  logic          [47:0] dbg_addr;
  logic          [63:0] dbg_wdata;
  logic          [ 7:0] dbg_wstrb;
  logic          [63:0] dbg_rdata;
  logic                 dbg_rvalid;

  reg_to_mem #(
      .AW(48),
      .DW(64),
      .req_t(reg_a48_d64_req_t),
      .rsp_t(reg_a48_d64_rsp_t)
  ) i_reg_to_mem_dbg (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .reg_req_i(axi_lite_to_reg_debug_req),
      .reg_rsp_o(axi_lite_to_reg_debug_rsp),
      .req_o(dbg_req),
      .gnt_i(dbg_req),
      .we_o(dbg_we),
      .addr_o(dbg_addr),
      .wdata_o(dbg_wdata),
      .wstrb_o(dbg_wstrb),
      .rdata_i(dbg_rdata),
      .rvalid_i(dbg_rvalid),
      .rerror_i(1'b0)
  );

  `FFARN(dbg_rvalid, dbg_req, 1'b0, clk_periph_i, rst_periph_ni)

  logic        sba_req;
  logic [47:0] sba_addr;
  logic        sba_we;
  logic [63:0] sba_wdata;
  logic [ 7:0] sba_strb;
  logic        sba_gnt;

  logic [63:0] sba_rdata;
  logic        sba_rvalid;

  logic [63:0] sba_addr_long;

  dm_top #(
      // .NrHarts (289),
      .NrHarts(1),
      .BusWidth(64),
      .DmBaseAddress('h0)
  ) i_dm_top (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .testmode_i(1'b0),
      .ndmreset_o(),
      .dmactive_o(),
      .debug_req_o(debug_req),
      .unavailable_i('0),
      .hartinfo_i(hartinfo),
      .slave_req_i(dbg_req),
      .slave_we_i(dbg_we),
      .slave_addr_i({16'b0, dbg_addr}),
      .slave_be_i(dbg_wstrb),
      .slave_wdata_i(dbg_wdata),
      .slave_rdata_o(dbg_rdata),
      .master_req_o(sba_req),
      .master_add_o(sba_addr_long),
      .master_we_o(sba_we),
      .master_wdata_o(sba_wdata),
      .master_be_o(sba_strb),
      .master_gnt_i(sba_gnt),
      .master_r_valid_i(sba_rvalid),
      .master_r_rdata_i(sba_rdata),
      .dmi_rst_ni(dmi_rst_n),
      .dmi_req_valid_i(dmi_req_valid),
      .dmi_req_ready_o(dmi_req_ready),
      .dmi_req_i(dmi_req),
      .dmi_resp_valid_o(dmi_resp_valid),
      .dmi_resp_ready_i(dmi_resp_ready),
      .dmi_resp_o(dmi_resp)
  );

  assign sba_addr = sba_addr_long[47:0];

  mem_to_axi_lite #(
      .MemAddrWidth(48),
      .AxiAddrWidth(48),
      .DataWidth(64),
      .MaxRequests(2),
      .AxiProt('0),
      .axi_req_t(axi_lite_a48_d64_req_t),
      .axi_rsp_t(axi_lite_a48_d64_rsp_t)
  ) i_mem_to_axi_lite (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .mem_req_i(sba_req),
      .mem_addr_i(sba_addr),
      .mem_we_i(sba_we),
      .mem_wdata_i(sba_wdata),
      .mem_be_i(sba_strb),
      .mem_gnt_o(sba_gnt),
      .mem_rsp_valid_o(sba_rvalid),
      .mem_rsp_rdata_o(sba_rdata),
      .mem_rsp_error_o(  /* left open */),
      .axi_req_o(soc_axi_lite_periph_xbar_in_req[SOC_AXI_LITE_PERIPH_XBAR_IN_DEBUG]),
      .axi_rsp_i(soc_axi_lite_periph_xbar_in_rsp[SOC_AXI_LITE_PERIPH_XBAR_IN_DEBUG])

  );

  dmi_jtag #(
      .IdcodeValue(occamy_pkg::IDCode)
  ) i_dmi_jtag (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .testmode_i(1'b0),
      .dmi_rst_no(dmi_rst_n),
      .dmi_req_o(dmi_req),
      .dmi_req_valid_o(dmi_req_valid),
      .dmi_req_ready_i(dmi_req_ready),
      .dmi_resp_i(dmi_resp),
      .dmi_resp_ready_o(dmi_resp_ready),
      .dmi_resp_valid_i(dmi_resp_valid),
      .tck_i(jtag_tck_i),
      .tms_i(jtag_tms_i),
      .trst_ni(jtag_trst_ni),
      .td_i(jtag_tdi_i),
      .td_o(jtag_tdo_o),
      .tdo_oe_o()
  );


  ///////////////
  //   CLINT   //
  ///////////////
  clint #(
      .reg_req_t(reg_a48_d32_req_t),
      .reg_rsp_t(reg_a48_d32_rsp_t)
  ) i_clint (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .testmode_i(1'b0),
      .reg_req_i(soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_CLINT]),
      .reg_rsp_o(soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_CLINT]),
      .rtc_i(rtc_i),
      .timer_irq_o(mtip),
      .ipi_o(msip)
  );

  /////////////////////
  //   SOC CONTROL   //
  /////////////////////
  occamy_soc_ctrl #(
      .reg_req_t(reg_a48_d32_req_t),
      .reg_rsp_t(reg_a48_d32_rsp_t)
  ) i_soc_ctrl (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .reg_req_i(soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_SOC_CTRL]),
      .reg_rsp_o(soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_SOC_CTRL]),
      .reg2hw_o(soc_ctrl_out),
      .hw2reg_i(soc_ctrl_in),
      .event_ecc_rerror_i(spm_rerror),
      .intr_ecc_uncorrectable_o(irq.ecc_uncorrectable),
      .intr_ecc_correctable_o(irq.ecc_correctable)
  );

  //////////////////////
  //   CHIP CONTROL   //
  //////////////////////
  // Contains NDA and chip specific information.
  assign chip_ctrl_req_o = soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_CHIP_CTRL];
  assign soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_CHIP_CTRL] = chip_ctrl_rsp_i;

  //////////////
  //   UART   //
  //////////////

  apb_a48_d32_req_t uart_apb_req;
  apb_a48_d32_rsp_t uart_apb_rsp;

  reg_to_apb #(
      .reg_req_t(reg_a48_d32_req_t),
      .reg_rsp_t(reg_a48_d32_rsp_t),
      .apb_req_t(apb_a48_d32_req_t),
      .apb_rsp_t(apb_a48_d32_rsp_t)
  ) i_uart_apb_pc (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .reg_req_i(soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_UART]),
      .reg_rsp_o(soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_UART]),
      .apb_req_o(uart_apb_req),
      .apb_rsp_i(uart_apb_rsp)
  );

  apb_uart i_apb_uart (
      .CLK    (clk_i),
      .RSTN   (rst_ni),
      .PSEL   (uart_apb_req.psel),
      .PENABLE(uart_apb_req.penable),
      .PWRITE (uart_apb_req.pwrite),
      .PADDR  (uart_apb_req.paddr[4:2]),
      .PWDATA (uart_apb_req.pwdata),
      .PRDATA (uart_apb_rsp.prdata),
      .PREADY (uart_apb_rsp.pready),
      .PSLVERR(uart_apb_rsp.pslverr),
      .INT    (irq.uart),
      .OUT1N  (),  // keep open
      .OUT2N  (),  // keep open
      .RTSN   (),  // no flow control
      .DTRN   (),  // no flow control
      .CTSN   (1'b0),
      .DSRN   (1'b0),
      .DCDN   (1'b0),
      .RIN    (1'b0),
      .SIN    (uart_rx_i),
      .SOUT   (uart_tx_o)
  );

  /////////////
  //   ROM   //
  /////////////

  // This is very system specific, so we might be better off
  // placing it outside the top-level.
  assign bootrom_req_o = soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_BOOTROM];
  assign soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_BOOTROM] = bootrom_rsp_i;

  /////////////////
  //   Clk Mgr   //
  /////////////////

  assign clk_mgr_req_o = soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_CLK_MGR];
  assign soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_CLK_MGR] = clk_mgr_rsp_i;

  //////////////
  //   PLIC   //
  //////////////
  rv_plic #(
      .reg_req_t(reg_a48_d32_req_t),
      .reg_rsp_t(reg_a48_d32_rsp_t)
  ) i_rv_plic (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .reg_req_i(soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_PLIC]),
      .reg_rsp_o(soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_PLIC]),
      .intr_src_i(irq),
      .irq_o(eip),
      .irq_id_o(),
      .msip_o()
  );

  assign irq.zero = 1'b0;

  //////////////////
  //   SPI Host   //
  //////////////////
  spi_host #(
      .reg_req_t(reg_a48_d32_req_t),
      .reg_rsp_t(reg_a48_d32_rsp_t)
  ) i_spi_host (
      // TODO(zarubaf): Fix clock assignment
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .clk_core_i(clk_periph_i),
      .rst_core_ni(rst_periph_ni),
      .reg_req_i(soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_SPIM]),
      .reg_rsp_o(soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_SPIM]),
      .cio_sck_o(spim_sck_o),
      .cio_sck_en_o(spim_sck_en_o),
      .cio_csb_o(spim_csb_o),
      .cio_csb_en_o(spim_csb_en_o),
      .cio_sd_o(spim_sd_o),
      .cio_sd_en_o(spim_sd_en_o),
      .cio_sd_i(spim_sd_i),
      .intr_error_o(irq.spim_error),
      .intr_spi_event_o(irq.spim_spi_event)
  );

  //////////////
  //   GPIO   //
  //////////////
  gpio #(
      .reg_req_t(reg_a48_d32_req_t),
      .reg_rsp_t(reg_a48_d32_rsp_t)
  ) i_gpio (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .reg_req_i(soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_GPIO]),
      .reg_rsp_o(soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_GPIO]),
      .cio_gpio_i(gpio_d_i),
      .cio_gpio_o(gpio_d_o),
      .cio_gpio_en_o(gpio_oe_o),
      .intr_gpio_o(irq.gpio)
  );

  /////////////
  //   I2C   //
  /////////////
  i2c #(
      .reg_req_t(reg_a48_d32_req_t),
      .reg_rsp_t(reg_a48_d32_rsp_t)
  ) i_i2c (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .reg_req_i(soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_I2C]),
      .reg_rsp_o(soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_I2C]),
      .cio_scl_i(i2c_scl_i),
      .cio_scl_o(i2c_scl_o),
      .cio_scl_en_o(i2c_scl_en_o),
      .cio_sda_i(i2c_sda_i),
      .cio_sda_o(i2c_sda_o),
      .cio_sda_en_o(i2c_sda_en_o),
      .intr_fmt_watermark_o(irq.i2c_fmt_watermark),
      .intr_rx_watermark_o(irq.i2c_rx_watermark),
      .intr_fmt_overflow_o(irq.i2c_fmt_overflow),
      .intr_rx_overflow_o(irq.i2c_rx_overflow),
      .intr_nak_o(irq.i2c_nak),
      .intr_scl_interference_o(irq.i2c_scl_interference),
      .intr_sda_interference_o(irq.i2c_sda_interference),
      .intr_stretch_timeout_o(irq.i2c_stretch_timeout),
      .intr_sda_unstable_o(irq.i2c_sda_unstable),
      .intr_trans_complete_o(irq.i2c_trans_complete),
      .intr_tx_empty_o(irq.i2c_tx_empty),
      .intr_tx_nonempty_o(irq.i2c_tx_nonempty),
      .intr_tx_overflow_o(irq.i2c_tx_overflow),
      .intr_acq_overflow_o(irq.i2c_acq_overflow),
      .intr_ack_stop_o(irq.i2c_ack_stop),
      .intr_host_timeout_o(irq.i2c_host_timeout)
  );

  /////////////
  //  Timer  //
  /////////////
  apb_a48_d32_req_t apb_timer_req;
  apb_a48_d32_rsp_t apb_timer_rsp;

  reg_to_apb #(
      .reg_req_t(reg_a48_d32_req_t),
      .reg_rsp_t(reg_a48_d32_rsp_t),
      .apb_req_t(apb_a48_d32_req_t),
      .apb_rsp_t(apb_a48_d32_rsp_t)
  ) i_apb_timer_pc (
      .clk_i(clk_periph_i),
      .rst_ni(rst_periph_ni),
      .reg_req_i(soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_TIMER]),
      .reg_rsp_o(soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_TIMER]),
      .apb_req_o(apb_timer_req),
      .apb_rsp_i(apb_timer_rsp)
  );

  apb_timer #(
      .APB_ADDR_WIDTH(48),
      .TIMER_CNT(2)
  ) i_apb_timer (
      .HCLK(clk_periph_i),
      .HRESETn(rst_periph_ni),
      .PADDR(apb_timer_req.paddr),
      .PWDATA(apb_timer_req.pwdata),
      .PWRITE(apb_timer_req.pwrite),
      .PSEL(apb_timer_req.psel),
      .PENABLE(apb_timer_req.penable),
      .PRDATA(apb_timer_rsp.prdata),
      .PREADY(apb_timer_rsp.pready),
      .PSLVERR(apb_timer_rsp.pslverr),
      .irq_o(irq.timer)
  );

endmodule
