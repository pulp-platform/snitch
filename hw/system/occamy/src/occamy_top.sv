// Copyright 2020 ETH Zurich and University of Bologna.
// Solderpad Hardware License, Version 0.51, see LICENSE for details.
// SPDX-License-Identifier: SHL-0.51

// Author: Florian Zaruba <zarubaf@iis.ee.ethz.ch>
// Author: Fabian Schuiki <fschuiki@iis.ee.ethz.ch>
//
// AUTOMATICALLY GENERATED by genoccamy.py; edit the script instead.

`include "common_cells/registers.svh"

module occamy_top
  import occamy_pkg::*;
(
    input  logic             clk_i,
    input  logic             rtc_i,
    input  logic             rst_ni,
    input  logic             test_mode_i,
    input  logic [ 1:0]      chip_id_i,
    input  logic [ 1:0]      boot_mode_i,
    // pad cfg
    output logic [31:0]      pad_slw_o,
    output logic [31:0]      pad_smt_o,
    output logic [31:0][1:0] pad_drv_o,
    // `uart` Interface
    output logic             uart_tx_o,
    input  logic             uart_rx_i,
    // `gpio` Interface
    input  logic [31:0]      gpio_d_i,
    output logic [31:0]      gpio_d_o,
    output logic [31:0]      gpio_oe_o,
    output logic [31:0]      gpio_puen_o,
    output logic [31:0]      gpio_pden_o,
    // `serial` Interface
    input  logic             serial_clk_i,
    input  logic [ 3:0]      serial_data_i,
    output logic [ 3:0]      serial_data_o,
    // `jtag` Interface
    input  logic             jtag_trst_ni,
    input  logic             jtag_tck_i,
    input  logic             jtag_tms_i,
    input  logic             jtag_tdi_i,
    output logic             jtag_tdo_o,
    // `i2c` Interface
    output logic             i2c_sda_o,
    input  logic             i2c_sda_i,
    output logic             i2c_sda_en_o,
    output logic             i2c_scl_o,
    input  logic             i2c_scl_i,
    output logic             i2c_scl_en_o,
    // `SPI Host` Interface
    output logic             spim_sck_o,
    output logic             spim_sck_en_o,
    output logic [ 1:0]      spim_csb_o,
    output logic [ 1:0]      spim_csb_en_o,
    output logic [ 3:0]      spim_sd_o,
    output logic [ 3:0]      spim_sd_en_o,
    input        [ 3:0]      spim_sd_i,

    /// Boot ROM
    output reg_a48_d32_req_t bootrom_req_o,
    input  reg_a48_d32_rsp_t bootrom_rsp_i,

    /// PCIe Ports
    output axi_a48_d512_i7_u0_req_t  pcie_axi_req_o,
    input  axi_a48_d512_i7_u0_resp_t pcie_axi_rsp_i,

    input  axi_a48_d512_i3_u0_req_t  pcie_axi_req_i,
    output axi_a48_d512_i3_u0_resp_t pcie_axi_rsp_o
    /// HBM2e Ports

    /// HBI Ports
);

  occamy_soc_reg_pkg::occamy_soc_reg2hw_t soc_ctrl_in;
  occamy_soc_reg_pkg::occamy_soc_hw2reg_t soc_ctrl_out;
  // Machine timer and machine software interrupt pending.
  logic mtip, msip;
  // Supervisor and machine-mode external interrupt pending.
  logic [1:0] eip;
  occamy_interrupt_t irq;

  addr_t [7:0] s1_quadrant_base_addr;
  assign s1_quadrant_base_addr[0] = ClusterBaseOffset + 0 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[1] = ClusterBaseOffset + 1 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[2] = ClusterBaseOffset + 2 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[3] = ClusterBaseOffset + 3 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[4] = ClusterBaseOffset + 4 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[5] = ClusterBaseOffset + 5 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[6] = ClusterBaseOffset + 6 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[7] = ClusterBaseOffset + 7 * S1QuadrantAddressSpace;

  ///////////////////
  //   CROSSBARS   //
  ///////////////////

  axi_lite_a48_d64_req_t [0:0] soc_axi_lite_periph_xbar_in_req;
  axi_lite_a48_d64_rsp_t [0:0] soc_axi_lite_periph_xbar_in_rsp;
  axi_lite_a48_d64_req_t [0:0] soc_axi_lite_periph_xbar_out_req;
  axi_lite_a48_d64_rsp_t [0:0] soc_axi_lite_periph_xbar_out_rsp;

  // The `soc_axi_lite_periph_xbar` crossbar.
  axi_lite_xbar #(
      .Cfg      (SocAxiLitePeriphXbarCfg),
      .aw_chan_t(axi_lite_a48_d64_aw_chan_t),
      .w_chan_t (axi_lite_a48_d64_w_chan_t),
      .b_chan_t (axi_lite_a48_d64_b_chan_t),
      .ar_chan_t(axi_lite_a48_d64_ar_chan_t),
      .r_chan_t (axi_lite_a48_d64_r_chan_t),
      .req_t    (axi_lite_a48_d64_req_t),
      .resp_t   (axi_lite_a48_d64_rsp_t),
      .rule_t   (xbar_rule_48_t)
  ) i_soc_axi_lite_periph_xbar (
      .clk_i                (clk_i),
      .rst_ni               (rst_ni),
      .test_i               (test_mode_i),
      .slv_ports_req_i      (soc_axi_lite_periph_xbar_in_req),
      .slv_ports_resp_o     (soc_axi_lite_periph_xbar_in_rsp),
      .mst_ports_req_o      (soc_axi_lite_periph_xbar_out_req),
      .mst_ports_resp_i     (soc_axi_lite_periph_xbar_out_rsp),
      .addr_map_i           (SocAxiLitePeriphXbarAddrmap),
      .en_default_mst_port_i('1),
      .default_mst_port_i   ('0)
  );

  reg_a48_d32_req_t [0:0] soc_regbus_periph_xbar_in_req;
  reg_a48_d32_rsp_t [0:0] soc_regbus_periph_xbar_in_rsp;
  reg_a48_d32_req_t [7:0] soc_regbus_periph_xbar_out_req;
  reg_a48_d32_rsp_t [7:0] soc_regbus_periph_xbar_out_rsp;

  logic [cf_math_pkg::idx_width(
SOC_REGBUS_PERIPH_XBAR_NUM_OUTPUTS
)-1:0] soc_regbus_periph_xbar_select;

  // The `soc_regbus_periph_xbar` crossbar.
  reg_demux #(
      .NoPorts(SOC_REGBUS_PERIPH_XBAR_NUM_OUTPUTS),
      .req_t  (reg_a48_d32_req_t),
      .rsp_t  (reg_a48_d32_rsp_t)
  ) i_soc_regbus_periph_xbar (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .in_select_i(soc_regbus_periph_xbar_select),
      .in_req_i(soc_regbus_periph_xbar_in_req),
      .in_rsp_o(soc_regbus_periph_xbar_in_rsp),
      .out_req_o(soc_regbus_periph_xbar_out_req),
      .out_rsp_i(soc_regbus_periph_xbar_out_rsp)
  );

  addr_decode #(
      .NoIndices(SOC_REGBUS_PERIPH_XBAR_NUM_OUTPUTS),
      .NoRules(8),
      .addr_t(logic [47:0]),
      .rule_t(xbar_rule_48_t)
  ) i_addr_decode_soc_regbus_periph_xbar (
      .addr_i(soc_regbus_periph_xbar_in_req[0].addr),
      .addr_map_i(SocRegbusPeriphXbarAddrmap),
      .idx_o(soc_regbus_periph_xbar_select),
      .dec_valid_o(),
      .dec_error_o(),
      .en_default_idx_i('0),
      .default_idx_i('0)
  );

  /// Address map of the `soc_wide_xbar` crossbar.
  xbar_rule_48_t [8:0] SocWideXbarAddrmap;
  assign SocWideXbarAddrmap = '{
    '{ idx: 8, start_addr: 48'h80000000, end_addr: 48'h100000000 },
    '{ idx: 0, start_addr: s1_quadrant_base_addr[0], end_addr: s1_quadrant_base_addr[0] + S1QuadrantAddressSpace },
    '{ idx: 1, start_addr: s1_quadrant_base_addr[1], end_addr: s1_quadrant_base_addr[1] + S1QuadrantAddressSpace },
    '{ idx: 2, start_addr: s1_quadrant_base_addr[2], end_addr: s1_quadrant_base_addr[2] + S1QuadrantAddressSpace },
    '{ idx: 3, start_addr: s1_quadrant_base_addr[3], end_addr: s1_quadrant_base_addr[3] + S1QuadrantAddressSpace },
    '{ idx: 4, start_addr: s1_quadrant_base_addr[4], end_addr: s1_quadrant_base_addr[4] + S1QuadrantAddressSpace },
    '{ idx: 5, start_addr: s1_quadrant_base_addr[5], end_addr: s1_quadrant_base_addr[5] + S1QuadrantAddressSpace },
    '{ idx: 6, start_addr: s1_quadrant_base_addr[6], end_addr: s1_quadrant_base_addr[6] + S1QuadrantAddressSpace },
    '{ idx: 7, start_addr: s1_quadrant_base_addr[7], end_addr: s1_quadrant_base_addr[7] + S1QuadrantAddressSpace }
  };

  soc_wide_xbar_in_req_t   [9:0] soc_wide_xbar_in_req;
  soc_wide_xbar_in_resp_t  [9:0] soc_wide_xbar_in_rsp;
  soc_wide_xbar_out_req_t  [8:0] soc_wide_xbar_out_req;
  soc_wide_xbar_out_resp_t [8:0] soc_wide_xbar_out_rsp;

  axi_xbar #(
      .Cfg(SocWideXbarCfg),
      .Connectivity  ( 90'b011111111111111111101111111110111111111011111111101111111110111111111011111111101111111110 ),
      .slv_aw_chan_t(axi_a48_d512_i3_u0_aw_chan_t),
      .mst_aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i3_u0_w_chan_t),
      .slv_b_chan_t(axi_a48_d512_i3_u0_b_chan_t),
      .mst_b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .slv_ar_chan_t(axi_a48_d512_i3_u0_ar_chan_t),
      .mst_ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .slv_r_chan_t(axi_a48_d512_i3_u0_r_chan_t),
      .mst_r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .slv_req_t(axi_a48_d512_i3_u0_req_t),
      .slv_resp_t(axi_a48_d512_i3_u0_resp_t),
      .mst_req_t(axi_a48_d512_i7_u0_req_t),
      .mst_resp_t(axi_a48_d512_i7_u0_resp_t),
      .rule_t(xbar_rule_48_t)
  ) i_soc_wide_xbar (
      .clk_i                (clk_i),
      .rst_ni               (rst_ni),
      .test_i               (test_mode_i),
      .slv_ports_req_i      (soc_wide_xbar_in_req),
      .slv_ports_resp_o     (soc_wide_xbar_in_rsp),
      .mst_ports_req_o      (soc_wide_xbar_out_req),
      .mst_ports_resp_i     (soc_wide_xbar_out_rsp),
      .addr_map_i           (SocWideXbarAddrmap),
      .en_default_mst_port_i('1),
      .default_mst_port_i   ('0)
  );

  /// Address map of the `soc_narrow_xbar` crossbar.
  xbar_rule_48_t [10:0] SocNarrowXbarAddrmap;
  assign SocNarrowXbarAddrmap = '{
    '{ idx: 8, start_addr: 48'h00000000, end_addr: 48'h00035000 },
    '{ idx: 9, start_addr: 48'h80000000, end_addr: 48'h100000000 },
    '{ idx: 10, start_addr: 48'h00000000, end_addr: 48'h00035000 },
    '{ idx: 0, start_addr: s1_quadrant_base_addr[0], end_addr: s1_quadrant_base_addr[0] + S1QuadrantAddressSpace },
    '{ idx: 1, start_addr: s1_quadrant_base_addr[1], end_addr: s1_quadrant_base_addr[1] + S1QuadrantAddressSpace },
    '{ idx: 2, start_addr: s1_quadrant_base_addr[2], end_addr: s1_quadrant_base_addr[2] + S1QuadrantAddressSpace },
    '{ idx: 3, start_addr: s1_quadrant_base_addr[3], end_addr: s1_quadrant_base_addr[3] + S1QuadrantAddressSpace },
    '{ idx: 4, start_addr: s1_quadrant_base_addr[4], end_addr: s1_quadrant_base_addr[4] + S1QuadrantAddressSpace },
    '{ idx: 5, start_addr: s1_quadrant_base_addr[5], end_addr: s1_quadrant_base_addr[5] + S1QuadrantAddressSpace },
    '{ idx: 6, start_addr: s1_quadrant_base_addr[6], end_addr: s1_quadrant_base_addr[6] + S1QuadrantAddressSpace },
    '{ idx: 7, start_addr: s1_quadrant_base_addr[7], end_addr: s1_quadrant_base_addr[7] + S1QuadrantAddressSpace }
  };

  soc_narrow_xbar_in_req_t   [ 8:0] soc_narrow_xbar_in_req;
  soc_narrow_xbar_in_resp_t  [ 8:0] soc_narrow_xbar_in_rsp;
  soc_narrow_xbar_out_req_t  [10:0] soc_narrow_xbar_out_req;
  soc_narrow_xbar_out_resp_t [10:0] soc_narrow_xbar_out_rsp;

  axi_xbar #(
      .Cfg(SocNarrowXbarCfg),
      .Connectivity  ( 99'b111111111111110111111111110111111111110111111111110111111111110111111111110111111111110111111111110 ),
      .slv_aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .mst_aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .slv_b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .mst_b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .slv_ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .mst_ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .slv_r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .mst_r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .slv_req_t(axi_a48_d64_i4_u0_req_t),
      .slv_resp_t(axi_a48_d64_i4_u0_resp_t),
      .mst_req_t(axi_a48_d64_i8_u0_req_t),
      .mst_resp_t(axi_a48_d64_i8_u0_resp_t),
      .rule_t(xbar_rule_48_t)
  ) i_soc_narrow_xbar (
      .clk_i                (clk_i),
      .rst_ni               (rst_ni),
      .test_i               (test_mode_i),
      .slv_ports_req_i      (soc_narrow_xbar_in_req),
      .slv_ports_resp_o     (soc_narrow_xbar_in_rsp),
      .mst_ports_req_o      (soc_narrow_xbar_out_req),
      .mst_ports_resp_i     (soc_narrow_xbar_out_rsp),
      .addr_map_i           (SocNarrowXbarAddrmap),
      .en_default_mst_port_i('1),
      .default_mst_port_i   ('0)
  );


  /////////////////////////////
  // Narrow to Wide Crossbar //
  /////////////////////////////
  axi_a48_d64_i3_u0_req_t  soc_narrow_wide_iwc_req;
  axi_a48_d64_i3_u0_resp_t soc_narrow_wide_iwc_rsp;

  axi_id_remap #(
      .AxiSlvPortIdWidth(8),
      .AxiSlvPortMaxUniqIds(4),
      .AxiMaxTxnsPerId(4),
      .AxiMstPortIdWidth(3),
      .slv_req_t(axi_a48_d64_i8_u0_req_t),
      .slv_resp_t(axi_a48_d64_i8_u0_resp_t),
      .mst_req_t(axi_a48_d64_i3_u0_req_t),
      .mst_resp_t(axi_a48_d64_i3_u0_resp_t)
  ) i_soc_narrow_wide_iwc (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_SOC_WIDE]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_SOC_WIDE]),
      .mst_req_o(soc_narrow_wide_iwc_req),
      .mst_resp_i(soc_narrow_wide_iwc_rsp)
  );
  axi_dw_converter #(
      .AxiSlvPortDataWidth(64),
      .AxiMstPortDataWidth(512),
      .AxiAddrWidth(48),
      .AxiIdWidth(3),
      .aw_chan_t(axi_a48_d512_i3_u0_aw_chan_t),
      .mst_w_chan_t(axi_a48_d512_i3_u0_w_chan_t),
      .slv_w_chan_t(axi_a48_d64_i3_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i3_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i3_u0_ar_chan_t),
      .mst_r_chan_t(axi_a48_d512_i3_u0_r_chan_t),
      .slv_r_chan_t(axi_a48_d64_i3_u0_r_chan_t),
      .axi_mst_req_t(axi_a48_d512_i3_u0_req_t),
      .axi_mst_resp_t(axi_a48_d512_i3_u0_resp_t),
      .axi_slv_req_t(axi_a48_d64_i3_u0_req_t),
      .axi_slv_resp_t(axi_a48_d64_i3_u0_resp_t)
  ) i_soc_narrow_wide_dw (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_wide_iwc_req),
      .slv_resp_o(soc_narrow_wide_iwc_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_SOC_NARROW]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_SOC_NARROW])
  );



  //////////
  // PCIe //
  //////////
  assign pcie_axi_req_o = soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_PCIE];
  assign soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_PCIE] = pcie_axi_rsp_i;
  assign soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_PCIE] = pcie_axi_req_i;
  assign pcie_axi_rsp_o = soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_PCIE];

  //////////
  // CVA6 //
  //////////
  localparam logic [63:0] BootAddr = 'h1000;
  axi_a48_d64_i4_u0_req_t  cva6_axi_req;
  axi_a48_d64_i4_u0_resp_t cva6_axi_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .req_t(axi_a48_d64_i4_u0_req_t),
      .resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_cva6_axi_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(cva6_axi_req),
      .slv_resp_o(cva6_axi_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_CVA6]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_CVA6])
  );

  occamy_cva6 i_occamy_cva6 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .boot_addr_i(BootAddr),
      .hart_id_i('0),
      .irq_i(eip),
      .ipi_i(msip),
      .time_irq_i(mtip),
      .debug_req_i('0),
      .axi_req_o(cva6_axi_req),
      .axi_resp_i(cva6_axi_rsp)
  );

  ////////////////////
  // S1 Quadrants 0 //
  ////////////////////
  axi_a48_d64_i8_u0_req_t  narrow_in_cut_0_req;
  axi_a48_d64_i8_u0_resp_t narrow_in_cut_0_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .req_t(axi_a48_d64_i8_u0_req_t),
      .resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_narrow_in_cut_0 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_0]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_0]),
      .mst_req_o(narrow_in_cut_0_req),
      .mst_resp_i(narrow_in_cut_0_rsp)
  );
  axi_a48_d64_i4_u0_req_t  narrow_out_cut_0_req;
  axi_a48_d64_i4_u0_resp_t narrow_out_cut_0_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .req_t(axi_a48_d64_i4_u0_req_t),
      .resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_narrow_out_cut_0_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_out_cut_0_req),
      .slv_resp_o(narrow_out_cut_0_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_0]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_0])
  );
  axi_a48_d512_i7_u0_req_t  wide_in_cut_0_req;
  axi_a48_d512_i7_u0_resp_t wide_in_cut_0_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i7_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .req_t(axi_a48_d512_i7_u0_req_t),
      .resp_t(axi_a48_d512_i7_u0_resp_t)
  ) i_wide_in_cut_0 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_0]),
      .slv_resp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_0]),
      .mst_req_o(wide_in_cut_0_req),
      .mst_resp_i(wide_in_cut_0_rsp)
  );
  axi_a48_d512_i3_u0_req_t  wide_out_cut_0_req;
  axi_a48_d512_i3_u0_resp_t wide_out_cut_0_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i3_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i3_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i3_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i3_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i3_u0_r_chan_t),
      .req_t(axi_a48_d512_i3_u0_req_t),
      .resp_t(axi_a48_d512_i3_u0_resp_t)
  ) i_wide_out_cut_0_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_out_cut_0_req),
      .slv_resp_o(wide_out_cut_0_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_0]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_0])
  );

  occamy_quadrant_s1 i_occamy_quadrant_s1_0 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd0),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i('0),
      .msip_i('0),
      .quadrant_narrow_out_req_o(narrow_out_cut_0_req),
      .quadrant_narrow_out_rsp_i(narrow_out_cut_0_rsp),
      .quadrant_narrow_in_req_i(narrow_in_cut_0_req),
      .quadrant_narrow_in_rsp_o(narrow_in_cut_0_rsp),
      .quadrant_wide_out_req_o(wide_out_cut_0_req),
      .quadrant_wide_out_rsp_i(wide_out_cut_0_rsp),
      .quadrant_wide_in_req_i(wide_in_cut_0_req),
      .quadrant_wide_in_rsp_o(wide_in_cut_0_rsp)
  );

  ////////////////////
  // S1 Quadrants 1 //
  ////////////////////
  axi_a48_d64_i8_u0_req_t  narrow_in_cut_1_req;
  axi_a48_d64_i8_u0_resp_t narrow_in_cut_1_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .req_t(axi_a48_d64_i8_u0_req_t),
      .resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_narrow_in_cut_1 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_1]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_1]),
      .mst_req_o(narrow_in_cut_1_req),
      .mst_resp_i(narrow_in_cut_1_rsp)
  );
  axi_a48_d64_i4_u0_req_t  narrow_out_cut_1_req;
  axi_a48_d64_i4_u0_resp_t narrow_out_cut_1_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .req_t(axi_a48_d64_i4_u0_req_t),
      .resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_narrow_out_cut_1_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_out_cut_1_req),
      .slv_resp_o(narrow_out_cut_1_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_1]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_1])
  );
  axi_a48_d512_i7_u0_req_t  wide_in_cut_1_req;
  axi_a48_d512_i7_u0_resp_t wide_in_cut_1_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i7_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .req_t(axi_a48_d512_i7_u0_req_t),
      .resp_t(axi_a48_d512_i7_u0_resp_t)
  ) i_wide_in_cut_1 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_1]),
      .slv_resp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_1]),
      .mst_req_o(wide_in_cut_1_req),
      .mst_resp_i(wide_in_cut_1_rsp)
  );
  axi_a48_d512_i3_u0_req_t  wide_out_cut_1_req;
  axi_a48_d512_i3_u0_resp_t wide_out_cut_1_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i3_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i3_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i3_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i3_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i3_u0_r_chan_t),
      .req_t(axi_a48_d512_i3_u0_req_t),
      .resp_t(axi_a48_d512_i3_u0_resp_t)
  ) i_wide_out_cut_1_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_out_cut_1_req),
      .slv_resp_o(wide_out_cut_1_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_1]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_1])
  );

  occamy_quadrant_s1 i_occamy_quadrant_s1_1 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd1),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i('0),
      .msip_i('0),
      .quadrant_narrow_out_req_o(narrow_out_cut_1_req),
      .quadrant_narrow_out_rsp_i(narrow_out_cut_1_rsp),
      .quadrant_narrow_in_req_i(narrow_in_cut_1_req),
      .quadrant_narrow_in_rsp_o(narrow_in_cut_1_rsp),
      .quadrant_wide_out_req_o(wide_out_cut_1_req),
      .quadrant_wide_out_rsp_i(wide_out_cut_1_rsp),
      .quadrant_wide_in_req_i(wide_in_cut_1_req),
      .quadrant_wide_in_rsp_o(wide_in_cut_1_rsp)
  );

  ////////////////////
  // S1 Quadrants 2 //
  ////////////////////
  axi_a48_d64_i8_u0_req_t  narrow_in_cut_2_req;
  axi_a48_d64_i8_u0_resp_t narrow_in_cut_2_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .req_t(axi_a48_d64_i8_u0_req_t),
      .resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_narrow_in_cut_2 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_2]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_2]),
      .mst_req_o(narrow_in_cut_2_req),
      .mst_resp_i(narrow_in_cut_2_rsp)
  );
  axi_a48_d64_i4_u0_req_t  narrow_out_cut_2_req;
  axi_a48_d64_i4_u0_resp_t narrow_out_cut_2_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .req_t(axi_a48_d64_i4_u0_req_t),
      .resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_narrow_out_cut_2_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_out_cut_2_req),
      .slv_resp_o(narrow_out_cut_2_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_2]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_2])
  );
  axi_a48_d512_i7_u0_req_t  wide_in_cut_2_req;
  axi_a48_d512_i7_u0_resp_t wide_in_cut_2_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i7_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .req_t(axi_a48_d512_i7_u0_req_t),
      .resp_t(axi_a48_d512_i7_u0_resp_t)
  ) i_wide_in_cut_2 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_2]),
      .slv_resp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_2]),
      .mst_req_o(wide_in_cut_2_req),
      .mst_resp_i(wide_in_cut_2_rsp)
  );
  axi_a48_d512_i3_u0_req_t  wide_out_cut_2_req;
  axi_a48_d512_i3_u0_resp_t wide_out_cut_2_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i3_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i3_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i3_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i3_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i3_u0_r_chan_t),
      .req_t(axi_a48_d512_i3_u0_req_t),
      .resp_t(axi_a48_d512_i3_u0_resp_t)
  ) i_wide_out_cut_2_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_out_cut_2_req),
      .slv_resp_o(wide_out_cut_2_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_2]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_2])
  );

  occamy_quadrant_s1 i_occamy_quadrant_s1_2 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd2),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i('0),
      .msip_i('0),
      .quadrant_narrow_out_req_o(narrow_out_cut_2_req),
      .quadrant_narrow_out_rsp_i(narrow_out_cut_2_rsp),
      .quadrant_narrow_in_req_i(narrow_in_cut_2_req),
      .quadrant_narrow_in_rsp_o(narrow_in_cut_2_rsp),
      .quadrant_wide_out_req_o(wide_out_cut_2_req),
      .quadrant_wide_out_rsp_i(wide_out_cut_2_rsp),
      .quadrant_wide_in_req_i(wide_in_cut_2_req),
      .quadrant_wide_in_rsp_o(wide_in_cut_2_rsp)
  );

  ////////////////////
  // S1 Quadrants 3 //
  ////////////////////
  axi_a48_d64_i8_u0_req_t  narrow_in_cut_3_req;
  axi_a48_d64_i8_u0_resp_t narrow_in_cut_3_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .req_t(axi_a48_d64_i8_u0_req_t),
      .resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_narrow_in_cut_3 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_3]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_3]),
      .mst_req_o(narrow_in_cut_3_req),
      .mst_resp_i(narrow_in_cut_3_rsp)
  );
  axi_a48_d64_i4_u0_req_t  narrow_out_cut_3_req;
  axi_a48_d64_i4_u0_resp_t narrow_out_cut_3_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .req_t(axi_a48_d64_i4_u0_req_t),
      .resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_narrow_out_cut_3_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_out_cut_3_req),
      .slv_resp_o(narrow_out_cut_3_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_3]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_3])
  );
  axi_a48_d512_i7_u0_req_t  wide_in_cut_3_req;
  axi_a48_d512_i7_u0_resp_t wide_in_cut_3_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i7_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .req_t(axi_a48_d512_i7_u0_req_t),
      .resp_t(axi_a48_d512_i7_u0_resp_t)
  ) i_wide_in_cut_3 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_3]),
      .slv_resp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_3]),
      .mst_req_o(wide_in_cut_3_req),
      .mst_resp_i(wide_in_cut_3_rsp)
  );
  axi_a48_d512_i3_u0_req_t  wide_out_cut_3_req;
  axi_a48_d512_i3_u0_resp_t wide_out_cut_3_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i3_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i3_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i3_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i3_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i3_u0_r_chan_t),
      .req_t(axi_a48_d512_i3_u0_req_t),
      .resp_t(axi_a48_d512_i3_u0_resp_t)
  ) i_wide_out_cut_3_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_out_cut_3_req),
      .slv_resp_o(wide_out_cut_3_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_3]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_3])
  );

  occamy_quadrant_s1 i_occamy_quadrant_s1_3 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd3),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i('0),
      .msip_i('0),
      .quadrant_narrow_out_req_o(narrow_out_cut_3_req),
      .quadrant_narrow_out_rsp_i(narrow_out_cut_3_rsp),
      .quadrant_narrow_in_req_i(narrow_in_cut_3_req),
      .quadrant_narrow_in_rsp_o(narrow_in_cut_3_rsp),
      .quadrant_wide_out_req_o(wide_out_cut_3_req),
      .quadrant_wide_out_rsp_i(wide_out_cut_3_rsp),
      .quadrant_wide_in_req_i(wide_in_cut_3_req),
      .quadrant_wide_in_rsp_o(wide_in_cut_3_rsp)
  );

  ////////////////////
  // S1 Quadrants 4 //
  ////////////////////
  axi_a48_d64_i8_u0_req_t  narrow_in_cut_4_req;
  axi_a48_d64_i8_u0_resp_t narrow_in_cut_4_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .req_t(axi_a48_d64_i8_u0_req_t),
      .resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_narrow_in_cut_4 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_4]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_4]),
      .mst_req_o(narrow_in_cut_4_req),
      .mst_resp_i(narrow_in_cut_4_rsp)
  );
  axi_a48_d64_i4_u0_req_t  narrow_out_cut_4_req;
  axi_a48_d64_i4_u0_resp_t narrow_out_cut_4_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .req_t(axi_a48_d64_i4_u0_req_t),
      .resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_narrow_out_cut_4_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_out_cut_4_req),
      .slv_resp_o(narrow_out_cut_4_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_4]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_4])
  );
  axi_a48_d512_i7_u0_req_t  wide_in_cut_4_req;
  axi_a48_d512_i7_u0_resp_t wide_in_cut_4_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i7_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .req_t(axi_a48_d512_i7_u0_req_t),
      .resp_t(axi_a48_d512_i7_u0_resp_t)
  ) i_wide_in_cut_4 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_4]),
      .slv_resp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_4]),
      .mst_req_o(wide_in_cut_4_req),
      .mst_resp_i(wide_in_cut_4_rsp)
  );
  axi_a48_d512_i3_u0_req_t  wide_out_cut_4_req;
  axi_a48_d512_i3_u0_resp_t wide_out_cut_4_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i3_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i3_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i3_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i3_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i3_u0_r_chan_t),
      .req_t(axi_a48_d512_i3_u0_req_t),
      .resp_t(axi_a48_d512_i3_u0_resp_t)
  ) i_wide_out_cut_4_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_out_cut_4_req),
      .slv_resp_o(wide_out_cut_4_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_4]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_4])
  );

  occamy_quadrant_s1 i_occamy_quadrant_s1_4 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd4),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i('0),
      .msip_i('0),
      .quadrant_narrow_out_req_o(narrow_out_cut_4_req),
      .quadrant_narrow_out_rsp_i(narrow_out_cut_4_rsp),
      .quadrant_narrow_in_req_i(narrow_in_cut_4_req),
      .quadrant_narrow_in_rsp_o(narrow_in_cut_4_rsp),
      .quadrant_wide_out_req_o(wide_out_cut_4_req),
      .quadrant_wide_out_rsp_i(wide_out_cut_4_rsp),
      .quadrant_wide_in_req_i(wide_in_cut_4_req),
      .quadrant_wide_in_rsp_o(wide_in_cut_4_rsp)
  );

  ////////////////////
  // S1 Quadrants 5 //
  ////////////////////
  axi_a48_d64_i8_u0_req_t  narrow_in_cut_5_req;
  axi_a48_d64_i8_u0_resp_t narrow_in_cut_5_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .req_t(axi_a48_d64_i8_u0_req_t),
      .resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_narrow_in_cut_5 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_5]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_5]),
      .mst_req_o(narrow_in_cut_5_req),
      .mst_resp_i(narrow_in_cut_5_rsp)
  );
  axi_a48_d64_i4_u0_req_t  narrow_out_cut_5_req;
  axi_a48_d64_i4_u0_resp_t narrow_out_cut_5_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .req_t(axi_a48_d64_i4_u0_req_t),
      .resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_narrow_out_cut_5_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_out_cut_5_req),
      .slv_resp_o(narrow_out_cut_5_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_5]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_5])
  );
  axi_a48_d512_i7_u0_req_t  wide_in_cut_5_req;
  axi_a48_d512_i7_u0_resp_t wide_in_cut_5_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i7_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .req_t(axi_a48_d512_i7_u0_req_t),
      .resp_t(axi_a48_d512_i7_u0_resp_t)
  ) i_wide_in_cut_5 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_5]),
      .slv_resp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_5]),
      .mst_req_o(wide_in_cut_5_req),
      .mst_resp_i(wide_in_cut_5_rsp)
  );
  axi_a48_d512_i3_u0_req_t  wide_out_cut_5_req;
  axi_a48_d512_i3_u0_resp_t wide_out_cut_5_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i3_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i3_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i3_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i3_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i3_u0_r_chan_t),
      .req_t(axi_a48_d512_i3_u0_req_t),
      .resp_t(axi_a48_d512_i3_u0_resp_t)
  ) i_wide_out_cut_5_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_out_cut_5_req),
      .slv_resp_o(wide_out_cut_5_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_5]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_5])
  );

  occamy_quadrant_s1 i_occamy_quadrant_s1_5 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd5),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i('0),
      .msip_i('0),
      .quadrant_narrow_out_req_o(narrow_out_cut_5_req),
      .quadrant_narrow_out_rsp_i(narrow_out_cut_5_rsp),
      .quadrant_narrow_in_req_i(narrow_in_cut_5_req),
      .quadrant_narrow_in_rsp_o(narrow_in_cut_5_rsp),
      .quadrant_wide_out_req_o(wide_out_cut_5_req),
      .quadrant_wide_out_rsp_i(wide_out_cut_5_rsp),
      .quadrant_wide_in_req_i(wide_in_cut_5_req),
      .quadrant_wide_in_rsp_o(wide_in_cut_5_rsp)
  );

  ////////////////////
  // S1 Quadrants 6 //
  ////////////////////
  axi_a48_d64_i8_u0_req_t  narrow_in_cut_6_req;
  axi_a48_d64_i8_u0_resp_t narrow_in_cut_6_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .req_t(axi_a48_d64_i8_u0_req_t),
      .resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_narrow_in_cut_6 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_6]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_6]),
      .mst_req_o(narrow_in_cut_6_req),
      .mst_resp_i(narrow_in_cut_6_rsp)
  );
  axi_a48_d64_i4_u0_req_t  narrow_out_cut_6_req;
  axi_a48_d64_i4_u0_resp_t narrow_out_cut_6_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .req_t(axi_a48_d64_i4_u0_req_t),
      .resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_narrow_out_cut_6_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_out_cut_6_req),
      .slv_resp_o(narrow_out_cut_6_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_6]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_6])
  );
  axi_a48_d512_i7_u0_req_t  wide_in_cut_6_req;
  axi_a48_d512_i7_u0_resp_t wide_in_cut_6_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i7_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .req_t(axi_a48_d512_i7_u0_req_t),
      .resp_t(axi_a48_d512_i7_u0_resp_t)
  ) i_wide_in_cut_6 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_6]),
      .slv_resp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_6]),
      .mst_req_o(wide_in_cut_6_req),
      .mst_resp_i(wide_in_cut_6_rsp)
  );
  axi_a48_d512_i3_u0_req_t  wide_out_cut_6_req;
  axi_a48_d512_i3_u0_resp_t wide_out_cut_6_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i3_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i3_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i3_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i3_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i3_u0_r_chan_t),
      .req_t(axi_a48_d512_i3_u0_req_t),
      .resp_t(axi_a48_d512_i3_u0_resp_t)
  ) i_wide_out_cut_6_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_out_cut_6_req),
      .slv_resp_o(wide_out_cut_6_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_6]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_6])
  );

  occamy_quadrant_s1 i_occamy_quadrant_s1_6 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd6),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i('0),
      .msip_i('0),
      .quadrant_narrow_out_req_o(narrow_out_cut_6_req),
      .quadrant_narrow_out_rsp_i(narrow_out_cut_6_rsp),
      .quadrant_narrow_in_req_i(narrow_in_cut_6_req),
      .quadrant_narrow_in_rsp_o(narrow_in_cut_6_rsp),
      .quadrant_wide_out_req_o(wide_out_cut_6_req),
      .quadrant_wide_out_rsp_i(wide_out_cut_6_rsp),
      .quadrant_wide_in_req_i(wide_in_cut_6_req),
      .quadrant_wide_in_rsp_o(wide_in_cut_6_rsp)
  );

  ////////////////////
  // S1 Quadrants 7 //
  ////////////////////
  axi_a48_d64_i8_u0_req_t  narrow_in_cut_7_req;
  axi_a48_d64_i8_u0_resp_t narrow_in_cut_7_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i8_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i8_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .req_t(axi_a48_d64_i8_u0_req_t),
      .resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_narrow_in_cut_7 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_7]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_7]),
      .mst_req_o(narrow_in_cut_7_req),
      .mst_resp_i(narrow_in_cut_7_rsp)
  );
  axi_a48_d64_i4_u0_req_t  narrow_out_cut_7_req;
  axi_a48_d64_i4_u0_resp_t narrow_out_cut_7_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .req_t(axi_a48_d64_i4_u0_req_t),
      .resp_t(axi_a48_d64_i4_u0_resp_t)
  ) i_narrow_out_cut_7_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_out_cut_7_req),
      .slv_resp_o(narrow_out_cut_7_rsp),
      .mst_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_7]),
      .mst_resp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_7])
  );
  axi_a48_d512_i7_u0_req_t  wide_in_cut_7_req;
  axi_a48_d512_i7_u0_resp_t wide_in_cut_7_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i7_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .req_t(axi_a48_d512_i7_u0_req_t),
      .resp_t(axi_a48_d512_i7_u0_resp_t)
  ) i_wide_in_cut_7 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_7]),
      .slv_resp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_7]),
      .mst_req_o(wide_in_cut_7_req),
      .mst_resp_i(wide_in_cut_7_rsp)
  );
  axi_a48_d512_i3_u0_req_t  wide_out_cut_7_req;
  axi_a48_d512_i3_u0_resp_t wide_out_cut_7_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i3_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i3_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i3_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i3_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i3_u0_r_chan_t),
      .req_t(axi_a48_d512_i3_u0_req_t),
      .resp_t(axi_a48_d512_i3_u0_resp_t)
  ) i_wide_out_cut_7_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_out_cut_7_req),
      .slv_resp_o(wide_out_cut_7_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_7]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_7])
  );

  occamy_quadrant_s1 i_occamy_quadrant_s1_7 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd7),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i('0),
      .msip_i('0),
      .quadrant_narrow_out_req_o(narrow_out_cut_7_req),
      .quadrant_narrow_out_rsp_i(narrow_out_cut_7_rsp),
      .quadrant_narrow_in_req_i(narrow_in_cut_7_req),
      .quadrant_narrow_in_rsp_o(narrow_in_cut_7_rsp),
      .quadrant_wide_out_req_o(wide_out_cut_7_req),
      .quadrant_wide_out_rsp_i(wide_out_cut_7_rsp),
      .quadrant_wide_in_req_i(wide_in_cut_7_req),
      .quadrant_wide_in_rsp_o(wide_in_cut_7_rsp)
  );


  /////////////////
  // Peripherals //
  /////////////////
  axi_to_axi_lite #(
      .AxiAddrWidth(48),
      .AxiDataWidth(64),
      .AxiIdWidth(8),
      .AxiUserWidth(1),
      .AxiMaxWriteTxns(4),
      .AxiMaxReadTxns(4),
      .FallThrough(0),
      .full_req_t(axi_a48_d64_i8_u0_req_t),
      .full_resp_t(axi_a48_d64_i8_u0_resp_t),
      .lite_req_t(axi_lite_a48_d64_req_t),
      .lite_resp_t(axi_lite_a48_d64_rsp_t)
  ) i_axi_to_axi_lite_periph_pc (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_i(test_mode_i),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_PERIPH]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_PERIPH]),
      .mst_req_o(soc_axi_lite_periph_xbar_in_req[SOC_AXI_LITE_PERIPH_XBAR_IN_SOC]),
      .mst_resp_i(soc_axi_lite_periph_xbar_in_rsp[SOC_AXI_LITE_PERIPH_XBAR_IN_SOC])
  );



  axi_a48_d32_i8_u0_req_t  axi_to_axi_lite_dw_req;
  axi_a48_d32_i8_u0_resp_t axi_to_axi_lite_dw_rsp;

  axi_dw_converter #(
      .AxiSlvPortDataWidth(64),
      .AxiMstPortDataWidth(32),
      .AxiAddrWidth(48),
      .AxiIdWidth(8),
      .aw_chan_t(axi_a48_d32_i8_u0_aw_chan_t),
      .mst_w_chan_t(axi_a48_d32_i8_u0_w_chan_t),
      .slv_w_chan_t(axi_a48_d64_i8_u0_w_chan_t),
      .b_chan_t(axi_a48_d32_i8_u0_b_chan_t),
      .ar_chan_t(axi_a48_d32_i8_u0_ar_chan_t),
      .mst_r_chan_t(axi_a48_d32_i8_u0_r_chan_t),
      .slv_r_chan_t(axi_a48_d64_i8_u0_r_chan_t),
      .axi_mst_req_t(axi_a48_d32_i8_u0_req_t),
      .axi_mst_resp_t(axi_a48_d32_i8_u0_resp_t),
      .axi_slv_req_t(axi_a48_d64_i8_u0_req_t),
      .axi_slv_resp_t(axi_a48_d64_i8_u0_resp_t)
  ) i_axi_to_axi_lite_dw (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_REGBUS_PERIPH]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_REGBUS_PERIPH]),
      .mst_req_o(axi_to_axi_lite_dw_req),
      .mst_resp_i(axi_to_axi_lite_dw_rsp)
  );

  axi_lite_a48_d32_req_t axi_to_axi_lite_regbus_periph_req;
  axi_lite_a48_d32_rsp_t axi_to_axi_lite_regbus_periph_rsp;

  axi_to_axi_lite #(
      .AxiAddrWidth(48),
      .AxiDataWidth(32),
      .AxiIdWidth(8),
      .AxiUserWidth(1),
      .AxiMaxWriteTxns(4),
      .AxiMaxReadTxns(4),
      .FallThrough(0),
      .full_req_t(axi_a48_d32_i8_u0_req_t),
      .full_resp_t(axi_a48_d32_i8_u0_resp_t),
      .lite_req_t(axi_lite_a48_d32_req_t),
      .lite_resp_t(axi_lite_a48_d32_rsp_t)
  ) i_axi_to_axi_lite_regbus_periph_pc (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_i(test_mode_i),
      .slv_req_i(axi_to_axi_lite_dw_req),
      .slv_resp_o(axi_to_axi_lite_dw_rsp),
      .mst_req_o(axi_to_axi_lite_regbus_periph_req),
      .mst_resp_i(axi_to_axi_lite_regbus_periph_rsp)
  );

  axi_lite_to_reg #(
      .ADDR_WIDTH    (48),
      .DATA_WIDTH    (32),
      .axi_lite_req_t(axi_lite_a48_d32_req_t),
      .axi_lite_rsp_t(axi_lite_a48_d32_rsp_t),
      .reg_req_t     (reg_a48_d32_req_t),
      .reg_rsp_t     (reg_a48_d32_rsp_t)
  ) i_axi_lite_to_regbus_periph_pc (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .axi_lite_req_i(axi_to_axi_lite_regbus_periph_req),
      .axi_lite_rsp_o(axi_to_axi_lite_regbus_periph_rsp),
      .reg_req_o(soc_regbus_periph_xbar_in_req[SOC_REGBUS_PERIPH_XBAR_IN_AXI_LITE_PERIPH_XBAR]),
      .reg_rsp_i(soc_regbus_periph_xbar_in_rsp[SOC_REGBUS_PERIPH_XBAR_IN_AXI_LITE_PERIPH_XBAR])
  );



  ///////////////
  //   CLINT   //
  ///////////////
  clint #(
      .AXI_ADDR_WIDTH(48),
      .AXI_DATA_WIDTH(64),
      .AXI_ID_WIDTH(0),
      .NR_CORES(1),
      .axi_req_t(axi_lite_a48_d64_req_t),
      .axi_resp_t(axi_lite_a48_d64_rsp_t)
  ) i_clint (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .testmode_i(1'b0),
      .axi_req_i(soc_axi_lite_periph_xbar_out_req[SOC_AXI_LITE_PERIPH_XBAR_OUT_CLINT]),
      .axi_resp_o(soc_axi_lite_periph_xbar_out_rsp[SOC_AXI_LITE_PERIPH_XBAR_OUT_CLINT]),
      .rtc_i(rtc_i),
      .timer_irq_o(mtip),
      .ipi_o(msip)
  );

  /////////////////////
  //   SOC CONTROL   //
  /////////////////////
  occamy_soc_reg_top #(
      .reg_req_t(reg_a48_d32_req_t),
      .reg_rsp_t(reg_a48_d32_rsp_t)
  ) i_soc_ctrl (
      .clk_i    (clk_i),
      .rst_ni   (rst_ni),
      .reg_req_i(soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_SOC_CTRL]),
      .reg_rsp_o(soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_SOC_CTRL]),
      .reg2hw   (soc_ctrl_in),
      .hw2reg   (soc_ctrl_out),
`ifdef SYNTHESIS
      .devmode_i(1'b0)
`else
      .devmode_i(1'b1)
`endif
  );

  //////////////
  //   UART   //
  //////////////
  uart #(
      .reg_req_t(reg_a48_d32_req_t),
      .reg_rsp_t(reg_a48_d32_rsp_t)
  ) i_uart (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .reg_req_i(soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_UART]),
      .reg_rsp_o(soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_UART]),
      .cio_tx_o(uart_tx_o),
      .cio_rx_i(uart_rx_i),
      .cio_tx_en_o(),
      .intr_tx_watermark_o(irq.uart_tx_watermark),
      .intr_rx_watermark_o(irq.uart_rx_watermark),
      .intr_tx_empty_o(irq.uart_tx_empty),
      .intr_rx_overflow_o(irq.uart_rx_overflow),
      .intr_rx_frame_err_o(irq.uart_rx_frame_err),
      .intr_rx_break_err_o(irq.uart_rx_break_err),
      .intr_rx_timeout_o(irq.uart_rx_timeout),
      .intr_rx_parity_err_o(irq.uart_rx_parity_err)
  );

  /////////////
  //   ROM   //
  /////////////

  // This is very system specific, so we might be better off
  // placing it outside the top-level.
  assign bootrom_req_o = soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_BOOTROM];
  assign soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_BOOTROM] = bootrom_rsp_i;

  //////////////
  //   PLIC   //
  //////////////
  rv_plic #(
      .reg_req_t(reg_a48_d32_req_t),
      .reg_rsp_t(reg_a48_d32_rsp_t)
  ) i_rv_plic (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .reg_req_i(soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_PLIC]),
      .reg_rsp_o(soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_PLIC]),
      // TODO(zarubaf): Hook up to interrupt sources.
      .intr_src_i('0),
      .irq_o(eip),
      .irq_id_o(),
      .msip_o()
  );

  //////////////////
  //   SPI Host   //
  //////////////////
  spi_host #(
      .reg_req_t(reg_a48_d32_req_t),
      .reg_rsp_t(reg_a48_d32_rsp_t)
  ) i_spi_host (
      // TODO(zarubaf): Fix clock assignment
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .clk_core_i(clk_i),
      .rst_core_ni(rst_ni),
      .reg_req_i(soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_SPIM]),
      .reg_rsp_o(soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_SPIM]),
      .cio_sck_o(spim_sck_o),
      .cio_sck_en_o(spim_sck_en_o),
      .cio_csb_o(spim_csb_o),
      .cio_csb_en_o(spim_csb_en_o),
      .cio_sd_o(spim_sd_o),
      .cio_sd_en_o(spim_sd_en_o),
      .cio_sd_i(spim_sd_i),
      .intr_error_o(irq.spim_error),
      .intr_spi_event_o(irq.spim_spi_event)
  );

  //////////////
  //   GPIO   //
  //////////////
  gpio #(
      .reg_req_t(reg_a48_d32_req_t),
      .reg_rsp_t(reg_a48_d32_rsp_t)
  ) i_gpio (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .reg_req_i(soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_GPIO]),
      .reg_rsp_o(soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_GPIO]),
      .cio_gpio_i(gpio_d_i),
      .cio_gpio_o(gpio_d_o),
      .cio_gpio_en_o(gpio_oe_o),
      .intr_gpio_o(irq.gpio)
  );

  /////////////
  //   I2C   //
  /////////////

  i2c #(
      .reg_req_t(reg_a48_d32_req_t),
      .reg_rsp_t(reg_a48_d32_rsp_t)
  ) i_i2c (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .reg_req_i(soc_regbus_periph_xbar_out_req[SOC_REGBUS_PERIPH_XBAR_OUT_I2C]),
      .reg_rsp_o(soc_regbus_periph_xbar_out_rsp[SOC_REGBUS_PERIPH_XBAR_OUT_I2C]),
      .cio_scl_i(i2c_scl_i),
      .cio_scl_o(i2c_scl_o),
      .cio_scl_en_o(i2c_scl_en_o),
      .cio_sda_i(i2c_sda_i),
      .cio_sda_o(i2c_sda_o),
      .cio_sda_en_o(i2c_sda_en_o),
      .intr_fmt_watermark_o(irq.i2c_fmt_watermark),
      .intr_rx_watermark_o(irq.i2c_rx_watermark),
      .intr_fmt_overflow_o(irq.i2c_fmt_overflow),
      .intr_rx_overflow_o(irq.i2c_rx_overflow),
      .intr_nak_o(irq.i2c_nak),
      .intr_scl_interference_o(irq.i2c_scl_interference),
      .intr_sda_interference_o(irq.i2c_sda_interference),
      .intr_stretch_timeout_o(irq.i2c_stretch_timeout),
      .intr_sda_unstable_o(irq.i2c_sda_unstable),
      .intr_trans_complete_o(irq.i2c_trans_complete),
      .intr_tx_empty_o(irq.i2c_tx_empty),
      .intr_tx_nonempty_o(irq.i2c_tx_nonempty),
      .intr_tx_overflow_o(irq.i2c_tx_overflow),
      .intr_acq_overflow_o(irq.i2c_acq_overflow),
      .intr_ack_stop_o(irq.i2c_ack_stop),
      .intr_host_timeout_o(irq.i2c_host_timeout)
  );

endmodule
