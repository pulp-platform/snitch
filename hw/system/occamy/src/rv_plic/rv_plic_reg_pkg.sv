// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package rv_plic_reg_pkg;

  // Param list
  parameter int NumSrc = 10;
  parameter int NumTarget = 2;
  parameter int PrioWidth = 3;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    logic        q;
  } rv_plic_reg2hw_le_mreg_t;

  typedef struct packed {
    logic [2:0]  q;
  } rv_plic_reg2hw_prio0_reg_t;

  typedef struct packed {
    logic [2:0]  q;
  } rv_plic_reg2hw_prio1_reg_t;

  typedef struct packed {
    logic [2:0]  q;
  } rv_plic_reg2hw_prio2_reg_t;

  typedef struct packed {
    logic [2:0]  q;
  } rv_plic_reg2hw_prio3_reg_t;

  typedef struct packed {
    logic [2:0]  q;
  } rv_plic_reg2hw_prio4_reg_t;

  typedef struct packed {
    logic [2:0]  q;
  } rv_plic_reg2hw_prio5_reg_t;

  typedef struct packed {
    logic [2:0]  q;
  } rv_plic_reg2hw_prio6_reg_t;

  typedef struct packed {
    logic [2:0]  q;
  } rv_plic_reg2hw_prio7_reg_t;

  typedef struct packed {
    logic [2:0]  q;
  } rv_plic_reg2hw_prio8_reg_t;

  typedef struct packed {
    logic [2:0]  q;
  } rv_plic_reg2hw_prio9_reg_t;

  typedef struct packed {
    logic        q;
  } rv_plic_reg2hw_ie0_mreg_t;

  typedef struct packed {
    logic [2:0]  q;
  } rv_plic_reg2hw_threshold0_reg_t;

  typedef struct packed {
    logic [3:0]  q;
    logic        qe;
    logic        re;
  } rv_plic_reg2hw_cc0_reg_t;

  typedef struct packed {
    logic        q;
  } rv_plic_reg2hw_msip0_reg_t;

  typedef struct packed {
    logic        q;
  } rv_plic_reg2hw_ie1_mreg_t;

  typedef struct packed {
    logic [2:0]  q;
  } rv_plic_reg2hw_threshold1_reg_t;

  typedef struct packed {
    logic [3:0]  q;
    logic        qe;
    logic        re;
  } rv_plic_reg2hw_cc1_reg_t;

  typedef struct packed {
    logic        q;
  } rv_plic_reg2hw_msip1_reg_t;


  typedef struct packed {
    logic        d;
    logic        de;
  } rv_plic_hw2reg_ip_mreg_t;

  typedef struct packed {
    logic [3:0]  d;
  } rv_plic_hw2reg_cc0_reg_t;

  typedef struct packed {
    logic [3:0]  d;
  } rv_plic_hw2reg_cc1_reg_t;


  ///////////////////////////////////////
  // Register to internal design logic //
  ///////////////////////////////////////
  typedef struct packed {
    rv_plic_reg2hw_le_mreg_t [9:0] le; // [80:71]
    rv_plic_reg2hw_prio0_reg_t prio0; // [70:68]
    rv_plic_reg2hw_prio1_reg_t prio1; // [67:65]
    rv_plic_reg2hw_prio2_reg_t prio2; // [64:62]
    rv_plic_reg2hw_prio3_reg_t prio3; // [61:59]
    rv_plic_reg2hw_prio4_reg_t prio4; // [58:56]
    rv_plic_reg2hw_prio5_reg_t prio5; // [55:53]
    rv_plic_reg2hw_prio6_reg_t prio6; // [52:50]
    rv_plic_reg2hw_prio7_reg_t prio7; // [49:47]
    rv_plic_reg2hw_prio8_reg_t prio8; // [46:44]
    rv_plic_reg2hw_prio9_reg_t prio9; // [43:41]
    rv_plic_reg2hw_ie0_mreg_t [9:0] ie0; // [40:31]
    rv_plic_reg2hw_threshold0_reg_t threshold0; // [30:28]
    rv_plic_reg2hw_cc0_reg_t cc0; // [27:22]
    rv_plic_reg2hw_msip0_reg_t msip0; // [21:21]
    rv_plic_reg2hw_ie1_mreg_t [9:0] ie1; // [20:11]
    rv_plic_reg2hw_threshold1_reg_t threshold1; // [10:8]
    rv_plic_reg2hw_cc1_reg_t cc1; // [7:2]
    rv_plic_reg2hw_msip1_reg_t msip1; // [1:1]
  } rv_plic_reg2hw_t;

  ///////////////////////////////////////
  // Internal design logic to register //
  ///////////////////////////////////////
  typedef struct packed {
    rv_plic_hw2reg_ip_mreg_t [9:0] ip; // [28:9]
    rv_plic_hw2reg_cc0_reg_t cc0; // [8:3]
    rv_plic_hw2reg_cc1_reg_t cc1; // [2:-3]
  } rv_plic_hw2reg_t;

  // Register Address
  parameter logic [9:0] RV_PLIC_IP_OFFSET = 10'h 0;
  parameter logic [9:0] RV_PLIC_LE_OFFSET = 10'h 4;
  parameter logic [9:0] RV_PLIC_PRIO0_OFFSET = 10'h 8;
  parameter logic [9:0] RV_PLIC_PRIO1_OFFSET = 10'h c;
  parameter logic [9:0] RV_PLIC_PRIO2_OFFSET = 10'h 10;
  parameter logic [9:0] RV_PLIC_PRIO3_OFFSET = 10'h 14;
  parameter logic [9:0] RV_PLIC_PRIO4_OFFSET = 10'h 18;
  parameter logic [9:0] RV_PLIC_PRIO5_OFFSET = 10'h 1c;
  parameter logic [9:0] RV_PLIC_PRIO6_OFFSET = 10'h 20;
  parameter logic [9:0] RV_PLIC_PRIO7_OFFSET = 10'h 24;
  parameter logic [9:0] RV_PLIC_PRIO8_OFFSET = 10'h 28;
  parameter logic [9:0] RV_PLIC_PRIO9_OFFSET = 10'h 2c;
  parameter logic [9:0] RV_PLIC_IE0_OFFSET = 10'h 100;
  parameter logic [9:0] RV_PLIC_THRESHOLD0_OFFSET = 10'h 104;
  parameter logic [9:0] RV_PLIC_CC0_OFFSET = 10'h 108;
  parameter logic [9:0] RV_PLIC_MSIP0_OFFSET = 10'h 10c;
  parameter logic [9:0] RV_PLIC_IE1_OFFSET = 10'h 200;
  parameter logic [9:0] RV_PLIC_THRESHOLD1_OFFSET = 10'h 204;
  parameter logic [9:0] RV_PLIC_CC1_OFFSET = 10'h 208;
  parameter logic [9:0] RV_PLIC_MSIP1_OFFSET = 10'h 20c;


  // Register Index
  typedef enum int {
    RV_PLIC_IP,
    RV_PLIC_LE,
    RV_PLIC_PRIO0,
    RV_PLIC_PRIO1,
    RV_PLIC_PRIO2,
    RV_PLIC_PRIO3,
    RV_PLIC_PRIO4,
    RV_PLIC_PRIO5,
    RV_PLIC_PRIO6,
    RV_PLIC_PRIO7,
    RV_PLIC_PRIO8,
    RV_PLIC_PRIO9,
    RV_PLIC_IE0,
    RV_PLIC_THRESHOLD0,
    RV_PLIC_CC0,
    RV_PLIC_MSIP0,
    RV_PLIC_IE1,
    RV_PLIC_THRESHOLD1,
    RV_PLIC_CC1,
    RV_PLIC_MSIP1
  } rv_plic_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] RV_PLIC_PERMIT [20] = '{
    4'b 0011, // index[ 0] RV_PLIC_IP
    4'b 0011, // index[ 1] RV_PLIC_LE
    4'b 0001, // index[ 2] RV_PLIC_PRIO0
    4'b 0001, // index[ 3] RV_PLIC_PRIO1
    4'b 0001, // index[ 4] RV_PLIC_PRIO2
    4'b 0001, // index[ 5] RV_PLIC_PRIO3
    4'b 0001, // index[ 6] RV_PLIC_PRIO4
    4'b 0001, // index[ 7] RV_PLIC_PRIO5
    4'b 0001, // index[ 8] RV_PLIC_PRIO6
    4'b 0001, // index[ 9] RV_PLIC_PRIO7
    4'b 0001, // index[10] RV_PLIC_PRIO8
    4'b 0001, // index[11] RV_PLIC_PRIO9
    4'b 0011, // index[12] RV_PLIC_IE0
    4'b 0001, // index[13] RV_PLIC_THRESHOLD0
    4'b 0001, // index[14] RV_PLIC_CC0
    4'b 0001, // index[15] RV_PLIC_MSIP0
    4'b 0011, // index[16] RV_PLIC_IE1
    4'b 0001, // index[17] RV_PLIC_THRESHOLD1
    4'b 0001, // index[18] RV_PLIC_CC1
    4'b 0001  // index[19] RV_PLIC_MSIP1
  };
endpackage

