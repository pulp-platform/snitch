// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "common_cells/assertions.svh"

module rv_plic_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic
) (
  input clk_i,
  input rst_ni,

  // Below Register interface can be changed
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output rv_plic_reg_pkg::rv_plic_reg2hw_t reg2hw, // Write
  input  rv_plic_reg_pkg::rv_plic_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import rv_plic_reg_pkg::* ;

  localparam int AW = 10;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;

  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;

  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic ip_p_0_qs;
  logic ip_p_1_qs;
  logic ip_p_2_qs;
  logic ip_p_3_qs;
  logic ip_p_4_qs;
  logic ip_p_5_qs;
  logic ip_p_6_qs;
  logic ip_p_7_qs;
  logic ip_p_8_qs;
  logic ip_p_9_qs;
  logic le_le_0_qs;
  logic le_le_0_wd;
  logic le_le_0_we;
  logic le_le_1_qs;
  logic le_le_1_wd;
  logic le_le_1_we;
  logic le_le_2_qs;
  logic le_le_2_wd;
  logic le_le_2_we;
  logic le_le_3_qs;
  logic le_le_3_wd;
  logic le_le_3_we;
  logic le_le_4_qs;
  logic le_le_4_wd;
  logic le_le_4_we;
  logic le_le_5_qs;
  logic le_le_5_wd;
  logic le_le_5_we;
  logic le_le_6_qs;
  logic le_le_6_wd;
  logic le_le_6_we;
  logic le_le_7_qs;
  logic le_le_7_wd;
  logic le_le_7_we;
  logic le_le_8_qs;
  logic le_le_8_wd;
  logic le_le_8_we;
  logic le_le_9_qs;
  logic le_le_9_wd;
  logic le_le_9_we;
  logic [2:0] prio0_qs;
  logic [2:0] prio0_wd;
  logic prio0_we;
  logic [2:0] prio1_qs;
  logic [2:0] prio1_wd;
  logic prio1_we;
  logic [2:0] prio2_qs;
  logic [2:0] prio2_wd;
  logic prio2_we;
  logic [2:0] prio3_qs;
  logic [2:0] prio3_wd;
  logic prio3_we;
  logic [2:0] prio4_qs;
  logic [2:0] prio4_wd;
  logic prio4_we;
  logic [2:0] prio5_qs;
  logic [2:0] prio5_wd;
  logic prio5_we;
  logic [2:0] prio6_qs;
  logic [2:0] prio6_wd;
  logic prio6_we;
  logic [2:0] prio7_qs;
  logic [2:0] prio7_wd;
  logic prio7_we;
  logic [2:0] prio8_qs;
  logic [2:0] prio8_wd;
  logic prio8_we;
  logic [2:0] prio9_qs;
  logic [2:0] prio9_wd;
  logic prio9_we;
  logic ie0_e_0_qs;
  logic ie0_e_0_wd;
  logic ie0_e_0_we;
  logic ie0_e_1_qs;
  logic ie0_e_1_wd;
  logic ie0_e_1_we;
  logic ie0_e_2_qs;
  logic ie0_e_2_wd;
  logic ie0_e_2_we;
  logic ie0_e_3_qs;
  logic ie0_e_3_wd;
  logic ie0_e_3_we;
  logic ie0_e_4_qs;
  logic ie0_e_4_wd;
  logic ie0_e_4_we;
  logic ie0_e_5_qs;
  logic ie0_e_5_wd;
  logic ie0_e_5_we;
  logic ie0_e_6_qs;
  logic ie0_e_6_wd;
  logic ie0_e_6_we;
  logic ie0_e_7_qs;
  logic ie0_e_7_wd;
  logic ie0_e_7_we;
  logic ie0_e_8_qs;
  logic ie0_e_8_wd;
  logic ie0_e_8_we;
  logic ie0_e_9_qs;
  logic ie0_e_9_wd;
  logic ie0_e_9_we;
  logic [2:0] threshold0_qs;
  logic [2:0] threshold0_wd;
  logic threshold0_we;
  logic [3:0] cc0_qs;
  logic [3:0] cc0_wd;
  logic cc0_we;
  logic cc0_re;
  logic msip0_qs;
  logic msip0_wd;
  logic msip0_we;
  logic ie1_e_0_qs;
  logic ie1_e_0_wd;
  logic ie1_e_0_we;
  logic ie1_e_1_qs;
  logic ie1_e_1_wd;
  logic ie1_e_1_we;
  logic ie1_e_2_qs;
  logic ie1_e_2_wd;
  logic ie1_e_2_we;
  logic ie1_e_3_qs;
  logic ie1_e_3_wd;
  logic ie1_e_3_we;
  logic ie1_e_4_qs;
  logic ie1_e_4_wd;
  logic ie1_e_4_we;
  logic ie1_e_5_qs;
  logic ie1_e_5_wd;
  logic ie1_e_5_we;
  logic ie1_e_6_qs;
  logic ie1_e_6_wd;
  logic ie1_e_6_we;
  logic ie1_e_7_qs;
  logic ie1_e_7_wd;
  logic ie1_e_7_we;
  logic ie1_e_8_qs;
  logic ie1_e_8_wd;
  logic ie1_e_8_we;
  logic ie1_e_9_qs;
  logic ie1_e_9_wd;
  logic ie1_e_9_we;
  logic [2:0] threshold1_qs;
  logic [2:0] threshold1_wd;
  logic threshold1_we;
  logic [3:0] cc1_qs;
  logic [3:0] cc1_wd;
  logic cc1_we;
  logic cc1_re;
  logic msip1_qs;
  logic msip1_wd;
  logic msip1_we;

  // Register instances

  // Subregister 0 of Multireg ip
  // R[ip]: V(False)

  // F[p_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip_p_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[0].de),
    .d      (hw2reg.ip[0].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip_p_0_qs)
  );


  // F[p_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip_p_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[1].de),
    .d      (hw2reg.ip[1].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip_p_1_qs)
  );


  // F[p_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip_p_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[2].de),
    .d      (hw2reg.ip[2].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip_p_2_qs)
  );


  // F[p_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip_p_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[3].de),
    .d      (hw2reg.ip[3].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip_p_3_qs)
  );


  // F[p_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip_p_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[4].de),
    .d      (hw2reg.ip[4].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip_p_4_qs)
  );


  // F[p_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip_p_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[5].de),
    .d      (hw2reg.ip[5].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip_p_5_qs)
  );


  // F[p_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip_p_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[6].de),
    .d      (hw2reg.ip[6].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip_p_6_qs)
  );


  // F[p_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip_p_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[7].de),
    .d      (hw2reg.ip[7].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip_p_7_qs)
  );


  // F[p_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip_p_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[8].de),
    .d      (hw2reg.ip[8].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip_p_8_qs)
  );


  // F[p_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip_p_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[9].de),
    .d      (hw2reg.ip[9].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip_p_9_qs)
  );




  // Subregister 0 of Multireg le
  // R[le]: V(False)

  // F[le_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le_le_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le_le_0_we),
    .wd     (le_le_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[0].q ),

    // to register interface (read)
    .qs     (le_le_0_qs)
  );


  // F[le_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le_le_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le_le_1_we),
    .wd     (le_le_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[1].q ),

    // to register interface (read)
    .qs     (le_le_1_qs)
  );


  // F[le_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le_le_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le_le_2_we),
    .wd     (le_le_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[2].q ),

    // to register interface (read)
    .qs     (le_le_2_qs)
  );


  // F[le_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le_le_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le_le_3_we),
    .wd     (le_le_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[3].q ),

    // to register interface (read)
    .qs     (le_le_3_qs)
  );


  // F[le_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le_le_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le_le_4_we),
    .wd     (le_le_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[4].q ),

    // to register interface (read)
    .qs     (le_le_4_qs)
  );


  // F[le_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le_le_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le_le_5_we),
    .wd     (le_le_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[5].q ),

    // to register interface (read)
    .qs     (le_le_5_qs)
  );


  // F[le_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le_le_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le_le_6_we),
    .wd     (le_le_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[6].q ),

    // to register interface (read)
    .qs     (le_le_6_qs)
  );


  // F[le_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le_le_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le_le_7_we),
    .wd     (le_le_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[7].q ),

    // to register interface (read)
    .qs     (le_le_7_qs)
  );


  // F[le_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le_le_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le_le_8_we),
    .wd     (le_le_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[8].q ),

    // to register interface (read)
    .qs     (le_le_8_qs)
  );


  // F[le_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le_le_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le_le_9_we),
    .wd     (le_le_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[9].q ),

    // to register interface (read)
    .qs     (le_le_9_qs)
  );



  // R[prio0]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_prio0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio0_we),
    .wd     (prio0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio0.q ),

    // to register interface (read)
    .qs     (prio0_qs)
  );


  // R[prio1]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_prio1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio1_we),
    .wd     (prio1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio1.q ),

    // to register interface (read)
    .qs     (prio1_qs)
  );


  // R[prio2]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_prio2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio2_we),
    .wd     (prio2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio2.q ),

    // to register interface (read)
    .qs     (prio2_qs)
  );


  // R[prio3]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_prio3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio3_we),
    .wd     (prio3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio3.q ),

    // to register interface (read)
    .qs     (prio3_qs)
  );


  // R[prio4]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_prio4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio4_we),
    .wd     (prio4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio4.q ),

    // to register interface (read)
    .qs     (prio4_qs)
  );


  // R[prio5]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_prio5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio5_we),
    .wd     (prio5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio5.q ),

    // to register interface (read)
    .qs     (prio5_qs)
  );


  // R[prio6]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_prio6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio6_we),
    .wd     (prio6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio6.q ),

    // to register interface (read)
    .qs     (prio6_qs)
  );


  // R[prio7]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_prio7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio7_we),
    .wd     (prio7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio7.q ),

    // to register interface (read)
    .qs     (prio7_qs)
  );


  // R[prio8]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_prio8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio8_we),
    .wd     (prio8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio8.q ),

    // to register interface (read)
    .qs     (prio8_qs)
  );


  // R[prio9]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_prio9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio9_we),
    .wd     (prio9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio9.q ),

    // to register interface (read)
    .qs     (prio9_qs)
  );



  // Subregister 0 of Multireg ie0
  // R[ie0]: V(False)

  // F[e_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie0_e_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie0_e_0_we),
    .wd     (ie0_e_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[0].q ),

    // to register interface (read)
    .qs     (ie0_e_0_qs)
  );


  // F[e_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie0_e_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie0_e_1_we),
    .wd     (ie0_e_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[1].q ),

    // to register interface (read)
    .qs     (ie0_e_1_qs)
  );


  // F[e_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie0_e_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie0_e_2_we),
    .wd     (ie0_e_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[2].q ),

    // to register interface (read)
    .qs     (ie0_e_2_qs)
  );


  // F[e_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie0_e_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie0_e_3_we),
    .wd     (ie0_e_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[3].q ),

    // to register interface (read)
    .qs     (ie0_e_3_qs)
  );


  // F[e_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie0_e_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie0_e_4_we),
    .wd     (ie0_e_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[4].q ),

    // to register interface (read)
    .qs     (ie0_e_4_qs)
  );


  // F[e_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie0_e_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie0_e_5_we),
    .wd     (ie0_e_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[5].q ),

    // to register interface (read)
    .qs     (ie0_e_5_qs)
  );


  // F[e_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie0_e_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie0_e_6_we),
    .wd     (ie0_e_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[6].q ),

    // to register interface (read)
    .qs     (ie0_e_6_qs)
  );


  // F[e_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie0_e_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie0_e_7_we),
    .wd     (ie0_e_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[7].q ),

    // to register interface (read)
    .qs     (ie0_e_7_qs)
  );


  // F[e_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie0_e_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie0_e_8_we),
    .wd     (ie0_e_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[8].q ),

    // to register interface (read)
    .qs     (ie0_e_8_qs)
  );


  // F[e_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie0_e_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie0_e_9_we),
    .wd     (ie0_e_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[9].q ),

    // to register interface (read)
    .qs     (ie0_e_9_qs)
  );



  // R[threshold0]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_threshold0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (threshold0_we),
    .wd     (threshold0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.threshold0.q ),

    // to register interface (read)
    .qs     (threshold0_qs)
  );


  // R[cc0]: V(True)

  prim_subreg_ext #(
    .DW    (4)
  ) u_cc0 (
    .re     (cc0_re),
    .we     (cc0_we),
    .wd     (cc0_wd),
    .d      (hw2reg.cc0.d),
    .qre    (reg2hw.cc0.re),
    .qe     (reg2hw.cc0.qe),
    .q      (reg2hw.cc0.q ),
    .qs     (cc0_qs)
  );


  // R[msip0]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_msip0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (msip0_we),
    .wd     (msip0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.msip0.q ),

    // to register interface (read)
    .qs     (msip0_qs)
  );



  // Subregister 0 of Multireg ie1
  // R[ie1]: V(False)

  // F[e_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie1_e_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie1_e_0_we),
    .wd     (ie1_e_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie1[0].q ),

    // to register interface (read)
    .qs     (ie1_e_0_qs)
  );


  // F[e_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie1_e_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie1_e_1_we),
    .wd     (ie1_e_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie1[1].q ),

    // to register interface (read)
    .qs     (ie1_e_1_qs)
  );


  // F[e_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie1_e_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie1_e_2_we),
    .wd     (ie1_e_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie1[2].q ),

    // to register interface (read)
    .qs     (ie1_e_2_qs)
  );


  // F[e_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie1_e_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie1_e_3_we),
    .wd     (ie1_e_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie1[3].q ),

    // to register interface (read)
    .qs     (ie1_e_3_qs)
  );


  // F[e_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie1_e_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie1_e_4_we),
    .wd     (ie1_e_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie1[4].q ),

    // to register interface (read)
    .qs     (ie1_e_4_qs)
  );


  // F[e_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie1_e_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie1_e_5_we),
    .wd     (ie1_e_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie1[5].q ),

    // to register interface (read)
    .qs     (ie1_e_5_qs)
  );


  // F[e_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie1_e_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie1_e_6_we),
    .wd     (ie1_e_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie1[6].q ),

    // to register interface (read)
    .qs     (ie1_e_6_qs)
  );


  // F[e_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie1_e_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie1_e_7_we),
    .wd     (ie1_e_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie1[7].q ),

    // to register interface (read)
    .qs     (ie1_e_7_qs)
  );


  // F[e_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie1_e_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie1_e_8_we),
    .wd     (ie1_e_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie1[8].q ),

    // to register interface (read)
    .qs     (ie1_e_8_qs)
  );


  // F[e_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie1_e_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie1_e_9_we),
    .wd     (ie1_e_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie1[9].q ),

    // to register interface (read)
    .qs     (ie1_e_9_qs)
  );



  // R[threshold1]: V(False)

  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_threshold1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (threshold1_we),
    .wd     (threshold1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.threshold1.q ),

    // to register interface (read)
    .qs     (threshold1_qs)
  );


  // R[cc1]: V(True)

  prim_subreg_ext #(
    .DW    (4)
  ) u_cc1 (
    .re     (cc1_re),
    .we     (cc1_we),
    .wd     (cc1_wd),
    .d      (hw2reg.cc1.d),
    .qre    (reg2hw.cc1.re),
    .qe     (reg2hw.cc1.qe),
    .q      (reg2hw.cc1.q ),
    .qs     (cc1_qs)
  );


  // R[msip1]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_msip1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (msip1_we),
    .wd     (msip1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.msip1.q ),

    // to register interface (read)
    .qs     (msip1_qs)
  );




  logic [19:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == RV_PLIC_IP_OFFSET);
    addr_hit[ 1] = (reg_addr == RV_PLIC_LE_OFFSET);
    addr_hit[ 2] = (reg_addr == RV_PLIC_PRIO0_OFFSET);
    addr_hit[ 3] = (reg_addr == RV_PLIC_PRIO1_OFFSET);
    addr_hit[ 4] = (reg_addr == RV_PLIC_PRIO2_OFFSET);
    addr_hit[ 5] = (reg_addr == RV_PLIC_PRIO3_OFFSET);
    addr_hit[ 6] = (reg_addr == RV_PLIC_PRIO4_OFFSET);
    addr_hit[ 7] = (reg_addr == RV_PLIC_PRIO5_OFFSET);
    addr_hit[ 8] = (reg_addr == RV_PLIC_PRIO6_OFFSET);
    addr_hit[ 9] = (reg_addr == RV_PLIC_PRIO7_OFFSET);
    addr_hit[10] = (reg_addr == RV_PLIC_PRIO8_OFFSET);
    addr_hit[11] = (reg_addr == RV_PLIC_PRIO9_OFFSET);
    addr_hit[12] = (reg_addr == RV_PLIC_IE0_OFFSET);
    addr_hit[13] = (reg_addr == RV_PLIC_THRESHOLD0_OFFSET);
    addr_hit[14] = (reg_addr == RV_PLIC_CC0_OFFSET);
    addr_hit[15] = (reg_addr == RV_PLIC_MSIP0_OFFSET);
    addr_hit[16] = (reg_addr == RV_PLIC_IE1_OFFSET);
    addr_hit[17] = (reg_addr == RV_PLIC_THRESHOLD1_OFFSET);
    addr_hit[18] = (reg_addr == RV_PLIC_CC1_OFFSET);
    addr_hit[19] = (reg_addr == RV_PLIC_MSIP1_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[ 0] && reg_we && (RV_PLIC_PERMIT[ 0] != (RV_PLIC_PERMIT[ 0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 1] && reg_we && (RV_PLIC_PERMIT[ 1] != (RV_PLIC_PERMIT[ 1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 2] && reg_we && (RV_PLIC_PERMIT[ 2] != (RV_PLIC_PERMIT[ 2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 3] && reg_we && (RV_PLIC_PERMIT[ 3] != (RV_PLIC_PERMIT[ 3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 4] && reg_we && (RV_PLIC_PERMIT[ 4] != (RV_PLIC_PERMIT[ 4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 5] && reg_we && (RV_PLIC_PERMIT[ 5] != (RV_PLIC_PERMIT[ 5] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 6] && reg_we && (RV_PLIC_PERMIT[ 6] != (RV_PLIC_PERMIT[ 6] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 7] && reg_we && (RV_PLIC_PERMIT[ 7] != (RV_PLIC_PERMIT[ 7] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 8] && reg_we && (RV_PLIC_PERMIT[ 8] != (RV_PLIC_PERMIT[ 8] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 9] && reg_we && (RV_PLIC_PERMIT[ 9] != (RV_PLIC_PERMIT[ 9] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[10] && reg_we && (RV_PLIC_PERMIT[10] != (RV_PLIC_PERMIT[10] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[11] && reg_we && (RV_PLIC_PERMIT[11] != (RV_PLIC_PERMIT[11] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[12] && reg_we && (RV_PLIC_PERMIT[12] != (RV_PLIC_PERMIT[12] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[13] && reg_we && (RV_PLIC_PERMIT[13] != (RV_PLIC_PERMIT[13] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[14] && reg_we && (RV_PLIC_PERMIT[14] != (RV_PLIC_PERMIT[14] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[15] && reg_we && (RV_PLIC_PERMIT[15] != (RV_PLIC_PERMIT[15] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[16] && reg_we && (RV_PLIC_PERMIT[16] != (RV_PLIC_PERMIT[16] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[17] && reg_we && (RV_PLIC_PERMIT[17] != (RV_PLIC_PERMIT[17] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[18] && reg_we && (RV_PLIC_PERMIT[18] != (RV_PLIC_PERMIT[18] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[19] && reg_we && (RV_PLIC_PERMIT[19] != (RV_PLIC_PERMIT[19] & reg_be))) wr_err = 1'b1 ;
  end











  assign le_le_0_we = addr_hit[1] & reg_we & ~wr_err;
  assign le_le_0_wd = reg_wdata[0];

  assign le_le_1_we = addr_hit[1] & reg_we & ~wr_err;
  assign le_le_1_wd = reg_wdata[1];

  assign le_le_2_we = addr_hit[1] & reg_we & ~wr_err;
  assign le_le_2_wd = reg_wdata[2];

  assign le_le_3_we = addr_hit[1] & reg_we & ~wr_err;
  assign le_le_3_wd = reg_wdata[3];

  assign le_le_4_we = addr_hit[1] & reg_we & ~wr_err;
  assign le_le_4_wd = reg_wdata[4];

  assign le_le_5_we = addr_hit[1] & reg_we & ~wr_err;
  assign le_le_5_wd = reg_wdata[5];

  assign le_le_6_we = addr_hit[1] & reg_we & ~wr_err;
  assign le_le_6_wd = reg_wdata[6];

  assign le_le_7_we = addr_hit[1] & reg_we & ~wr_err;
  assign le_le_7_wd = reg_wdata[7];

  assign le_le_8_we = addr_hit[1] & reg_we & ~wr_err;
  assign le_le_8_wd = reg_wdata[8];

  assign le_le_9_we = addr_hit[1] & reg_we & ~wr_err;
  assign le_le_9_wd = reg_wdata[9];

  assign prio0_we = addr_hit[2] & reg_we & ~wr_err;
  assign prio0_wd = reg_wdata[2:0];

  assign prio1_we = addr_hit[3] & reg_we & ~wr_err;
  assign prio1_wd = reg_wdata[2:0];

  assign prio2_we = addr_hit[4] & reg_we & ~wr_err;
  assign prio2_wd = reg_wdata[2:0];

  assign prio3_we = addr_hit[5] & reg_we & ~wr_err;
  assign prio3_wd = reg_wdata[2:0];

  assign prio4_we = addr_hit[6] & reg_we & ~wr_err;
  assign prio4_wd = reg_wdata[2:0];

  assign prio5_we = addr_hit[7] & reg_we & ~wr_err;
  assign prio5_wd = reg_wdata[2:0];

  assign prio6_we = addr_hit[8] & reg_we & ~wr_err;
  assign prio6_wd = reg_wdata[2:0];

  assign prio7_we = addr_hit[9] & reg_we & ~wr_err;
  assign prio7_wd = reg_wdata[2:0];

  assign prio8_we = addr_hit[10] & reg_we & ~wr_err;
  assign prio8_wd = reg_wdata[2:0];

  assign prio9_we = addr_hit[11] & reg_we & ~wr_err;
  assign prio9_wd = reg_wdata[2:0];

  assign ie0_e_0_we = addr_hit[12] & reg_we & ~wr_err;
  assign ie0_e_0_wd = reg_wdata[0];

  assign ie0_e_1_we = addr_hit[12] & reg_we & ~wr_err;
  assign ie0_e_1_wd = reg_wdata[1];

  assign ie0_e_2_we = addr_hit[12] & reg_we & ~wr_err;
  assign ie0_e_2_wd = reg_wdata[2];

  assign ie0_e_3_we = addr_hit[12] & reg_we & ~wr_err;
  assign ie0_e_3_wd = reg_wdata[3];

  assign ie0_e_4_we = addr_hit[12] & reg_we & ~wr_err;
  assign ie0_e_4_wd = reg_wdata[4];

  assign ie0_e_5_we = addr_hit[12] & reg_we & ~wr_err;
  assign ie0_e_5_wd = reg_wdata[5];

  assign ie0_e_6_we = addr_hit[12] & reg_we & ~wr_err;
  assign ie0_e_6_wd = reg_wdata[6];

  assign ie0_e_7_we = addr_hit[12] & reg_we & ~wr_err;
  assign ie0_e_7_wd = reg_wdata[7];

  assign ie0_e_8_we = addr_hit[12] & reg_we & ~wr_err;
  assign ie0_e_8_wd = reg_wdata[8];

  assign ie0_e_9_we = addr_hit[12] & reg_we & ~wr_err;
  assign ie0_e_9_wd = reg_wdata[9];

  assign threshold0_we = addr_hit[13] & reg_we & ~wr_err;
  assign threshold0_wd = reg_wdata[2:0];

  assign cc0_we = addr_hit[14] & reg_we & ~wr_err;
  assign cc0_wd = reg_wdata[3:0];
  assign cc0_re = addr_hit[14] && reg_re;

  assign msip0_we = addr_hit[15] & reg_we & ~wr_err;
  assign msip0_wd = reg_wdata[0];

  assign ie1_e_0_we = addr_hit[16] & reg_we & ~wr_err;
  assign ie1_e_0_wd = reg_wdata[0];

  assign ie1_e_1_we = addr_hit[16] & reg_we & ~wr_err;
  assign ie1_e_1_wd = reg_wdata[1];

  assign ie1_e_2_we = addr_hit[16] & reg_we & ~wr_err;
  assign ie1_e_2_wd = reg_wdata[2];

  assign ie1_e_3_we = addr_hit[16] & reg_we & ~wr_err;
  assign ie1_e_3_wd = reg_wdata[3];

  assign ie1_e_4_we = addr_hit[16] & reg_we & ~wr_err;
  assign ie1_e_4_wd = reg_wdata[4];

  assign ie1_e_5_we = addr_hit[16] & reg_we & ~wr_err;
  assign ie1_e_5_wd = reg_wdata[5];

  assign ie1_e_6_we = addr_hit[16] & reg_we & ~wr_err;
  assign ie1_e_6_wd = reg_wdata[6];

  assign ie1_e_7_we = addr_hit[16] & reg_we & ~wr_err;
  assign ie1_e_7_wd = reg_wdata[7];

  assign ie1_e_8_we = addr_hit[16] & reg_we & ~wr_err;
  assign ie1_e_8_wd = reg_wdata[8];

  assign ie1_e_9_we = addr_hit[16] & reg_we & ~wr_err;
  assign ie1_e_9_wd = reg_wdata[9];

  assign threshold1_we = addr_hit[17] & reg_we & ~wr_err;
  assign threshold1_wd = reg_wdata[2:0];

  assign cc1_we = addr_hit[18] & reg_we & ~wr_err;
  assign cc1_wd = reg_wdata[3:0];
  assign cc1_re = addr_hit[18] && reg_re;

  assign msip1_we = addr_hit[19] & reg_we & ~wr_err;
  assign msip1_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = ip_p_0_qs;
        reg_rdata_next[1] = ip_p_1_qs;
        reg_rdata_next[2] = ip_p_2_qs;
        reg_rdata_next[3] = ip_p_3_qs;
        reg_rdata_next[4] = ip_p_4_qs;
        reg_rdata_next[5] = ip_p_5_qs;
        reg_rdata_next[6] = ip_p_6_qs;
        reg_rdata_next[7] = ip_p_7_qs;
        reg_rdata_next[8] = ip_p_8_qs;
        reg_rdata_next[9] = ip_p_9_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = le_le_0_qs;
        reg_rdata_next[1] = le_le_1_qs;
        reg_rdata_next[2] = le_le_2_qs;
        reg_rdata_next[3] = le_le_3_qs;
        reg_rdata_next[4] = le_le_4_qs;
        reg_rdata_next[5] = le_le_5_qs;
        reg_rdata_next[6] = le_le_6_qs;
        reg_rdata_next[7] = le_le_7_qs;
        reg_rdata_next[8] = le_le_8_qs;
        reg_rdata_next[9] = le_le_9_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[2:0] = prio0_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[2:0] = prio1_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[2:0] = prio2_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[2:0] = prio3_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[2:0] = prio4_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[2:0] = prio5_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[2:0] = prio6_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[2:0] = prio7_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[2:0] = prio8_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[2:0] = prio9_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = ie0_e_0_qs;
        reg_rdata_next[1] = ie0_e_1_qs;
        reg_rdata_next[2] = ie0_e_2_qs;
        reg_rdata_next[3] = ie0_e_3_qs;
        reg_rdata_next[4] = ie0_e_4_qs;
        reg_rdata_next[5] = ie0_e_5_qs;
        reg_rdata_next[6] = ie0_e_6_qs;
        reg_rdata_next[7] = ie0_e_7_qs;
        reg_rdata_next[8] = ie0_e_8_qs;
        reg_rdata_next[9] = ie0_e_9_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[2:0] = threshold0_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[3:0] = cc0_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = msip0_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = ie1_e_0_qs;
        reg_rdata_next[1] = ie1_e_1_qs;
        reg_rdata_next[2] = ie1_e_2_qs;
        reg_rdata_next[3] = ie1_e_3_qs;
        reg_rdata_next[4] = ie1_e_4_qs;
        reg_rdata_next[5] = ie1_e_5_qs;
        reg_rdata_next[6] = ie1_e_6_qs;
        reg_rdata_next[7] = ie1_e_7_qs;
        reg_rdata_next[8] = ie1_e_8_qs;
        reg_rdata_next[9] = ie1_e_9_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[2:0] = threshold1_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[3:0] = cc1_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[0] = msip1_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))


endmodule
