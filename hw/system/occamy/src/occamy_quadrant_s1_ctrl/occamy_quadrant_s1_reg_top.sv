// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module occamy_quadrant_s1_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 9
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output occamy_quadrant_s1_reg_pkg::occamy_quadrant_s1_reg2hw_t reg2hw, // Write
  input  occamy_quadrant_s1_reg_pkg::occamy_quadrant_s1_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import occamy_quadrant_s1_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic clk_ena_qs;
  logic clk_ena_wd;
  logic clk_ena_we;
  logic reset_n_qs;
  logic reset_n_wd;
  logic reset_n_we;
  logic isolate_narrow_in_qs;
  logic isolate_narrow_in_wd;
  logic isolate_narrow_in_we;
  logic isolate_narrow_out_qs;
  logic isolate_narrow_out_wd;
  logic isolate_narrow_out_we;
  logic isolate_wide_in_qs;
  logic isolate_wide_in_wd;
  logic isolate_wide_in_we;
  logic isolate_wide_out_qs;
  logic isolate_wide_out_wd;
  logic isolate_wide_out_we;
  logic isolated_narrow_in_qs;
  logic isolated_narrow_in_re;
  logic isolated_narrow_out_qs;
  logic isolated_narrow_out_re;
  logic isolated_wide_in_qs;
  logic isolated_wide_in_re;
  logic isolated_wide_out_qs;
  logic isolated_wide_out_re;
  logic ro_cache_enable_qs;
  logic ro_cache_enable_wd;
  logic ro_cache_enable_we;
  logic ro_cache_flush_qs;
  logic ro_cache_flush_wd;
  logic ro_cache_flush_we;
  logic [31:0] ro_start_addr_low_0_qs;
  logic [31:0] ro_start_addr_low_0_wd;
  logic ro_start_addr_low_0_we;
  logic [15:0] ro_start_addr_high_0_qs;
  logic [15:0] ro_start_addr_high_0_wd;
  logic ro_start_addr_high_0_we;
  logic [31:0] ro_end_addr_low_0_qs;
  logic [31:0] ro_end_addr_low_0_wd;
  logic ro_end_addr_low_0_we;
  logic [15:0] ro_end_addr_high_0_qs;
  logic [15:0] ro_end_addr_high_0_wd;
  logic ro_end_addr_high_0_we;
  logic [31:0] ro_start_addr_low_1_qs;
  logic [31:0] ro_start_addr_low_1_wd;
  logic ro_start_addr_low_1_we;
  logic [15:0] ro_start_addr_high_1_qs;
  logic [15:0] ro_start_addr_high_1_wd;
  logic ro_start_addr_high_1_we;
  logic [31:0] ro_end_addr_low_1_qs;
  logic [31:0] ro_end_addr_low_1_wd;
  logic ro_end_addr_low_1_we;
  logic [15:0] ro_end_addr_high_1_qs;
  logic [15:0] ro_end_addr_high_1_wd;
  logic ro_end_addr_high_1_we;
  logic [31:0] ro_start_addr_low_2_qs;
  logic [31:0] ro_start_addr_low_2_wd;
  logic ro_start_addr_low_2_we;
  logic [15:0] ro_start_addr_high_2_qs;
  logic [15:0] ro_start_addr_high_2_wd;
  logic ro_start_addr_high_2_we;
  logic [31:0] ro_end_addr_low_2_qs;
  logic [31:0] ro_end_addr_low_2_wd;
  logic ro_end_addr_low_2_we;
  logic [15:0] ro_end_addr_high_2_qs;
  logic [15:0] ro_end_addr_high_2_wd;
  logic ro_end_addr_high_2_we;
  logic [31:0] ro_start_addr_low_3_qs;
  logic [31:0] ro_start_addr_low_3_wd;
  logic ro_start_addr_low_3_we;
  logic [15:0] ro_start_addr_high_3_qs;
  logic [15:0] ro_start_addr_high_3_wd;
  logic ro_start_addr_high_3_we;
  logic [31:0] ro_end_addr_low_3_qs;
  logic [31:0] ro_end_addr_low_3_wd;
  logic ro_end_addr_low_3_we;
  logic [15:0] ro_end_addr_high_3_qs;
  logic [15:0] ro_end_addr_high_3_wd;
  logic ro_end_addr_high_3_we;

  // Register instances
  // R[clk_ena]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clk_ena (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clk_ena_we),
    .wd     (clk_ena_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clk_ena.q ),

    // to register interface (read)
    .qs     (clk_ena_qs)
  );


  // R[reset_n]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_reset_n (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_n_we),
    .wd     (reset_n_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_n.q ),

    // to register interface (read)
    .qs     (reset_n_qs)
  );


  // R[isolate]: V(False)

  //   F[narrow_in]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_isolate_narrow_in (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (isolate_narrow_in_we),
    .wd     (isolate_narrow_in_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.isolate.narrow_in.q ),

    // to register interface (read)
    .qs     (isolate_narrow_in_qs)
  );


  //   F[narrow_out]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_isolate_narrow_out (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (isolate_narrow_out_we),
    .wd     (isolate_narrow_out_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.isolate.narrow_out.q ),

    // to register interface (read)
    .qs     (isolate_narrow_out_qs)
  );


  //   F[wide_in]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_isolate_wide_in (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (isolate_wide_in_we),
    .wd     (isolate_wide_in_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.isolate.wide_in.q ),

    // to register interface (read)
    .qs     (isolate_wide_in_qs)
  );


  //   F[wide_out]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_isolate_wide_out (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (isolate_wide_out_we),
    .wd     (isolate_wide_out_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.isolate.wide_out.q ),

    // to register interface (read)
    .qs     (isolate_wide_out_qs)
  );


  // R[isolated]: V(True)

  //   F[narrow_in]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_narrow_in (
    .re     (isolated_narrow_in_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated.narrow_in.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_narrow_in_qs)
  );


  //   F[narrow_out]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_narrow_out (
    .re     (isolated_narrow_out_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated.narrow_out.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_narrow_out_qs)
  );


  //   F[wide_in]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_wide_in (
    .re     (isolated_wide_in_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated.wide_in.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_wide_in_qs)
  );


  //   F[wide_out]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_wide_out (
    .re     (isolated_wide_out_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated.wide_out.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_wide_out_qs)
  );


  // R[ro_cache_enable]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_enable_we),
    .wd     (ro_cache_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_enable.q ),

    // to register interface (read)
    .qs     (ro_cache_enable_qs)
  );


  // R[ro_cache_flush]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ro_cache_flush (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_cache_flush_we),
    .wd     (ro_cache_flush_wd),

    // from internal hardware
    .de     (hw2reg.ro_cache_flush.de),
    .d      (hw2reg.ro_cache_flush.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_cache_flush.q ),

    // to register interface (read)
    .qs     (ro_cache_flush_qs)
  );


  // R[ro_start_addr_low_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_0_we),
    .wd     (ro_start_addr_low_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_0.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_0_qs)
  );


  // R[ro_start_addr_high_0]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_ro_start_addr_high_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_0_we),
    .wd     (ro_start_addr_high_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_0.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_0_qs)
  );


  // R[ro_end_addr_low_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_0_we),
    .wd     (ro_end_addr_low_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_0.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_0_qs)
  );


  // R[ro_end_addr_high_0]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_end_addr_high_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_0_we),
    .wd     (ro_end_addr_high_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_0.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_0_qs)
  );


  // R[ro_start_addr_low_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_1_we),
    .wd     (ro_start_addr_low_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_1.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_1_qs)
  );


  // R[ro_start_addr_high_1]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h1)
  ) u_ro_start_addr_high_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_1_we),
    .wd     (ro_start_addr_high_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_1.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_1_qs)
  );


  // R[ro_end_addr_low_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_1_we),
    .wd     (ro_end_addr_low_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_1.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_1_qs)
  );


  // R[ro_end_addr_high_1]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_end_addr_high_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_1_we),
    .wd     (ro_end_addr_high_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_1.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_1_qs)
  );


  // R[ro_start_addr_low_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_2_we),
    .wd     (ro_start_addr_low_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_2.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_2_qs)
  );


  // R[ro_start_addr_high_2]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h2)
  ) u_ro_start_addr_high_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_2_we),
    .wd     (ro_start_addr_high_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_2.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_2_qs)
  );


  // R[ro_end_addr_low_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_2_we),
    .wd     (ro_end_addr_low_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_2.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_2_qs)
  );


  // R[ro_end_addr_high_2]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_end_addr_high_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_2_we),
    .wd     (ro_end_addr_high_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_2.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_2_qs)
  );


  // R[ro_start_addr_low_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_start_addr_low_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_low_3_we),
    .wd     (ro_start_addr_low_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_low_3.q ),

    // to register interface (read)
    .qs     (ro_start_addr_low_3_qs)
  );


  // R[ro_start_addr_high_3]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h3)
  ) u_ro_start_addr_high_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_start_addr_high_3_we),
    .wd     (ro_start_addr_high_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_start_addr_high_3.q ),

    // to register interface (read)
    .qs     (ro_start_addr_high_3_qs)
  );


  // R[ro_end_addr_low_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ro_end_addr_low_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_low_3_we),
    .wd     (ro_end_addr_low_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_low_3.q ),

    // to register interface (read)
    .qs     (ro_end_addr_low_3_qs)
  );


  // R[ro_end_addr_high_3]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h4)
  ) u_ro_end_addr_high_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ro_end_addr_high_3_we),
    .wd     (ro_end_addr_high_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ro_end_addr_high_3.q ),

    // to register interface (read)
    .qs     (ro_end_addr_high_3_qs)
  );




  logic [21:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == OCCAMY_QUADRANT_S1_CLK_ENA_OFFSET);
    addr_hit[ 1] = (reg_addr == OCCAMY_QUADRANT_S1_RESET_N_OFFSET);
    addr_hit[ 2] = (reg_addr == OCCAMY_QUADRANT_S1_ISOLATE_OFFSET);
    addr_hit[ 3] = (reg_addr == OCCAMY_QUADRANT_S1_ISOLATED_OFFSET);
    addr_hit[ 4] = (reg_addr == OCCAMY_QUADRANT_S1_RO_CACHE_ENABLE_OFFSET);
    addr_hit[ 5] = (reg_addr == OCCAMY_QUADRANT_S1_RO_CACHE_FLUSH_OFFSET);
    addr_hit[ 6] = (reg_addr == OCCAMY_QUADRANT_S1_RO_START_ADDR_LOW_0_OFFSET);
    addr_hit[ 7] = (reg_addr == OCCAMY_QUADRANT_S1_RO_START_ADDR_HIGH_0_OFFSET);
    addr_hit[ 8] = (reg_addr == OCCAMY_QUADRANT_S1_RO_END_ADDR_LOW_0_OFFSET);
    addr_hit[ 9] = (reg_addr == OCCAMY_QUADRANT_S1_RO_END_ADDR_HIGH_0_OFFSET);
    addr_hit[10] = (reg_addr == OCCAMY_QUADRANT_S1_RO_START_ADDR_LOW_1_OFFSET);
    addr_hit[11] = (reg_addr == OCCAMY_QUADRANT_S1_RO_START_ADDR_HIGH_1_OFFSET);
    addr_hit[12] = (reg_addr == OCCAMY_QUADRANT_S1_RO_END_ADDR_LOW_1_OFFSET);
    addr_hit[13] = (reg_addr == OCCAMY_QUADRANT_S1_RO_END_ADDR_HIGH_1_OFFSET);
    addr_hit[14] = (reg_addr == OCCAMY_QUADRANT_S1_RO_START_ADDR_LOW_2_OFFSET);
    addr_hit[15] = (reg_addr == OCCAMY_QUADRANT_S1_RO_START_ADDR_HIGH_2_OFFSET);
    addr_hit[16] = (reg_addr == OCCAMY_QUADRANT_S1_RO_END_ADDR_LOW_2_OFFSET);
    addr_hit[17] = (reg_addr == OCCAMY_QUADRANT_S1_RO_END_ADDR_HIGH_2_OFFSET);
    addr_hit[18] = (reg_addr == OCCAMY_QUADRANT_S1_RO_START_ADDR_LOW_3_OFFSET);
    addr_hit[19] = (reg_addr == OCCAMY_QUADRANT_S1_RO_START_ADDR_HIGH_3_OFFSET);
    addr_hit[20] = (reg_addr == OCCAMY_QUADRANT_S1_RO_END_ADDR_LOW_3_OFFSET);
    addr_hit[21] = (reg_addr == OCCAMY_QUADRANT_S1_RO_END_ADDR_HIGH_3_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(OCCAMY_QUADRANT_S1_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(OCCAMY_QUADRANT_S1_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(OCCAMY_QUADRANT_S1_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(OCCAMY_QUADRANT_S1_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(OCCAMY_QUADRANT_S1_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(OCCAMY_QUADRANT_S1_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(OCCAMY_QUADRANT_S1_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(OCCAMY_QUADRANT_S1_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(OCCAMY_QUADRANT_S1_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(OCCAMY_QUADRANT_S1_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(OCCAMY_QUADRANT_S1_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(OCCAMY_QUADRANT_S1_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(OCCAMY_QUADRANT_S1_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(OCCAMY_QUADRANT_S1_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(OCCAMY_QUADRANT_S1_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(OCCAMY_QUADRANT_S1_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(OCCAMY_QUADRANT_S1_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(OCCAMY_QUADRANT_S1_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(OCCAMY_QUADRANT_S1_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(OCCAMY_QUADRANT_S1_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(OCCAMY_QUADRANT_S1_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(OCCAMY_QUADRANT_S1_PERMIT[21] & ~reg_be)))));
  end

  assign clk_ena_we = addr_hit[0] & reg_we & !reg_error;
  assign clk_ena_wd = reg_wdata[0];

  assign reset_n_we = addr_hit[1] & reg_we & !reg_error;
  assign reset_n_wd = reg_wdata[0];

  assign isolate_narrow_in_we = addr_hit[2] & reg_we & !reg_error;
  assign isolate_narrow_in_wd = reg_wdata[0];

  assign isolate_narrow_out_we = addr_hit[2] & reg_we & !reg_error;
  assign isolate_narrow_out_wd = reg_wdata[1];

  assign isolate_wide_in_we = addr_hit[2] & reg_we & !reg_error;
  assign isolate_wide_in_wd = reg_wdata[2];

  assign isolate_wide_out_we = addr_hit[2] & reg_we & !reg_error;
  assign isolate_wide_out_wd = reg_wdata[3];

  assign isolated_narrow_in_re = addr_hit[3] & reg_re & !reg_error;

  assign isolated_narrow_out_re = addr_hit[3] & reg_re & !reg_error;

  assign isolated_wide_in_re = addr_hit[3] & reg_re & !reg_error;

  assign isolated_wide_out_re = addr_hit[3] & reg_re & !reg_error;

  assign ro_cache_enable_we = addr_hit[4] & reg_we & !reg_error;
  assign ro_cache_enable_wd = reg_wdata[0];

  assign ro_cache_flush_we = addr_hit[5] & reg_we & !reg_error;
  assign ro_cache_flush_wd = reg_wdata[0];

  assign ro_start_addr_low_0_we = addr_hit[6] & reg_we & !reg_error;
  assign ro_start_addr_low_0_wd = reg_wdata[31:0];

  assign ro_start_addr_high_0_we = addr_hit[7] & reg_we & !reg_error;
  assign ro_start_addr_high_0_wd = reg_wdata[15:0];

  assign ro_end_addr_low_0_we = addr_hit[8] & reg_we & !reg_error;
  assign ro_end_addr_low_0_wd = reg_wdata[31:0];

  assign ro_end_addr_high_0_we = addr_hit[9] & reg_we & !reg_error;
  assign ro_end_addr_high_0_wd = reg_wdata[15:0];

  assign ro_start_addr_low_1_we = addr_hit[10] & reg_we & !reg_error;
  assign ro_start_addr_low_1_wd = reg_wdata[31:0];

  assign ro_start_addr_high_1_we = addr_hit[11] & reg_we & !reg_error;
  assign ro_start_addr_high_1_wd = reg_wdata[15:0];

  assign ro_end_addr_low_1_we = addr_hit[12] & reg_we & !reg_error;
  assign ro_end_addr_low_1_wd = reg_wdata[31:0];

  assign ro_end_addr_high_1_we = addr_hit[13] & reg_we & !reg_error;
  assign ro_end_addr_high_1_wd = reg_wdata[15:0];

  assign ro_start_addr_low_2_we = addr_hit[14] & reg_we & !reg_error;
  assign ro_start_addr_low_2_wd = reg_wdata[31:0];

  assign ro_start_addr_high_2_we = addr_hit[15] & reg_we & !reg_error;
  assign ro_start_addr_high_2_wd = reg_wdata[15:0];

  assign ro_end_addr_low_2_we = addr_hit[16] & reg_we & !reg_error;
  assign ro_end_addr_low_2_wd = reg_wdata[31:0];

  assign ro_end_addr_high_2_we = addr_hit[17] & reg_we & !reg_error;
  assign ro_end_addr_high_2_wd = reg_wdata[15:0];

  assign ro_start_addr_low_3_we = addr_hit[18] & reg_we & !reg_error;
  assign ro_start_addr_low_3_wd = reg_wdata[31:0];

  assign ro_start_addr_high_3_we = addr_hit[19] & reg_we & !reg_error;
  assign ro_start_addr_high_3_wd = reg_wdata[15:0];

  assign ro_end_addr_low_3_we = addr_hit[20] & reg_we & !reg_error;
  assign ro_end_addr_low_3_wd = reg_wdata[31:0];

  assign ro_end_addr_high_3_we = addr_hit[21] & reg_we & !reg_error;
  assign ro_end_addr_high_3_wd = reg_wdata[15:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = clk_ena_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = reset_n_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = isolate_narrow_in_qs;
        reg_rdata_next[1] = isolate_narrow_out_qs;
        reg_rdata_next[2] = isolate_wide_in_qs;
        reg_rdata_next[3] = isolate_wide_out_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = isolated_narrow_in_qs;
        reg_rdata_next[1] = isolated_narrow_out_qs;
        reg_rdata_next[2] = isolated_wide_in_qs;
        reg_rdata_next[3] = isolated_wide_out_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = ro_cache_enable_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = ro_cache_flush_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_0_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_0_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_0_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_0_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_1_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_1_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_1_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_1_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_2_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_2_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_2_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_2_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = ro_start_addr_low_3_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[15:0] = ro_start_addr_high_3_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = ro_end_addr_low_3_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[15:0] = ro_end_addr_high_3_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
